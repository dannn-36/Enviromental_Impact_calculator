# Generated from grammars/GoParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .GoParserBase import GoParserBase
else:
    from GoParserBase import GoParserBase

def serializedATN():
    return [
        4,1,89,1019,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,1,0,1,0,1,0,1,0,1,0,5,0,218,8,0,10,0,12,
        0,221,9,0,1,0,1,0,1,0,3,0,226,8,0,1,0,1,0,5,0,230,8,0,10,0,12,0,
        233,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,4,5,4,251,8,4,10,4,12,4,254,9,4,1,4,3,4,257,8,4,1,5,1,5,3,
        5,261,8,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,3,7,271,8,7,1,8,1,8,1,
        8,1,8,1,8,1,8,5,8,279,8,8,10,8,12,8,282,9,8,1,8,3,8,285,8,8,1,9,
        1,9,3,9,289,8,9,1,9,1,9,3,9,293,8,9,1,10,1,10,1,10,5,10,298,8,10,
        10,10,12,10,301,9,10,1,11,1,11,1,11,5,11,306,8,11,10,11,12,11,309,
        9,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,317,8,12,10,12,12,12,320,
        9,12,1,12,3,12,323,8,12,1,13,1,13,3,13,327,8,13,1,14,1,14,3,14,331,
        8,14,1,14,1,14,1,14,1,15,1,15,3,15,338,8,15,1,15,1,15,1,16,1,16,
        1,16,1,16,5,16,346,8,16,10,16,12,16,349,9,16,1,16,1,16,1,17,1,17,
        1,17,1,18,1,18,1,18,5,18,359,8,18,10,18,12,18,362,9,18,1,19,3,19,
        365,8,19,1,19,1,19,1,20,1,20,1,20,3,20,372,8,20,1,20,1,20,3,20,376,
        8,20,1,21,1,21,1,21,1,21,1,21,3,21,383,8,21,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,5,23,393,8,23,10,23,12,23,396,9,23,1,23,3,23,
        399,8,23,1,24,1,24,1,24,1,24,3,24,405,8,24,1,24,1,24,3,24,409,8,
        24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,418,8,26,1,26,1,26,1,
        26,5,26,423,8,26,10,26,12,26,426,9,26,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,443,8,27,1,
        28,1,28,1,28,1,28,1,28,3,28,450,8,28,1,29,1,29,1,30,1,30,1,30,1,
        30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,3,33,466,8,33,1,33,1,
        33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,3,35,477,8,35,1,36,1,36,3,
        36,481,8,36,1,37,1,37,3,37,485,8,37,1,38,1,38,3,38,489,8,38,1,39,
        1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,507,8,42,1,42,1,42,1,42,1,42,3,42,513,8,42,3,42,515,
        8,42,1,43,1,43,3,43,519,8,43,1,44,1,44,3,44,523,8,44,1,44,3,44,526,
        8,44,1,44,1,44,3,44,530,8,44,3,44,532,8,44,1,44,1,44,5,44,536,8,
        44,10,44,12,44,539,9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,3,46,550,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,561,8,47,1,47,1,47,5,47,565,8,47,10,47,12,47,568,9,47,1,47,
        1,47,1,48,1,48,3,48,574,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,
        1,49,1,49,1,49,1,50,1,50,1,50,3,50,589,8,50,1,51,1,51,3,51,593,8,
        51,1,51,1,51,1,51,3,51,598,8,51,5,51,600,8,51,10,51,12,51,603,9,
        51,1,52,1,52,1,52,5,52,608,8,52,10,52,12,52,611,9,52,1,52,1,52,1,
        53,1,53,1,53,1,53,1,54,1,54,1,54,3,54,622,8,54,1,54,3,54,625,8,54,
        1,55,1,55,1,55,1,55,1,55,1,55,3,55,633,8,55,1,55,1,55,1,56,1,56,
        1,56,1,56,3,56,641,8,56,1,56,1,56,1,57,1,57,1,58,3,58,648,8,58,1,
        58,1,58,3,58,652,8,58,1,58,1,58,3,58,656,8,58,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,664,8,59,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,
        3,61,674,8,61,1,61,1,61,1,61,1,61,1,61,3,61,681,8,61,1,62,1,62,1,
        62,3,62,686,8,62,1,62,1,62,1,63,1,63,3,63,692,8,63,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,702,8,64,1,65,1,65,1,65,1,65,1,65,
        1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,3,69,720,
        8,69,1,69,1,69,5,69,724,8,69,10,69,12,69,727,9,69,1,69,1,69,1,70,
        1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,
        1,72,1,72,3,72,747,8,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,757,8,73,1,74,1,74,1,74,1,75,1,75,3,75,764,8,75,1,76,1,76,3,
        76,768,8,76,1,77,1,77,1,77,1,77,5,77,774,8,77,10,77,12,77,777,9,
        77,1,77,3,77,780,8,77,3,77,782,8,77,1,77,1,77,1,78,3,78,787,8,78,
        1,78,3,78,790,8,78,1,78,1,78,1,79,1,79,1,79,1,79,3,79,798,8,79,1,
        79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
        79,1,79,5,79,815,8,79,10,79,12,79,818,9,79,1,80,1,80,1,80,1,80,1,
        80,1,80,3,80,826,8,80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,834,8,80,
        10,80,12,80,837,9,80,1,81,1,81,1,81,1,81,3,81,843,8,81,1,81,1,81,
        1,82,1,82,1,82,3,82,850,8,82,1,82,1,82,1,82,1,82,3,82,856,8,82,1,
        83,1,83,1,83,3,83,861,8,83,1,84,1,84,1,84,1,84,3,84,867,8,84,1,85,
        1,85,1,86,1,86,3,86,873,8,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,892,8,89,
        3,89,894,8,89,1,90,1,90,1,90,3,90,899,8,90,3,90,901,8,90,1,90,1,
        90,1,91,1,91,1,91,5,91,908,8,91,10,91,12,91,911,9,91,1,92,1,92,1,
        92,3,92,916,8,92,1,92,1,92,1,93,1,93,3,93,922,8,93,1,94,1,94,3,94,
        926,8,94,1,95,1,95,1,95,1,95,1,95,5,95,933,8,95,10,95,12,95,936,
        9,95,1,95,1,95,1,96,1,96,1,96,1,96,3,96,944,8,96,1,96,3,96,947,8,
        96,1,97,1,97,1,98,3,98,952,8,98,1,98,1,98,3,98,956,8,98,1,99,1,99,
        1,99,1,99,1,100,1,100,1,100,1,100,1,101,1,101,3,101,968,8,101,1,
        101,1,101,3,101,972,8,101,1,101,3,101,975,8,101,1,101,1,101,1,101,
        1,101,1,101,3,101,982,8,101,1,101,1,101,1,102,1,102,1,102,1,102,
        1,102,1,103,1,103,1,103,1,103,1,103,3,103,996,8,103,3,103,998,8,
        103,1,103,3,103,1001,8,103,1,103,3,103,1004,8,103,3,103,1006,8,103,
        1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,3,105,1017,
        8,105,1,105,0,1,158,106,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,0,9,1,0,39,40,2,0,51,56,59,63,2,0,36,36,88,88,1,0,58,64,2,0,
        52,56,62,63,2,0,51,51,59,61,1,0,45,50,2,0,65,68,72,73,1,0,79,80,
        1076,0,212,1,0,0,0,2,236,1,0,0,0,4,240,1,0,0,0,6,242,1,0,0,0,8,244,
        1,0,0,0,10,260,1,0,0,0,12,265,1,0,0,0,14,270,1,0,0,0,16,272,1,0,
        0,0,18,286,1,0,0,0,20,294,1,0,0,0,22,302,1,0,0,0,24,310,1,0,0,0,
        26,326,1,0,0,0,28,328,1,0,0,0,30,335,1,0,0,0,32,341,1,0,0,0,34,352,
        1,0,0,0,36,355,1,0,0,0,38,364,1,0,0,0,40,368,1,0,0,0,42,377,1,0,
        0,0,44,384,1,0,0,0,46,386,1,0,0,0,48,400,1,0,0,0,50,410,1,0,0,0,
        52,424,1,0,0,0,54,442,1,0,0,0,56,449,1,0,0,0,58,451,1,0,0,0,60,453,
        1,0,0,0,62,457,1,0,0,0,64,460,1,0,0,0,66,465,1,0,0,0,68,469,1,0,
        0,0,70,473,1,0,0,0,72,478,1,0,0,0,74,482,1,0,0,0,76,486,1,0,0,0,
        78,490,1,0,0,0,80,493,1,0,0,0,82,495,1,0,0,0,84,498,1,0,0,0,86,518,
        1,0,0,0,88,520,1,0,0,0,90,542,1,0,0,0,92,549,1,0,0,0,94,551,1,0,
        0,0,96,573,1,0,0,0,98,581,1,0,0,0,100,588,1,0,0,0,102,592,1,0,0,
        0,104,604,1,0,0,0,106,614,1,0,0,0,108,624,1,0,0,0,110,632,1,0,0,
        0,112,636,1,0,0,0,114,644,1,0,0,0,116,647,1,0,0,0,118,663,1,0,0,
        0,120,668,1,0,0,0,122,680,1,0,0,0,124,682,1,0,0,0,126,691,1,0,0,
        0,128,701,1,0,0,0,130,703,1,0,0,0,132,708,1,0,0,0,134,710,1,0,0,
        0,136,712,1,0,0,0,138,715,1,0,0,0,140,730,1,0,0,0,142,734,1,0,0,
        0,144,746,1,0,0,0,146,756,1,0,0,0,148,758,1,0,0,0,150,761,1,0,0,
        0,152,767,1,0,0,0,154,769,1,0,0,0,156,786,1,0,0,0,158,797,1,0,0,
        0,160,825,1,0,0,0,162,838,1,0,0,0,164,855,1,0,0,0,166,860,1,0,0,
        0,168,866,1,0,0,0,170,868,1,0,0,0,172,872,1,0,0,0,174,874,1,0,0,
        0,176,878,1,0,0,0,178,893,1,0,0,0,180,895,1,0,0,0,182,904,1,0,0,
        0,184,915,1,0,0,0,186,921,1,0,0,0,188,925,1,0,0,0,190,927,1,0,0,
        0,192,943,1,0,0,0,194,948,1,0,0,0,196,951,1,0,0,0,198,957,1,0,0,
        0,200,961,1,0,0,0,202,965,1,0,0,0,204,985,1,0,0,0,206,990,1,0,0,
        0,208,1009,1,0,0,0,210,1016,1,0,0,0,212,213,3,2,1,0,213,219,3,210,
        105,0,214,215,3,8,4,0,215,216,3,210,105,0,216,218,1,0,0,0,217,214,
        1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,231,
        1,0,0,0,221,219,1,0,0,0,222,226,3,40,20,0,223,226,3,42,21,0,224,
        226,3,14,7,0,225,222,1,0,0,0,225,223,1,0,0,0,225,224,1,0,0,0,226,
        227,1,0,0,0,227,228,3,210,105,0,228,230,1,0,0,0,229,225,1,0,0,0,
        230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,
        233,231,1,0,0,0,234,235,5,0,0,1,235,1,1,0,0,0,236,237,5,19,0,0,237,
        238,3,4,2,0,238,239,6,1,-1,0,239,3,1,0,0,0,240,241,3,6,3,0,241,5,
        1,0,0,0,242,243,5,27,0,0,243,7,1,0,0,0,244,256,5,15,0,0,245,257,
        3,10,5,0,246,252,5,28,0,0,247,248,3,10,5,0,248,249,3,210,105,0,249,
        251,1,0,0,0,250,247,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,
        253,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,257,5,29,0,0,256,
        245,1,0,0,0,256,246,1,0,0,0,257,9,1,0,0,0,258,261,5,38,0,0,259,261,
        3,4,2,0,260,258,1,0,0,0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,
        1,0,0,0,262,263,3,12,6,0,263,264,6,5,-1,0,264,11,1,0,0,0,265,266,
        3,194,97,0,266,13,1,0,0,0,267,271,3,16,8,0,268,271,3,24,12,0,269,
        271,3,46,23,0,270,267,1,0,0,0,270,268,1,0,0,0,270,269,1,0,0,0,271,
        15,1,0,0,0,272,284,5,4,0,0,273,285,3,18,9,0,274,280,5,28,0,0,275,
        276,3,18,9,0,276,277,3,210,105,0,277,279,1,0,0,0,278,275,1,0,0,0,
        279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,
        282,280,1,0,0,0,283,285,5,29,0,0,284,273,1,0,0,0,284,274,1,0,0,0,
        285,17,1,0,0,0,286,292,3,20,10,0,287,289,3,122,61,0,288,287,1,0,
        0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,5,34,0,0,291,293,3,22,
        11,0,292,288,1,0,0,0,292,293,1,0,0,0,293,19,1,0,0,0,294,299,5,27,
        0,0,295,296,5,35,0,0,296,298,5,27,0,0,297,295,1,0,0,0,298,301,1,
        0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,21,1,0,0,0,301,299,1,0,
        0,0,302,307,3,158,79,0,303,304,5,35,0,0,304,306,3,158,79,0,305,303,
        1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,23,1,
        0,0,0,309,307,1,0,0,0,310,322,5,25,0,0,311,323,3,26,13,0,312,318,
        5,28,0,0,313,314,3,26,13,0,314,315,3,210,105,0,315,317,1,0,0,0,316,
        313,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,
        321,1,0,0,0,320,318,1,0,0,0,321,323,5,29,0,0,322,311,1,0,0,0,322,
        312,1,0,0,0,323,25,1,0,0,0,324,327,3,28,14,0,325,327,3,30,15,0,326,
        324,1,0,0,0,326,325,1,0,0,0,327,27,1,0,0,0,328,330,5,27,0,0,329,
        331,3,32,16,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,
        333,5,34,0,0,333,334,3,122,61,0,334,29,1,0,0,0,335,337,5,27,0,0,
        336,338,3,32,16,0,337,336,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,
        0,339,340,3,122,61,0,340,31,1,0,0,0,341,342,5,32,0,0,342,347,3,34,
        17,0,343,344,5,35,0,0,344,346,3,34,17,0,345,343,1,0,0,0,346,349,
        1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,347,
        1,0,0,0,350,351,5,33,0,0,351,33,1,0,0,0,352,353,3,20,10,0,353,354,
        3,36,18,0,354,35,1,0,0,0,355,360,3,38,19,0,356,357,5,51,0,0,357,
        359,3,38,19,0,358,356,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,
        361,1,0,0,0,361,37,1,0,0,0,362,360,1,0,0,0,363,365,5,57,0,0,364,
        363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,3,122,61,0,367,
        39,1,0,0,0,368,369,5,11,0,0,369,371,5,27,0,0,370,372,3,32,16,0,371,
        370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,375,3,150,75,0,374,
        376,3,50,25,0,375,374,1,0,0,0,375,376,1,0,0,0,376,41,1,0,0,0,377,
        378,5,11,0,0,378,379,3,44,22,0,379,380,5,27,0,0,380,382,3,150,75,
        0,381,383,3,50,25,0,382,381,1,0,0,0,382,383,1,0,0,0,383,43,1,0,0,
        0,384,385,3,154,77,0,385,45,1,0,0,0,386,398,5,26,0,0,387,399,3,48,
        24,0,388,394,5,28,0,0,389,390,3,48,24,0,390,391,3,210,105,0,391,
        393,1,0,0,0,392,389,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,
        395,1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,399,5,29,0,0,398,
        387,1,0,0,0,398,388,1,0,0,0,399,47,1,0,0,0,400,408,3,20,10,0,401,
        404,3,122,61,0,402,403,5,34,0,0,403,405,3,22,11,0,404,402,1,0,0,
        0,404,405,1,0,0,0,405,409,1,0,0,0,406,407,5,34,0,0,407,409,3,22,
        11,0,408,401,1,0,0,0,408,406,1,0,0,0,409,49,1,0,0,0,410,411,5,30,
        0,0,411,412,3,52,26,0,412,413,5,31,0,0,413,51,1,0,0,0,414,418,5,
        36,0,0,415,418,5,88,0,0,416,418,1,0,0,0,417,414,1,0,0,0,417,415,
        1,0,0,0,417,416,1,0,0,0,418,419,1,0,0,0,419,420,3,54,27,0,420,421,
        3,210,105,0,421,423,1,0,0,0,422,417,1,0,0,0,423,426,1,0,0,0,424,
        422,1,0,0,0,424,425,1,0,0,0,425,53,1,0,0,0,426,424,1,0,0,0,427,443,
        3,14,7,0,428,443,3,70,35,0,429,443,3,56,28,0,430,443,3,120,60,0,
        431,443,3,72,36,0,432,443,3,74,37,0,433,443,3,76,38,0,434,443,3,
        78,39,0,435,443,3,80,40,0,436,443,3,50,25,0,437,443,3,84,42,0,438,
        443,3,86,43,0,439,443,3,104,52,0,440,443,3,112,56,0,441,443,3,82,
        41,0,442,427,1,0,0,0,442,428,1,0,0,0,442,429,1,0,0,0,442,430,1,0,
        0,0,442,431,1,0,0,0,442,432,1,0,0,0,442,433,1,0,0,0,442,434,1,0,
        0,0,442,435,1,0,0,0,442,436,1,0,0,0,442,437,1,0,0,0,442,438,1,0,
        0,0,442,439,1,0,0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,55,1,0,0,
        0,444,450,3,60,30,0,445,450,3,62,31,0,446,450,3,64,32,0,447,450,
        3,58,29,0,448,450,3,68,34,0,449,444,1,0,0,0,449,445,1,0,0,0,449,
        446,1,0,0,0,449,447,1,0,0,0,449,448,1,0,0,0,450,57,1,0,0,0,451,452,
        3,158,79,0,452,59,1,0,0,0,453,454,3,158,79,0,454,455,5,64,0,0,455,
        456,3,158,79,0,456,61,1,0,0,0,457,458,3,158,79,0,458,459,7,0,0,0,
        459,63,1,0,0,0,460,461,3,22,11,0,461,462,3,66,33,0,462,463,3,22,
        11,0,463,65,1,0,0,0,464,466,7,1,0,0,465,464,1,0,0,0,465,466,1,0,
        0,0,466,467,1,0,0,0,467,468,5,34,0,0,468,67,1,0,0,0,469,470,3,20,
        10,0,470,471,5,41,0,0,471,472,3,22,11,0,472,69,1,0,0,0,473,474,5,
        27,0,0,474,476,5,37,0,0,475,477,3,54,27,0,476,475,1,0,0,0,476,477,
        1,0,0,0,477,71,1,0,0,0,478,480,5,21,0,0,479,481,3,22,11,0,480,479,
        1,0,0,0,480,481,1,0,0,0,481,73,1,0,0,0,482,484,5,1,0,0,483,485,5,
        27,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,75,1,0,0,0,486,488,5,
        5,0,0,487,489,5,27,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,77,1,
        0,0,0,490,491,5,13,0,0,491,492,5,27,0,0,492,79,1,0,0,0,493,494,5,
        9,0,0,494,81,1,0,0,0,495,496,5,7,0,0,496,497,3,158,79,0,497,83,1,
        0,0,0,498,506,5,14,0,0,499,507,3,158,79,0,500,501,7,2,0,0,501,507,
        3,158,79,0,502,503,3,56,28,0,503,504,7,2,0,0,504,505,3,158,79,0,
        505,507,1,0,0,0,506,499,1,0,0,0,506,500,1,0,0,0,506,502,1,0,0,0,
        507,508,1,0,0,0,508,514,3,50,25,0,509,512,5,8,0,0,510,513,3,84,42,
        0,511,513,3,50,25,0,512,510,1,0,0,0,512,511,1,0,0,0,513,515,1,0,
        0,0,514,509,1,0,0,0,514,515,1,0,0,0,515,85,1,0,0,0,516,519,3,88,
        44,0,517,519,3,94,47,0,518,516,1,0,0,0,518,517,1,0,0,0,519,87,1,
        0,0,0,520,531,5,24,0,0,521,523,3,158,79,0,522,521,1,0,0,0,522,523,
        1,0,0,0,523,532,1,0,0,0,524,526,3,56,28,0,525,524,1,0,0,0,525,526,
        1,0,0,0,526,527,1,0,0,0,527,529,3,210,105,0,528,530,3,158,79,0,529,
        528,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,0,531,522,1,0,0,0,531,
        525,1,0,0,0,532,533,1,0,0,0,533,537,5,30,0,0,534,536,3,90,45,0,535,
        534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,
        540,1,0,0,0,539,537,1,0,0,0,540,541,5,31,0,0,541,89,1,0,0,0,542,
        543,3,92,46,0,543,544,5,37,0,0,544,545,3,52,26,0,545,91,1,0,0,0,
        546,547,5,2,0,0,547,550,3,22,11,0,548,550,5,6,0,0,549,546,1,0,0,
        0,549,548,1,0,0,0,550,93,1,0,0,0,551,560,5,24,0,0,552,561,3,96,48,
        0,553,554,3,210,105,0,554,555,3,96,48,0,555,561,1,0,0,0,556,557,
        3,56,28,0,557,558,3,210,105,0,558,559,3,96,48,0,559,561,1,0,0,0,
        560,552,1,0,0,0,560,553,1,0,0,0,560,556,1,0,0,0,561,562,1,0,0,0,
        562,566,5,30,0,0,563,565,3,98,49,0,564,563,1,0,0,0,565,568,1,0,0,
        0,566,564,1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,566,1,0,0,
        0,569,570,5,31,0,0,570,95,1,0,0,0,571,572,5,27,0,0,572,574,5,41,
        0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,3,160,
        80,0,576,577,5,38,0,0,577,578,5,28,0,0,578,579,5,25,0,0,579,580,
        5,29,0,0,580,97,1,0,0,0,581,582,3,100,50,0,582,583,5,37,0,0,583,
        584,3,52,26,0,584,99,1,0,0,0,585,586,5,2,0,0,586,589,3,102,51,0,
        587,589,5,6,0,0,588,585,1,0,0,0,588,587,1,0,0,0,589,101,1,0,0,0,
        590,593,3,122,61,0,591,593,5,18,0,0,592,590,1,0,0,0,592,591,1,0,
        0,0,593,601,1,0,0,0,594,597,5,35,0,0,595,598,3,122,61,0,596,598,
        5,18,0,0,597,595,1,0,0,0,597,596,1,0,0,0,598,600,1,0,0,0,599,594,
        1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,103,
        1,0,0,0,603,601,1,0,0,0,604,605,5,22,0,0,605,609,5,30,0,0,606,608,
        3,106,53,0,607,606,1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,
        1,0,0,0,610,612,1,0,0,0,611,609,1,0,0,0,612,613,5,31,0,0,613,105,
        1,0,0,0,614,615,3,108,54,0,615,616,5,37,0,0,616,617,3,52,26,0,617,
        107,1,0,0,0,618,621,5,2,0,0,619,622,3,60,30,0,620,622,3,110,55,0,
        621,619,1,0,0,0,621,620,1,0,0,0,622,625,1,0,0,0,623,625,5,6,0,0,
        624,618,1,0,0,0,624,623,1,0,0,0,625,109,1,0,0,0,626,627,3,22,11,
        0,627,628,5,34,0,0,628,633,1,0,0,0,629,630,3,20,10,0,630,631,5,41,
        0,0,631,633,1,0,0,0,632,626,1,0,0,0,632,629,1,0,0,0,632,633,1,0,
        0,0,633,634,1,0,0,0,634,635,3,158,79,0,635,111,1,0,0,0,636,640,5,
        10,0,0,637,641,3,114,57,0,638,641,3,116,58,0,639,641,3,118,59,0,
        640,637,1,0,0,0,640,638,1,0,0,0,640,639,1,0,0,0,640,641,1,0,0,0,
        641,642,1,0,0,0,642,643,3,50,25,0,643,113,1,0,0,0,644,645,3,158,
        79,0,645,115,1,0,0,0,646,648,3,56,28,0,647,646,1,0,0,0,647,648,1,
        0,0,0,648,649,1,0,0,0,649,651,3,210,105,0,650,652,3,158,79,0,651,
        650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,655,3,210,105,0,
        654,656,3,56,28,0,655,654,1,0,0,0,655,656,1,0,0,0,656,117,1,0,0,
        0,657,658,3,22,11,0,658,659,5,34,0,0,659,664,1,0,0,0,660,661,3,20,
        10,0,661,662,5,41,0,0,662,664,1,0,0,0,663,657,1,0,0,0,663,660,1,
        0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,5,20,0,0,666,667,3,
        158,79,0,667,119,1,0,0,0,668,669,5,12,0,0,669,670,3,158,79,0,670,
        121,1,0,0,0,671,673,3,126,63,0,672,674,3,124,62,0,673,672,1,0,0,
        0,673,674,1,0,0,0,674,681,1,0,0,0,675,681,3,128,64,0,676,677,5,28,
        0,0,677,678,3,122,61,0,678,679,5,29,0,0,679,681,1,0,0,0,680,671,
        1,0,0,0,680,675,1,0,0,0,680,676,1,0,0,0,681,123,1,0,0,0,682,683,
        5,32,0,0,683,685,3,102,51,0,684,686,5,35,0,0,685,684,1,0,0,0,685,
        686,1,0,0,0,686,687,1,0,0,0,687,688,5,33,0,0,688,125,1,0,0,0,689,
        692,3,174,87,0,690,692,5,27,0,0,691,689,1,0,0,0,691,690,1,0,0,0,
        692,127,1,0,0,0,693,702,3,130,65,0,694,702,3,190,95,0,695,702,3,
        136,68,0,696,702,3,148,74,0,697,702,3,138,69,0,698,702,3,140,70,
        0,699,702,3,142,71,0,700,702,3,144,72,0,701,693,1,0,0,0,701,694,
        1,0,0,0,701,695,1,0,0,0,701,696,1,0,0,0,701,697,1,0,0,0,701,698,
        1,0,0,0,701,699,1,0,0,0,701,700,1,0,0,0,702,129,1,0,0,0,703,704,
        5,32,0,0,704,705,3,132,66,0,705,706,5,33,0,0,706,707,3,134,67,0,
        707,131,1,0,0,0,708,709,3,158,79,0,709,133,1,0,0,0,710,711,3,122,
        61,0,711,135,1,0,0,0,712,713,5,62,0,0,713,714,3,122,61,0,714,137,
        1,0,0,0,715,716,5,16,0,0,716,725,5,30,0,0,717,720,3,146,73,0,718,
        720,3,36,18,0,719,717,1,0,0,0,719,718,1,0,0,0,720,721,1,0,0,0,721,
        722,3,210,105,0,722,724,1,0,0,0,723,719,1,0,0,0,724,727,1,0,0,0,
        725,723,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,725,1,0,0,0,
        728,729,5,31,0,0,729,139,1,0,0,0,730,731,5,32,0,0,731,732,5,33,0,
        0,732,733,3,134,67,0,733,141,1,0,0,0,734,735,5,17,0,0,735,736,5,
        32,0,0,736,737,3,122,61,0,737,738,5,33,0,0,738,739,3,134,67,0,739,
        143,1,0,0,0,740,741,4,72,0,0,741,747,5,3,0,0,742,743,5,3,0,0,743,
        747,5,64,0,0,744,745,5,64,0,0,745,747,5,3,0,0,746,740,1,0,0,0,746,
        742,1,0,0,0,746,744,1,0,0,0,747,748,1,0,0,0,748,749,3,134,67,0,749,
        145,1,0,0,0,750,751,5,27,0,0,751,752,3,154,77,0,752,753,3,152,76,
        0,753,757,1,0,0,0,754,755,5,27,0,0,755,757,3,154,77,0,756,750,1,
        0,0,0,756,754,1,0,0,0,757,147,1,0,0,0,758,759,5,11,0,0,759,760,3,
        150,75,0,760,149,1,0,0,0,761,763,3,154,77,0,762,764,3,152,76,0,763,
        762,1,0,0,0,763,764,1,0,0,0,764,151,1,0,0,0,765,768,3,154,77,0,766,
        768,3,122,61,0,767,765,1,0,0,0,767,766,1,0,0,0,768,153,1,0,0,0,769,
        781,5,28,0,0,770,775,3,156,78,0,771,772,5,35,0,0,772,774,3,156,78,
        0,773,771,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,
        0,776,779,1,0,0,0,777,775,1,0,0,0,778,780,5,35,0,0,779,778,1,0,0,
        0,779,780,1,0,0,0,780,782,1,0,0,0,781,770,1,0,0,0,781,782,1,0,0,
        0,782,783,1,0,0,0,783,784,5,29,0,0,784,155,1,0,0,0,785,787,3,20,
        10,0,786,785,1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,0,788,790,5,42,
        0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,792,3,122,
        61,0,792,157,1,0,0,0,793,794,6,79,-1,0,794,798,3,160,80,0,795,796,
        7,3,0,0,796,798,3,158,79,6,797,793,1,0,0,0,797,795,1,0,0,0,798,816,
        1,0,0,0,799,800,10,5,0,0,800,801,7,4,0,0,801,815,3,158,79,6,802,
        803,10,4,0,0,803,804,7,5,0,0,804,815,3,158,79,5,805,806,10,3,0,0,
        806,807,7,6,0,0,807,815,3,158,79,4,808,809,10,2,0,0,809,810,5,44,
        0,0,810,815,3,158,79,3,811,812,10,1,0,0,812,813,5,43,0,0,813,815,
        3,158,79,2,814,799,1,0,0,0,814,802,1,0,0,0,814,805,1,0,0,0,814,808,
        1,0,0,0,814,811,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,817,
        1,0,0,0,817,159,1,0,0,0,818,816,1,0,0,0,819,820,4,80,6,0,820,826,
        3,164,82,0,821,822,4,80,7,0,822,826,3,162,81,0,823,824,4,80,8,0,
        824,826,3,208,104,0,825,819,1,0,0,0,825,821,1,0,0,0,825,823,1,0,
        0,0,826,835,1,0,0,0,827,828,5,38,0,0,828,834,5,27,0,0,829,834,3,
        200,100,0,830,834,3,202,101,0,831,834,3,204,102,0,832,834,3,206,
        103,0,833,827,1,0,0,0,833,829,1,0,0,0,833,830,1,0,0,0,833,831,1,
        0,0,0,833,832,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,
        0,0,0,836,161,1,0,0,0,837,835,1,0,0,0,838,839,3,122,61,0,839,840,
        5,28,0,0,840,842,3,158,79,0,841,843,5,35,0,0,842,841,1,0,0,0,842,
        843,1,0,0,0,843,844,1,0,0,0,844,845,5,29,0,0,845,163,1,0,0,0,846,
        856,3,166,83,0,847,849,3,172,86,0,848,850,3,124,62,0,849,848,1,0,
        0,0,849,850,1,0,0,0,850,856,1,0,0,0,851,852,5,28,0,0,852,853,3,158,
        79,0,853,854,5,29,0,0,854,856,1,0,0,0,855,846,1,0,0,0,855,847,1,
        0,0,0,855,851,1,0,0,0,856,165,1,0,0,0,857,861,3,168,84,0,858,861,
        3,176,88,0,859,861,3,198,99,0,860,857,1,0,0,0,860,858,1,0,0,0,860,
        859,1,0,0,0,861,167,1,0,0,0,862,867,5,18,0,0,863,867,3,170,85,0,
        864,867,3,194,97,0,865,867,5,69,0,0,866,862,1,0,0,0,866,863,1,0,
        0,0,866,864,1,0,0,0,866,865,1,0,0,0,867,169,1,0,0,0,868,869,7,7,
        0,0,869,171,1,0,0,0,870,873,5,27,0,0,871,873,3,174,87,0,872,870,
        1,0,0,0,872,871,1,0,0,0,873,173,1,0,0,0,874,875,5,27,0,0,875,876,
        5,38,0,0,876,877,5,27,0,0,877,175,1,0,0,0,878,879,3,178,89,0,879,
        880,3,180,90,0,880,177,1,0,0,0,881,894,3,190,95,0,882,894,3,130,
        65,0,883,884,5,32,0,0,884,885,5,42,0,0,885,886,5,33,0,0,886,894,
        3,134,67,0,887,894,3,140,70,0,888,894,3,142,71,0,889,891,3,126,63,
        0,890,892,3,124,62,0,891,890,1,0,0,0,891,892,1,0,0,0,892,894,1,0,
        0,0,893,881,1,0,0,0,893,882,1,0,0,0,893,883,1,0,0,0,893,887,1,0,
        0,0,893,888,1,0,0,0,893,889,1,0,0,0,894,179,1,0,0,0,895,900,5,30,
        0,0,896,898,3,182,91,0,897,899,5,35,0,0,898,897,1,0,0,0,898,899,
        1,0,0,0,899,901,1,0,0,0,900,896,1,0,0,0,900,901,1,0,0,0,901,902,
        1,0,0,0,902,903,5,31,0,0,903,181,1,0,0,0,904,909,3,184,92,0,905,
        906,5,35,0,0,906,908,3,184,92,0,907,905,1,0,0,0,908,911,1,0,0,0,
        909,907,1,0,0,0,909,910,1,0,0,0,910,183,1,0,0,0,911,909,1,0,0,0,
        912,913,3,186,93,0,913,914,5,37,0,0,914,916,1,0,0,0,915,912,1,0,
        0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,3,188,94,0,918,185,1,
        0,0,0,919,922,3,158,79,0,920,922,3,180,90,0,921,919,1,0,0,0,921,
        920,1,0,0,0,922,187,1,0,0,0,923,926,3,158,79,0,924,926,3,180,90,
        0,925,923,1,0,0,0,925,924,1,0,0,0,926,189,1,0,0,0,927,928,5,23,0,
        0,928,934,5,30,0,0,929,930,3,192,96,0,930,931,3,210,105,0,931,933,
        1,0,0,0,932,929,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,935,
        1,0,0,0,935,937,1,0,0,0,936,934,1,0,0,0,937,938,5,31,0,0,938,191,
        1,0,0,0,939,940,3,20,10,0,940,941,3,122,61,0,941,944,1,0,0,0,942,
        944,3,196,98,0,943,939,1,0,0,0,943,942,1,0,0,0,944,946,1,0,0,0,945,
        947,3,194,97,0,946,945,1,0,0,0,946,947,1,0,0,0,947,193,1,0,0,0,948,
        949,7,8,0,0,949,195,1,0,0,0,950,952,5,62,0,0,951,950,1,0,0,0,951,
        952,1,0,0,0,952,953,1,0,0,0,953,955,3,126,63,0,954,956,3,124,62,
        0,955,954,1,0,0,0,955,956,1,0,0,0,956,197,1,0,0,0,957,958,5,11,0,
        0,958,959,3,150,75,0,959,960,3,50,25,0,960,199,1,0,0,0,961,962,5,
        32,0,0,962,963,3,158,79,0,963,964,5,33,0,0,964,201,1,0,0,0,965,981,
        5,32,0,0,966,968,3,158,79,0,967,966,1,0,0,0,967,968,1,0,0,0,968,
        969,1,0,0,0,969,971,5,37,0,0,970,972,3,158,79,0,971,970,1,0,0,0,
        971,972,1,0,0,0,972,982,1,0,0,0,973,975,3,158,79,0,974,973,1,0,0,
        0,974,975,1,0,0,0,975,976,1,0,0,0,976,977,5,37,0,0,977,978,3,158,
        79,0,978,979,5,37,0,0,979,980,3,158,79,0,980,982,1,0,0,0,981,967,
        1,0,0,0,981,974,1,0,0,0,982,983,1,0,0,0,983,984,5,33,0,0,984,203,
        1,0,0,0,985,986,5,38,0,0,986,987,5,28,0,0,987,988,3,122,61,0,988,
        989,5,29,0,0,989,205,1,0,0,0,990,1005,5,28,0,0,991,998,3,22,11,0,
        992,995,3,122,61,0,993,994,5,35,0,0,994,996,3,22,11,0,995,993,1,
        0,0,0,995,996,1,0,0,0,996,998,1,0,0,0,997,991,1,0,0,0,997,992,1,
        0,0,0,998,1000,1,0,0,0,999,1001,5,42,0,0,1000,999,1,0,0,0,1000,1001,
        1,0,0,0,1001,1003,1,0,0,0,1002,1004,5,35,0,0,1003,1002,1,0,0,0,1003,
        1004,1,0,0,0,1004,1006,1,0,0,0,1005,997,1,0,0,0,1005,1006,1,0,0,
        0,1006,1007,1,0,0,0,1007,1008,5,29,0,0,1008,207,1,0,0,0,1009,1010,
        3,122,61,0,1010,1011,5,38,0,0,1011,1012,5,27,0,0,1012,209,1,0,0,
        0,1013,1017,5,36,0,0,1014,1017,5,88,0,0,1015,1017,4,105,9,0,1016,
        1013,1,0,0,0,1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,211,1,0,0,
        0,114,219,225,231,252,256,260,270,280,284,288,292,299,307,318,322,
        326,330,337,347,360,364,371,375,382,394,398,404,408,417,424,442,
        449,465,476,480,484,488,506,512,514,518,522,525,529,531,537,549,
        560,566,573,588,592,597,601,609,621,624,632,640,647,651,655,663,
        673,680,685,691,701,719,725,746,756,763,767,775,779,781,786,789,
        797,814,816,825,833,835,842,849,855,860,866,872,891,893,898,900,
        909,915,921,925,934,943,946,951,955,967,971,974,981,995,997,1000,
        1003,1005,1016
    ]

class GoParser ( GoParserBase ):

    grammarFileName = "GoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'break'", "'case'", "'chan'", "'const'", 
                     "'continue'", "'default'", "'defer'", "'else'", "'fallthrough'", 
                     "'for'", "'func'", "'go'", "'goto'", "'if'", "'import'", 
                     "'interface'", "'map'", "'nil'", "'package'", "'range'", 
                     "'return'", "'select'", "'struct'", "'switch'", "'type'", 
                     "'var'", "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", 
                     "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", 
                     "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", "'<'", 
                     "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&^'", "'~'", "'!'", "'+'", "'-'", "'^'", 
                     "'*'", "'&'", "'<-'" ]

    symbolicNames = [ "<INVALID>", "BREAK", "CASE", "CHAN", "CONST", "CONTINUE", 
                      "DEFAULT", "DEFER", "ELSE", "FALLTHROUGH", "FOR", 
                      "FUNC", "GO", "GOTO", "IF", "IMPORT", "INTERFACE", 
                      "MAP", "NIL_LIT", "PACKAGE", "RANGE", "RETURN", "SELECT", 
                      "STRUCT", "SWITCH", "TYPE", "VAR", "IDENTIFIER", "L_PAREN", 
                      "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", 
                      "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", 
                      "MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", 
                      "LOGICAL_AND", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", 
                      "GREATER", "GREATER_OR_EQUALS", "OR", "DIV", "MOD", 
                      "LSHIFT", "RSHIFT", "BIT_CLEAR", "UNDERLYING", "EXCLAMATION", 
                      "PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", 
                      "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", 
                      "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", 
                      "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", 
                      "HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", 
                      "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", "WS", 
                      "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", 
                      "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "OTHER" ]

    RULE_sourceFile = 0
    RULE_packageClause = 1
    RULE_packageName = 2
    RULE_identifier = 3
    RULE_importDecl = 4
    RULE_importSpec = 5
    RULE_importPath = 6
    RULE_declaration = 7
    RULE_constDecl = 8
    RULE_constSpec = 9
    RULE_identifierList = 10
    RULE_expressionList = 11
    RULE_typeDecl = 12
    RULE_typeSpec = 13
    RULE_aliasDecl = 14
    RULE_typeDef = 15
    RULE_typeParameters = 16
    RULE_typeParameterDecl = 17
    RULE_typeElement = 18
    RULE_typeTerm = 19
    RULE_functionDecl = 20
    RULE_methodDecl = 21
    RULE_receiver = 22
    RULE_varDecl = 23
    RULE_varSpec = 24
    RULE_block = 25
    RULE_statementList = 26
    RULE_statement = 27
    RULE_simpleStmt = 28
    RULE_expressionStmt = 29
    RULE_sendStmt = 30
    RULE_incDecStmt = 31
    RULE_assignment = 32
    RULE_assign_op = 33
    RULE_shortVarDecl = 34
    RULE_labeledStmt = 35
    RULE_returnStmt = 36
    RULE_breakStmt = 37
    RULE_continueStmt = 38
    RULE_gotoStmt = 39
    RULE_fallthroughStmt = 40
    RULE_deferStmt = 41
    RULE_ifStmt = 42
    RULE_switchStmt = 43
    RULE_exprSwitchStmt = 44
    RULE_exprCaseClause = 45
    RULE_exprSwitchCase = 46
    RULE_typeSwitchStmt = 47
    RULE_typeSwitchGuard = 48
    RULE_typeCaseClause = 49
    RULE_typeSwitchCase = 50
    RULE_typeList = 51
    RULE_selectStmt = 52
    RULE_commClause = 53
    RULE_commCase = 54
    RULE_recvStmt = 55
    RULE_forStmt = 56
    RULE_condition = 57
    RULE_forClause = 58
    RULE_rangeClause = 59
    RULE_goStmt = 60
    RULE_type_ = 61
    RULE_typeArgs = 62
    RULE_typeName = 63
    RULE_typeLit = 64
    RULE_arrayType = 65
    RULE_arrayLength = 66
    RULE_elementType = 67
    RULE_pointerType = 68
    RULE_interfaceType = 69
    RULE_sliceType = 70
    RULE_mapType = 71
    RULE_channelType = 72
    RULE_methodSpec = 73
    RULE_functionType = 74
    RULE_signature = 75
    RULE_result = 76
    RULE_parameters = 77
    RULE_parameterDecl = 78
    RULE_expression = 79
    RULE_primaryExpr = 80
    RULE_conversion = 81
    RULE_operand = 82
    RULE_literal = 83
    RULE_basicLit = 84
    RULE_integer = 85
    RULE_operandName = 86
    RULE_qualifiedIdent = 87
    RULE_compositeLit = 88
    RULE_literalType = 89
    RULE_literalValue = 90
    RULE_elementList = 91
    RULE_keyedElement = 92
    RULE_key = 93
    RULE_element = 94
    RULE_structType = 95
    RULE_fieldDecl = 96
    RULE_string_ = 97
    RULE_embeddedField = 98
    RULE_functionLit = 99
    RULE_index = 100
    RULE_slice_ = 101
    RULE_typeAssertion = 102
    RULE_arguments = 103
    RULE_methodExpr = 104
    RULE_eos = 105

    ruleNames =  [ "sourceFile", "packageClause", "packageName", "identifier", 
                   "importDecl", "importSpec", "importPath", "declaration", 
                   "constDecl", "constSpec", "identifierList", "expressionList", 
                   "typeDecl", "typeSpec", "aliasDecl", "typeDef", "typeParameters", 
                   "typeParameterDecl", "typeElement", "typeTerm", "functionDecl", 
                   "methodDecl", "receiver", "varDecl", "varSpec", "block", 
                   "statementList", "statement", "simpleStmt", "expressionStmt", 
                   "sendStmt", "incDecStmt", "assignment", "assign_op", 
                   "shortVarDecl", "labeledStmt", "returnStmt", "breakStmt", 
                   "continueStmt", "gotoStmt", "fallthroughStmt", "deferStmt", 
                   "ifStmt", "switchStmt", "exprSwitchStmt", "exprCaseClause", 
                   "exprSwitchCase", "typeSwitchStmt", "typeSwitchGuard", 
                   "typeCaseClause", "typeSwitchCase", "typeList", "selectStmt", 
                   "commClause", "commCase", "recvStmt", "forStmt", "condition", 
                   "forClause", "rangeClause", "goStmt", "type_", "typeArgs", 
                   "typeName", "typeLit", "arrayType", "arrayLength", "elementType", 
                   "pointerType", "interfaceType", "sliceType", "mapType", 
                   "channelType", "methodSpec", "functionType", "signature", 
                   "result", "parameters", "parameterDecl", "expression", 
                   "primaryExpr", "conversion", "operand", "literal", "basicLit", 
                   "integer", "operandName", "qualifiedIdent", "compositeLit", 
                   "literalType", "literalValue", "elementList", "keyedElement", 
                   "key", "element", "structType", "fieldDecl", "string_", 
                   "embeddedField", "functionLit", "index", "slice_", "typeAssertion", 
                   "arguments", "methodExpr", "eos" ]

    EOF = Token.EOF
    BREAK=1
    CASE=2
    CHAN=3
    CONST=4
    CONTINUE=5
    DEFAULT=6
    DEFER=7
    ELSE=8
    FALLTHROUGH=9
    FOR=10
    FUNC=11
    GO=12
    GOTO=13
    IF=14
    IMPORT=15
    INTERFACE=16
    MAP=17
    NIL_LIT=18
    PACKAGE=19
    RANGE=20
    RETURN=21
    SELECT=22
    STRUCT=23
    SWITCH=24
    TYPE=25
    VAR=26
    IDENTIFIER=27
    L_PAREN=28
    R_PAREN=29
    L_CURLY=30
    R_CURLY=31
    L_BRACKET=32
    R_BRACKET=33
    ASSIGN=34
    COMMA=35
    SEMI=36
    COLON=37
    DOT=38
    PLUS_PLUS=39
    MINUS_MINUS=40
    DECLARE_ASSIGN=41
    ELLIPSIS=42
    LOGICAL_OR=43
    LOGICAL_AND=44
    EQUALS=45
    NOT_EQUALS=46
    LESS=47
    LESS_OR_EQUALS=48
    GREATER=49
    GREATER_OR_EQUALS=50
    OR=51
    DIV=52
    MOD=53
    LSHIFT=54
    RSHIFT=55
    BIT_CLEAR=56
    UNDERLYING=57
    EXCLAMATION=58
    PLUS=59
    MINUS=60
    CARET=61
    STAR=62
    AMPERSAND=63
    RECEIVE=64
    DECIMAL_LIT=65
    BINARY_LIT=66
    OCTAL_LIT=67
    HEX_LIT=68
    FLOAT_LIT=69
    DECIMAL_FLOAT_LIT=70
    HEX_FLOAT_LIT=71
    IMAGINARY_LIT=72
    RUNE_LIT=73
    BYTE_VALUE=74
    OCTAL_BYTE_VALUE=75
    HEX_BYTE_VALUE=76
    LITTLE_U_VALUE=77
    BIG_U_VALUE=78
    RAW_STRING_LIT=79
    INTERPRETED_STRING_LIT=80
    WS=81
    COMMENT=82
    TERMINATOR=83
    LINE_COMMENT=84
    WS_NLSEMI=85
    COMMENT_NLSEMI=86
    LINE_COMMENT_NLSEMI=87
    EOS=88
    OTHER=89

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageClause(self):
            return self.getTypedRuleContext(GoParser.PackageClauseContext,0)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def EOF(self):
            return self.getToken(GoParser.EOF, 0)

        def importDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ImportDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.ImportDeclContext,i)


        def functionDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.FunctionDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.FunctionDeclContext,i)


        def methodDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.MethodDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.MethodDeclContext,i)


        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(GoParser.DeclarationContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_sourceFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceFile" ):
                listener.enterSourceFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceFile" ):
                listener.exitSourceFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceFile" ):
                return visitor.visitSourceFile(self)
            else:
                return visitor.visitChildren(self)




    def sourceFile(self):

        localctx = GoParser.SourceFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.packageClause()
            self.state = 213
            self.eos()
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 214
                self.importDecl()
                self.state = 215
                self.eos()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 100665360) != 0):
                self.state = 225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 222
                    self.functionDecl()
                    pass

                elif la_ == 2:
                    self.state = 223
                    self.methodDecl()
                    pass

                elif la_ == 3:
                    self.state = 224
                    self.declaration()
                    pass


                self.state = 227
                self.eos()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.match(GoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(GoParser.PACKAGE, 0)

        def packageName(self):
            return self.getTypedRuleContext(GoParser.PackageNameContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_packageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageClause" ):
                listener.enterPackageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageClause" ):
                listener.exitPackageClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageClause" ):
                return visitor.visitPackageClause(self)
            else:
                return visitor.visitChildren(self)




    def packageClause(self):

        localctx = GoParser.PackageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(GoParser.PACKAGE)
            self.state = 237
            self.packageName()
            this.myreset();
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_packageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageName" ):
                listener.enterPackageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageName" ):
                listener.exitPackageName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageName" ):
                return visitor.visitPackageName(self)
            else:
                return visitor.visitChildren(self)




    def packageName(self):

        localctx = GoParser.PackageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_packageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = GoParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(GoParser.IMPORT, 0)

        def importSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ImportSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.ImportSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_importDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDecl" ):
                listener.enterImportDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDecl" ):
                listener.exitImportDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDecl" ):
                return visitor.visitImportDecl(self)
            else:
                return visitor.visitChildren(self)




    def importDecl(self):

        localctx = GoParser.ImportDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(GoParser.IMPORT)
            self.state = 256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 38, 79, 80]:
                self.state = 245
                self.importSpec()
                pass
            elif token in [28]:
                self.state = 246
                self.match(GoParser.L_PAREN)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & 13510798882113537) != 0):
                    self.state = 247
                    self.importSpec()
                    self.state = 248
                    self.eos()
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 255
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(GoParser.ImportPathContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def packageName(self):
            return self.getTypedRuleContext(GoParser.PackageNameContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_importSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportSpec" ):
                listener.enterImportSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportSpec" ):
                listener.exitImportSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportSpec" ):
                return visitor.visitImportSpec(self)
            else:
                return visitor.visitChildren(self)




    def importSpec(self):

        localctx = GoParser.ImportSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.state = 258
                self.match(GoParser.DOT)
                pass
            elif token in [27]:
                self.state = 259
                self.packageName()
                pass
            elif token in [79, 80]:
                pass
            else:
                pass
            self.state = 262
            self.importPath()
            this.addImportSpec();
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = GoParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDecl(self):
            return self.getTypedRuleContext(GoParser.ConstDeclContext,0)


        def typeDecl(self):
            return self.getTypedRuleContext(GoParser.TypeDeclContext,0)


        def varDecl(self):
            return self.getTypedRuleContext(GoParser.VarDeclContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = GoParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_declaration)
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self.constDecl()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.typeDecl()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 269
                self.varDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(GoParser.CONST, 0)

        def constSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ConstSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.ConstSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_constDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDecl" ):
                listener.enterConstDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDecl" ):
                listener.exitConstDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDecl" ):
                return visitor.visitConstDecl(self)
            else:
                return visitor.visitChildren(self)




    def constDecl(self):

        localctx = GoParser.ConstDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_constDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(GoParser.CONST)
            self.state = 284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 273
                self.constSpec()
                pass
            elif token in [28]:
                self.state = 274
                self.match(GoParser.L_PAREN)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 275
                    self.constSpec()
                    self.state = 276
                    self.eos()
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 283
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_constSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSpec" ):
                listener.enterConstSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSpec" ):
                listener.exitConstSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstSpec" ):
                return visitor.visitConstSpec(self)
            else:
                return visitor.visitChildren(self)




    def constSpec(self):

        localctx = GoParser.ConstSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_constSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.identifierList()
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 287
                    self.type_()


                self.state = 290
                self.match(GoParser.ASSIGN)
                self.state = 291
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.IDENTIFIER)
            else:
                return self.getToken(GoParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = GoParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(GoParser.IDENTIFIER)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 295
                    self.match(GoParser.COMMA)
                    self.state = 296
                    self.match(GoParser.IDENTIFIER) 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = GoParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.expression(0)
            self.state = 307
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 303
                    self.match(GoParser.COMMA)
                    self.state = 304
                    self.expression(0) 
                self.state = 309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(GoParser.TYPE, 0)

        def typeSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_typeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDecl" ):
                listener.enterTypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDecl" ):
                listener.exitTypeDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDecl" ):
                return visitor.visitTypeDecl(self)
            else:
                return visitor.visitChildren(self)




    def typeDecl(self):

        localctx = GoParser.TypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_typeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(GoParser.TYPE)
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 311
                self.typeSpec()
                pass
            elif token in [28]:
                self.state = 312
                self.match(GoParser.L_PAREN)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 313
                    self.typeSpec()
                    self.state = 314
                    self.eos()
                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 321
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasDecl(self):
            return self.getTypedRuleContext(GoParser.AliasDeclContext,0)


        def typeDef(self):
            return self.getTypedRuleContext(GoParser.TypeDefContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpec" ):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = GoParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typeSpec)
        try:
            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 324
                self.aliasDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.typeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GoParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_aliasDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDecl" ):
                listener.enterAliasDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDecl" ):
                listener.exitAliasDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasDecl" ):
                return visitor.visitAliasDecl(self)
            else:
                return visitor.visitChildren(self)




    def aliasDecl(self):

        localctx = GoParser.AliasDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_aliasDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(GoParser.IDENTIFIER)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 329
                self.typeParameters()


            self.state = 332
            self.match(GoParser.ASSIGN)
            self.state = 333
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GoParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDef" ):
                return visitor.visitTypeDef(self)
            else:
                return visitor.visitChildren(self)




    def typeDef(self):

        localctx = GoParser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typeDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(GoParser.IDENTIFIER)
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 336
                self.typeParameters()


            self.state = 339
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def typeParameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeParameterDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeParameterDeclContext,i)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = GoParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(GoParser.L_BRACKET)
            self.state = 342
            self.typeParameterDecl()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 343
                self.match(GoParser.COMMA)
                self.state = 344
                self.typeParameterDecl()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 350
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def typeElement(self):
            return self.getTypedRuleContext(GoParser.TypeElementContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeParameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterDecl" ):
                listener.enterTypeParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterDecl" ):
                listener.exitTypeParameterDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterDecl" ):
                return visitor.visitTypeParameterDecl(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterDecl(self):

        localctx = GoParser.TypeParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeParameterDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.identifierList()
            self.state = 353
            self.typeElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeTermContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeTermContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.OR)
            else:
                return self.getToken(GoParser.OR, i)

        def getRuleIndex(self):
            return GoParser.RULE_typeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeElement" ):
                listener.enterTypeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeElement" ):
                listener.exitTypeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeElement" ):
                return visitor.visitTypeElement(self)
            else:
                return visitor.visitChildren(self)




    def typeElement(self):

        localctx = GoParser.TypeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.typeTerm()
            self.state = 360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 356
                    self.match(GoParser.OR)
                    self.state = 357
                    self.typeTerm() 
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def UNDERLYING(self):
            return self.getToken(GoParser.UNDERLYING, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTerm" ):
                listener.enterTypeTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTerm" ):
                listener.exitTypeTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTerm" ):
                return visitor.visitTypeTerm(self)
            else:
                return visitor.visitChildren(self)




    def typeTerm(self):

        localctx = GoParser.TypeTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 363
                self.match(GoParser.UNDERLYING)


            self.state = 366
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GoParser.TypeParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDecl" ):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDecl" ):
                listener.exitFunctionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDecl" ):
                return visitor.visitFunctionDecl(self)
            else:
                return visitor.visitChildren(self)




    def functionDecl(self):

        localctx = GoParser.FunctionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(GoParser.FUNC)
            self.state = 369
            self.match(GoParser.IDENTIFIER)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 370
                self.typeParameters()


            self.state = 373
            self.signature()
            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 374
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def receiver(self):
            return self.getTypedRuleContext(GoParser.ReceiverContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_methodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDecl" ):
                listener.enterMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDecl" ):
                listener.exitMethodDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDecl" ):
                return visitor.visitMethodDecl(self)
            else:
                return visitor.visitChildren(self)




    def methodDecl(self):

        localctx = GoParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(GoParser.FUNC)
            self.state = 378
            self.receiver()
            self.state = 379
            self.match(GoParser.IDENTIFIER)
            self.state = 380
            self.signature()
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 381
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_receiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiver" ):
                listener.enterReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiver" ):
                listener.exitReceiver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiver" ):
                return visitor.visitReceiver(self)
            else:
                return visitor.visitChildren(self)




    def receiver(self):

        localctx = GoParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_receiver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(GoParser.VAR, 0)

        def varSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.VarSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.VarSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_varDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDecl" ):
                listener.enterVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDecl" ):
                listener.exitVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = GoParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(GoParser.VAR)
            self.state = 398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 387
                self.varSpec()
                pass
            elif token in [28]:
                self.state = 388
                self.match(GoParser.L_PAREN)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 389
                    self.varSpec()
                    self.state = 390
                    self.eos()
                    self.state = 396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 397
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_varSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSpec" ):
                listener.enterVarSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSpec" ):
                listener.exitVarSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarSpec" ):
                return visitor.visitVarSpec(self)
            else:
                return visitor.visitChildren(self)




    def varSpec(self):

        localctx = GoParser.VarSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_varSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.identifierList()
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 401
                self.type_()
                self.state = 404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 402
                    self.match(GoParser.ASSIGN)
                    self.state = 403
                    self.expressionList()


                pass

            elif la_ == 2:
                self.state = 406
                self.match(GoParser.ASSIGN)
                self.state = 407
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def getRuleIndex(self):
            return GoParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(GoParser.L_CURLY)
            self.state = 411
            self.statementList()
            self.state = 412
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.StatementContext)
            else:
                return self.getTypedRuleContext(GoParser.StatementContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.SEMI)
            else:
                return self.getToken(GoParser.SEMI, i)

        def EOS(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.EOS)
            else:
                return self.getToken(GoParser.EOS, i)

        def getRuleIndex(self):
            return GoParser.RULE_statementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementList" ):
                listener.enterStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementList" ):
                listener.exitStatementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementList" ):
                return visitor.visitStatementList(self)
            else:
                return visitor.visitChildren(self)




    def statementList(self):

        localctx = GoParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_statementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 417
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 414
                        self.match(GoParser.SEMI)
                        pass

                    elif la_ == 2:
                        self.state = 415
                        self.match(GoParser.EOS)
                        pass

                    elif la_ == 3:
                        pass


                    self.state = 419
                    self.statement()
                    self.state = 420
                    self.eos() 
                self.state = 426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(GoParser.DeclarationContext,0)


        def labeledStmt(self):
            return self.getTypedRuleContext(GoParser.LabeledStmtContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def goStmt(self):
            return self.getTypedRuleContext(GoParser.GoStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(GoParser.ReturnStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(GoParser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(GoParser.ContinueStmtContext,0)


        def gotoStmt(self):
            return self.getTypedRuleContext(GoParser.GotoStmtContext,0)


        def fallthroughStmt(self):
            return self.getTypedRuleContext(GoParser.FallthroughStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(GoParser.IfStmtContext,0)


        def switchStmt(self):
            return self.getTypedRuleContext(GoParser.SwitchStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(GoParser.SelectStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(GoParser.ForStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(GoParser.DeferStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = GoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statement)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.labeledStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.simpleStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                self.goStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 431
                self.returnStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                self.breakStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 433
                self.continueStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 434
                self.gotoStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 435
                self.fallthroughStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 436
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 437
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 438
                self.switchStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 439
                self.selectStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 440
                self.forStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 441
                self.deferStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sendStmt(self):
            return self.getTypedRuleContext(GoParser.SendStmtContext,0)


        def incDecStmt(self):
            return self.getTypedRuleContext(GoParser.IncDecStmtContext,0)


        def assignment(self):
            return self.getTypedRuleContext(GoParser.AssignmentContext,0)


        def expressionStmt(self):
            return self.getTypedRuleContext(GoParser.ExpressionStmtContext,0)


        def shortVarDecl(self):
            return self.getTypedRuleContext(GoParser.ShortVarDeclContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStmt" ):
                return visitor.visitSimpleStmt(self)
            else:
                return visitor.visitChildren(self)




    def simpleStmt(self):

        localctx = GoParser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_simpleStmt)
        try:
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.sendStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.incDecStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 446
                self.assignment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 447
                self.expressionStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 448
                self.shortVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_expressionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStmt" ):
                listener.enterExpressionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStmt" ):
                listener.exitExpressionStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStmt" ):
                return visitor.visitExpressionStmt(self)
            else:
                return visitor.visitChildren(self)




    def expressionStmt(self):

        localctx = GoParser.ExpressionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expressionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.channel = None # ExpressionContext

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_sendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendStmt" ):
                listener.enterSendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendStmt" ):
                listener.exitSendStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendStmt" ):
                return visitor.visitSendStmt(self)
            else:
                return visitor.visitChildren(self)




    def sendStmt(self):

        localctx = GoParser.SendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sendStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            localctx.channel = self.expression(0)
            self.state = 454
            self.match(GoParser.RECEIVE)
            self.state = 455
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncDecStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def PLUS_PLUS(self):
            return self.getToken(GoParser.PLUS_PLUS, 0)

        def MINUS_MINUS(self):
            return self.getToken(GoParser.MINUS_MINUS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_incDecStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncDecStmt" ):
                listener.enterIncDecStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncDecStmt" ):
                listener.exitIncDecStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncDecStmt" ):
                return visitor.visitIncDecStmt(self)
            else:
                return visitor.visitChildren(self)




    def incDecStmt(self):

        localctx = GoParser.IncDecStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_incDecStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.expression(0)
            self.state = 458
            _la = self._input.LA(1)
            if not(_la==39 or _la==40):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionListContext,i)


        def assign_op(self):
            return self.getTypedRuleContext(GoParser.Assign_opContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = GoParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.expressionList()
            self.state = 461
            self.assign_op()
            self.state = 462
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def PLUS(self):
            return self.getToken(GoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GoParser.MINUS, 0)

        def OR(self):
            return self.getToken(GoParser.OR, 0)

        def CARET(self):
            return self.getToken(GoParser.CARET, 0)

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def DIV(self):
            return self.getToken(GoParser.DIV, 0)

        def MOD(self):
            return self.getToken(GoParser.MOD, 0)

        def LSHIFT(self):
            return self.getToken(GoParser.LSHIFT, 0)

        def RSHIFT(self):
            return self.getToken(GoParser.RSHIFT, 0)

        def AMPERSAND(self):
            return self.getToken(GoParser.AMPERSAND, 0)

        def BIT_CLEAR(self):
            return self.getToken(GoParser.BIT_CLEAR, 0)

        def getRuleIndex(self):
            return GoParser.RULE_assign_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_op" ):
                listener.enterAssign_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_op" ):
                listener.exitAssign_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_op" ):
                return visitor.visitAssign_op(self)
            else:
                return visitor.visitChildren(self)




    def assign_op(self):

        localctx = GoParser.Assign_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_assign_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -434597364041252864) != 0):
                self.state = 464
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -434597364041252864) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 467
            self.match(GoParser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_shortVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortVarDecl" ):
                listener.enterShortVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortVarDecl" ):
                listener.exitShortVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortVarDecl" ):
                return visitor.visitShortVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def shortVarDecl(self):

        localctx = GoParser.ShortVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_shortVarDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.identifierList()
            self.state = 470
            self.match(GoParser.DECLARE_ASSIGN)
            self.state = 471
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(GoParser.StatementContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_labeledStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStmt" ):
                listener.enterLabeledStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStmt" ):
                listener.exitLabeledStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStmt" ):
                return visitor.visitLabeledStmt(self)
            else:
                return visitor.visitChildren(self)




    def labeledStmt(self):

        localctx = GoParser.LabeledStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_labeledStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(GoParser.IDENTIFIER)
            self.state = 474
            self.match(GoParser.COLON)
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 475
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(GoParser.RETURN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = GoParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(GoParser.RETURN)
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 479
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(GoParser.BREAK, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStmt" ):
                return visitor.visitBreakStmt(self)
            else:
                return visitor.visitChildren(self)




    def breakStmt(self):

        localctx = GoParser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(GoParser.BREAK)
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 483
                self.match(GoParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(GoParser.CONTINUE, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStmt" ):
                return visitor.visitContinueStmt(self)
            else:
                return visitor.visitChildren(self)




    def continueStmt(self):

        localctx = GoParser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(GoParser.CONTINUE)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 487
                self.match(GoParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(GoParser.GOTO, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_gotoStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStmt" ):
                listener.enterGotoStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStmt" ):
                listener.exitGotoStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStmt" ):
                return visitor.visitGotoStmt(self)
            else:
                return visitor.visitChildren(self)




    def gotoStmt(self):

        localctx = GoParser.GotoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_gotoStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(GoParser.GOTO)
            self.state = 491
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallthroughStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLTHROUGH(self):
            return self.getToken(GoParser.FALLTHROUGH, 0)

        def getRuleIndex(self):
            return GoParser.RULE_fallthroughStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallthroughStmt" ):
                listener.enterFallthroughStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallthroughStmt" ):
                listener.exitFallthroughStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFallthroughStmt" ):
                return visitor.visitFallthroughStmt(self)
            else:
                return visitor.visitChildren(self)




    def fallthroughStmt(self):

        localctx = GoParser.FallthroughStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fallthroughStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(GoParser.FALLTHROUGH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeferStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFER(self):
            return self.getToken(GoParser.DEFER, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeferStmt" ):
                return visitor.visitDeferStmt(self)
            else:
                return visitor.visitChildren(self)




    def deferStmt(self):

        localctx = GoParser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(GoParser.DEFER)
            self.state = 496
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(GoParser.IF, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.BlockContext)
            else:
                return self.getTypedRuleContext(GoParser.BlockContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def SEMI(self):
            return self.getToken(GoParser.SEMI, 0)

        def EOS(self):
            return self.getToken(GoParser.EOS, 0)

        def ELSE(self):
            return self.getToken(GoParser.ELSE, 0)

        def ifStmt(self):
            return self.getTypedRuleContext(GoParser.IfStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = GoParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(GoParser.IF)
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 499
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 500
                _la = self._input.LA(1)
                if not(_la==36 or _la==88):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 501
                self.expression(0)
                pass

            elif la_ == 3:
                self.state = 502
                self.simpleStmt()
                self.state = 503
                _la = self._input.LA(1)
                if not(_la==36 or _la==88):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 504
                self.expression(0)
                pass


            self.state = 508
            self.block()
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 509
                self.match(GoParser.ELSE)
                self.state = 512
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 510
                    self.ifStmt()
                    pass
                elif token in [30]:
                    self.state = 511
                    self.block()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchStmt(self):
            return self.getTypedRuleContext(GoParser.ExprSwitchStmtContext,0)


        def typeSwitchStmt(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_switchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStmt" ):
                listener.enterSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStmt" ):
                listener.exitSwitchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStmt" ):
                return visitor.visitSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def switchStmt(self):

        localctx = GoParser.SwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_switchStmt)
        try:
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self.exprSwitchStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 517
                self.typeSwitchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprSwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GoParser.SWITCH, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def exprCaseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExprCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.ExprCaseClauseContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_exprSwitchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprSwitchStmt" ):
                listener.enterExprSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprSwitchStmt" ):
                listener.exitExprSwitchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprSwitchStmt" ):
                return visitor.visitExprSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprSwitchStmt(self):

        localctx = GoParser.ExprSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exprSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(GoParser.SWITCH)
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 521
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 524
                    self.simpleStmt()


                self.state = 527
                self.eos()
                self.state = 529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 528
                    self.expression(0)


                pass


            self.state = 533
            self.match(GoParser.L_CURLY)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 534
                self.exprCaseClause()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 540
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprCaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchCase(self):
            return self.getTypedRuleContext(GoParser.ExprSwitchCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_exprCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprCaseClause" ):
                listener.enterExprCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprCaseClause" ):
                listener.exitExprCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprCaseClause" ):
                return visitor.visitExprCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def exprCaseClause(self):

        localctx = GoParser.ExprCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_exprCaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.exprSwitchCase()
            self.state = 543
            self.match(GoParser.COLON)
            self.state = 544
            self.statementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprSwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_exprSwitchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprSwitchCase" ):
                listener.enterExprSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprSwitchCase" ):
                listener.exitExprSwitchCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprSwitchCase" ):
                return visitor.visitExprSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def exprSwitchCase(self):

        localctx = GoParser.ExprSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_exprSwitchCase)
        try:
            self.state = 549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.match(GoParser.CASE)
                self.state = 547
                self.expressionList()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GoParser.SWITCH, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def typeSwitchGuard(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchGuardContext,0)


        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def typeCaseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeCaseClauseContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchStmt" ):
                listener.enterTypeSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchStmt" ):
                listener.exitTypeSwitchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSwitchStmt" ):
                return visitor.visitTypeSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchStmt(self):

        localctx = GoParser.TypeSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_typeSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(GoParser.SWITCH)
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 552
                self.typeSwitchGuard()
                pass

            elif la_ == 2:
                self.state = 553
                self.eos()
                self.state = 554
                self.typeSwitchGuard()
                pass

            elif la_ == 3:
                self.state = 556
                self.simpleStmt()
                self.state = 557
                self.eos()
                self.state = 558
                self.typeSwitchGuard()
                pass


            self.state = 562
            self.match(GoParser.L_CURLY)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 563
                self.typeCaseClause()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 569
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def TYPE(self):
            return self.getToken(GoParser.TYPE, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchGuard" ):
                listener.enterTypeSwitchGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchGuard" ):
                listener.exitTypeSwitchGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSwitchGuard" ):
                return visitor.visitTypeSwitchGuard(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchGuard(self):

        localctx = GoParser.TypeSwitchGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_typeSwitchGuard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 571
                self.match(GoParser.IDENTIFIER)
                self.state = 572
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 575
            self.primaryExpr()
            self.state = 576
            self.match(GoParser.DOT)
            self.state = 577
            self.match(GoParser.L_PAREN)
            self.state = 578
            self.match(GoParser.TYPE)
            self.state = 579
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeCaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSwitchCase(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeCaseClause" ):
                listener.enterTypeCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeCaseClause" ):
                listener.exitTypeCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeCaseClause" ):
                return visitor.visitTypeCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def typeCaseClause(self):

        localctx = GoParser.TypeCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_typeCaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.typeSwitchCase()
            self.state = 582
            self.match(GoParser.COLON)
            self.state = 583
            self.statementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def typeList(self):
            return self.getTypedRuleContext(GoParser.TypeListContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchCase" ):
                listener.enterTypeSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchCase" ):
                listener.exitTypeSwitchCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSwitchCase" ):
                return visitor.visitTypeSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchCase(self):

        localctx = GoParser.TypeSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_typeSwitchCase)
        try:
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 585
                self.match(GoParser.CASE)
                self.state = 586
                self.typeList()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.Type_Context)
            else:
                return self.getTypedRuleContext(GoParser.Type_Context,i)


        def NIL_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.NIL_LIT)
            else:
                return self.getToken(GoParser.NIL_LIT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = GoParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 590
                self.type_()
                pass

            elif la_ == 2:
                self.state = 591
                self.match(GoParser.NIL_LIT)
                pass


            self.state = 601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 594
                    self.match(GoParser.COMMA)
                    self.state = 597
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        self.state = 595
                        self.type_()
                        pass

                    elif la_ == 2:
                        self.state = 596
                        self.match(GoParser.NIL_LIT)
                        pass

             
                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(GoParser.SELECT, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def commClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.CommClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.CommClauseContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_selectStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStmt" ):
                listener.enterSelectStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStmt" ):
                listener.exitSelectStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = GoParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(GoParser.SELECT)
            self.state = 605
            self.match(GoParser.L_CURLY)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 606
                self.commClause()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 612
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commCase(self):
            return self.getTypedRuleContext(GoParser.CommCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_commClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommClause" ):
                listener.enterCommClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommClause" ):
                listener.exitCommClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommClause" ):
                return visitor.visitCommClause(self)
            else:
                return visitor.visitChildren(self)




    def commClause(self):

        localctx = GoParser.CommClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_commClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.commCase()
            self.state = 615
            self.match(GoParser.COLON)
            self.state = 616
            self.statementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def sendStmt(self):
            return self.getTypedRuleContext(GoParser.SendStmtContext,0)


        def recvStmt(self):
            return self.getTypedRuleContext(GoParser.RecvStmtContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_commCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommCase" ):
                listener.enterCommCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommCase" ):
                listener.exitCommCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommCase" ):
                return visitor.visitCommCase(self)
            else:
                return visitor.visitChildren(self)




    def commCase(self):

        localctx = GoParser.CommCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_commCase)
        try:
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.match(GoParser.CASE)
                self.state = 621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 619
                    self.sendStmt()
                    pass

                elif la_ == 2:
                    self.state = 620
                    self.recvStmt()
                    pass


                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecvStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.recvExpr = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_recvStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecvStmt" ):
                listener.enterRecvStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecvStmt" ):
                listener.exitRecvStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecvStmt" ):
                return visitor.visitRecvStmt(self)
            else:
                return visitor.visitChildren(self)




    def recvStmt(self):

        localctx = GoParser.RecvStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_recvStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 626
                self.expressionList()
                self.state = 627
                self.match(GoParser.ASSIGN)

            elif la_ == 2:
                self.state = 629
                self.identifierList()
                self.state = 630
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 634
            localctx.recvExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GoParser.FOR, 0)

        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def condition(self):
            return self.getTypedRuleContext(GoParser.ConditionContext,0)


        def forClause(self):
            return self.getTypedRuleContext(GoParser.ForClauseContext,0)


        def rangeClause(self):
            return self.getTypedRuleContext(GoParser.RangeClauseContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = GoParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(GoParser.FOR)
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 637
                self.condition()

            elif la_ == 2:
                self.state = 638
                self.forClause()

            elif la_ == 3:
                self.state = 639
                self.rangeClause()


            self.state = 642
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = GoParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initStmt = None # SimpleStmtContext
            self.postStmt = None # SimpleStmtContext

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(GoParser.SimpleStmtContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_forClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForClause" ):
                listener.enterForClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForClause" ):
                listener.exitForClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForClause" ):
                return visitor.visitForClause(self)
            else:
                return visitor.visitChildren(self)




    def forClause(self):

        localctx = GoParser.ForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 646
                localctx.initStmt = self.simpleStmt()


            self.state = 649
            self.eos()
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 650
                self.expression(0)


            self.state = 653
            self.eos()
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 654
                localctx.postStmt = self.simpleStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(GoParser.RANGE, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_rangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeClause" ):
                listener.enterRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeClause" ):
                listener.exitRangeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeClause" ):
                return visitor.visitRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def rangeClause(self):

        localctx = GoParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_rangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 657
                self.expressionList()
                self.state = 658
                self.match(GoParser.ASSIGN)

            elif la_ == 2:
                self.state = 660
                self.identifierList()
                self.state = 661
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 665
            self.match(GoParser.RANGE)
            self.state = 666
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(GoParser.GO, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_goStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoStmt" ):
                listener.enterGoStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoStmt" ):
                listener.exitGoStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoStmt" ):
                return visitor.visitGoStmt(self)
            else:
                return visitor.visitChildren(self)




    def goStmt(self):

        localctx = GoParser.GoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_goStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(GoParser.GO)
            self.state = 669
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def typeLit(self):
            return self.getTypedRuleContext(GoParser.TypeLitContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = GoParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_type_)
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.typeName()
                self.state = 673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 672
                    self.typeArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.typeLit()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.match(GoParser.L_PAREN)
                self.state = 677
                self.type_()
                self.state = 678
                self.match(GoParser.R_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def typeList(self):
            return self.getTypedRuleContext(GoParser.TypeListContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgs" ):
                listener.enterTypeArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgs" ):
                listener.exitTypeArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgs" ):
                return visitor.visitTypeArgs(self)
            else:
                return visitor.visitChildren(self)




    def typeArgs(self):

        localctx = GoParser.TypeArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_typeArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(GoParser.L_BRACKET)
            self.state = 683
            self.typeList()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 684
                self.match(GoParser.COMMA)


            self.state = 687
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdent(self):
            return self.getTypedRuleContext(GoParser.QualifiedIdentContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = GoParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeName)
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.qualifiedIdent()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.match(GoParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(GoParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(GoParser.StructTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(GoParser.PointerTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(GoParser.FunctionTypeContext,0)


        def interfaceType(self):
            return self.getTypedRuleContext(GoParser.InterfaceTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoParser.MapTypeContext,0)


        def channelType(self):
            return self.getTypedRuleContext(GoParser.ChannelTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLit" ):
                listener.enterTypeLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLit" ):
                listener.exitTypeLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeLit" ):
                return visitor.visitTypeLit(self)
            else:
                return visitor.visitChildren(self)




    def typeLit(self):

        localctx = GoParser.TypeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeLit)
        try:
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.arrayType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.structType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 695
                self.pointerType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 696
                self.functionType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 697
                self.interfaceType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 698
                self.sliceType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 699
                self.mapType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 700
                self.channelType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def arrayLength(self):
            return self.getTypedRuleContext(GoParser.ArrayLengthContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = GoParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(GoParser.L_BRACKET)
            self.state = 704
            self.arrayLength()
            self.state = 705
            self.match(GoParser.R_BRACKET)
            self.state = 706
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_arrayLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLength" ):
                listener.enterArrayLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLength" ):
                listener.exitArrayLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLength" ):
                return visitor.visitArrayLength(self)
            else:
                return visitor.visitChildren(self)




    def arrayLength(self):

        localctx = GoParser.ArrayLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_arrayLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_elementType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementType" ):
                listener.enterElementType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementType" ):
                listener.exitElementType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementType" ):
                return visitor.visitElementType(self)
            else:
                return visitor.visitChildren(self)




    def elementType(self):

        localctx = GoParser.ElementTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_elementType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = GoParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pointerType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(GoParser.STAR)
            self.state = 713
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(GoParser.INTERFACE, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def methodSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.MethodSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.MethodSpecContext,i)


        def typeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeElementContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeElementContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_interfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType" ):
                listener.enterInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType" ):
                listener.exitInterfaceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceType" ):
                return visitor.visitInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def interfaceType(self):

        localctx = GoParser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_interfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(GoParser.INTERFACE)
            self.state = 716
            self.match(GoParser.L_CURLY)
            self.state = 725
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 719
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 717
                        self.methodSpec()
                        pass

                    elif la_ == 2:
                        self.state = 718
                        self.typeElement()
                        pass


                    self.state = 721
                    self.eos() 
                self.state = 727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 728
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_sliceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceType" ):
                listener.enterSliceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceType" ):
                listener.exitSliceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceType" ):
                return visitor.visitSliceType(self)
            else:
                return visitor.visitChildren(self)




    def sliceType(self):

        localctx = GoParser.SliceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_sliceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(GoParser.L_BRACKET)
            self.state = 731
            self.match(GoParser.R_BRACKET)
            self.state = 732
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(GoParser.MAP, 0)

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapType" ):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)




    def mapType(self):

        localctx = GoParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(GoParser.MAP)
            self.state = 735
            self.match(GoParser.L_BRACKET)
            self.state = 736
            self.type_()
            self.state = 737
            self.match(GoParser.R_BRACKET)
            self.state = 738
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def CHAN(self):
            return self.getToken(GoParser.CHAN, 0)

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def getRuleIndex(self):
            return GoParser.RULE_channelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelType" ):
                listener.enterChannelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelType" ):
                listener.exitChannelType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannelType" ):
                return visitor.visitChannelType(self)
            else:
                return visitor.visitChildren(self)




    def channelType(self):

        localctx = GoParser.ChannelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_channelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 740
                if not this.isNotReceive():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.isNotReceive()")
                self.state = 741
                self.match(GoParser.CHAN)
                pass

            elif la_ == 2:
                self.state = 742
                self.match(GoParser.CHAN)
                self.state = 743
                self.match(GoParser.RECEIVE)
                pass

            elif la_ == 3:
                self.state = 744
                self.match(GoParser.RECEIVE)
                self.state = 745
                self.match(GoParser.CHAN)
                pass


            self.state = 748
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoParser.ResultContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_methodSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSpec" ):
                listener.enterMethodSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSpec" ):
                listener.exitMethodSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodSpec" ):
                return visitor.visitMethodSpec(self)
            else:
                return visitor.visitChildren(self)




    def methodSpec(self):

        localctx = GoParser.MethodSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_methodSpec)
        try:
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.match(GoParser.IDENTIFIER)
                self.state = 751
                self.parameters()
                self.state = 752
                self.result()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.match(GoParser.IDENTIFIER)
                self.state = 755
                self.parameters()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = GoParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(GoParser.FUNC)
            self.state = 759
            self.signature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoParser.ResultContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature" ):
                listener.enterSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature" ):
                listener.exitSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignature" ):
                return visitor.visitSignature(self)
            else:
                return visitor.visitChildren(self)




    def signature(self):

        localctx = GoParser.SignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_signature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.parameters()
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 762
                self.result()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult" ):
                listener.enterResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult" ):
                listener.exitResult(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult" ):
                return visitor.visitResult(self)
            else:
                return visitor.visitChildren(self)




    def result(self):

        localctx = GoParser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_result)
        try:
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.parameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def parameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ParameterDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.ParameterDeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = GoParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(GoParser.L_PAREN)
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 770
                self.parameterDecl()
                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 771
                        self.match(GoParser.COMMA)
                        self.state = 772
                        self.parameterDecl() 
                    self.state = 777
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 778
                    self.match(GoParser.COMMA)




            self.state = 783
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_parameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDecl" ):
                listener.enterParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDecl" ):
                listener.exitParameterDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDecl" ):
                return visitor.visitParameterDecl(self)
            else:
                return visitor.visitChildren(self)




    def parameterDecl(self):

        localctx = GoParser.ParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_parameterDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 785
                self.identifierList()


            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 788
                self.match(GoParser.ELLIPSIS)


            self.state = 791
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unary_op = None # Token
            self.mul_op = None # Token
            self.add_op = None # Token
            self.rel_op = None # Token

        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def PLUS(self):
            return self.getToken(GoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GoParser.MINUS, 0)

        def EXCLAMATION(self):
            return self.getToken(GoParser.EXCLAMATION, 0)

        def CARET(self):
            return self.getToken(GoParser.CARET, 0)

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def AMPERSAND(self):
            return self.getToken(GoParser.AMPERSAND, 0)

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def DIV(self):
            return self.getToken(GoParser.DIV, 0)

        def MOD(self):
            return self.getToken(GoParser.MOD, 0)

        def LSHIFT(self):
            return self.getToken(GoParser.LSHIFT, 0)

        def RSHIFT(self):
            return self.getToken(GoParser.RSHIFT, 0)

        def BIT_CLEAR(self):
            return self.getToken(GoParser.BIT_CLEAR, 0)

        def OR(self):
            return self.getToken(GoParser.OR, 0)

        def EQUALS(self):
            return self.getToken(GoParser.EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(GoParser.NOT_EQUALS, 0)

        def LESS(self):
            return self.getToken(GoParser.LESS, 0)

        def LESS_OR_EQUALS(self):
            return self.getToken(GoParser.LESS_OR_EQUALS, 0)

        def GREATER(self):
            return self.getToken(GoParser.GREATER, 0)

        def GREATER_OR_EQUALS(self):
            return self.getToken(GoParser.GREATER_OR_EQUALS, 0)

        def LOGICAL_AND(self):
            return self.getToken(GoParser.LOGICAL_AND, 0)

        def LOGICAL_OR(self):
            return self.getToken(GoParser.LOGICAL_OR, 0)

        def getRuleIndex(self):
            return GoParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GoParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 794
                self.primaryExpr()
                pass

            elif la_ == 2:
                self.state = 795
                localctx.unary_op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 127) != 0)):
                    localctx.unary_op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 796
                self.expression(6)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 814
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 799
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 800
                        localctx.mul_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4472074429978902528) != 0)):
                            localctx.mul_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 801
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 802
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 803
                        localctx.add_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4037477065937649664) != 0)):
                            localctx.add_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 804
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 805
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 806
                        localctx.rel_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2216615441596416) != 0)):
                            localctx.rel_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 807
                        self.expression(4)
                        pass

                    elif la_ == 4:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 808
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 809
                        self.match(GoParser.LOGICAL_AND)
                        self.state = 810
                        self.expression(3)
                        pass

                    elif la_ == 5:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 811
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 812
                        self.match(GoParser.LOGICAL_OR)
                        self.state = 813
                        self.expression(2)
                        pass

             
                self.state = 818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self):
            return self.getTypedRuleContext(GoParser.OperandContext,0)


        def conversion(self):
            return self.getTypedRuleContext(GoParser.ConversionContext,0)


        def methodExpr(self):
            return self.getTypedRuleContext(GoParser.MethodExprContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.DOT)
            else:
                return self.getToken(GoParser.DOT, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.IDENTIFIER)
            else:
                return self.getToken(GoParser.IDENTIFIER, i)

        def index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.IndexContext)
            else:
                return self.getTypedRuleContext(GoParser.IndexContext,i)


        def slice_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.Slice_Context)
            else:
                return self.getTypedRuleContext(GoParser.Slice_Context,i)


        def typeAssertion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeAssertionContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeAssertionContext,i)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(GoParser.ArgumentsContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_primaryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpr" ):
                listener.enterPrimaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpr" ):
                listener.exitPrimaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpr" ):
                return visitor.visitPrimaryExpr(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpr(self):

        localctx = GoParser.PrimaryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_primaryExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 819
                if not this.isOperand():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.isOperand()")
                self.state = 820
                self.operand()
                pass

            elif la_ == 2:
                self.state = 821
                if not this.isConversion():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.isConversion()")
                self.state = 822
                self.conversion()
                pass

            elif la_ == 3:
                self.state = 823
                if not this.isMethodExpr():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.isMethodExpr()")
                self.state = 824
                self.methodExpr()
                pass


            self.state = 835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 833
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 827
                        self.match(GoParser.DOT)
                        self.state = 828
                        self.match(GoParser.IDENTIFIER)
                        pass

                    elif la_ == 2:
                        self.state = 829
                        self.index()
                        pass

                    elif la_ == 3:
                        self.state = 830
                        self.slice_()
                        pass

                    elif la_ == 4:
                        self.state = 831
                        self.typeAssertion()
                        pass

                    elif la_ == 5:
                        self.state = 832
                        self.arguments()
                        pass

             
                self.state = 837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion" ):
                listener.enterConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion" ):
                listener.exitConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversion" ):
                return visitor.visitConversion(self)
            else:
                return visitor.visitChildren(self)




    def conversion(self):

        localctx = GoParser.ConversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.type_()
            self.state = 839
            self.match(GoParser.L_PAREN)
            self.state = 840
            self.expression(0)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 841
                self.match(GoParser.COMMA)


            self.state = 844
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(GoParser.LiteralContext,0)


        def operandName(self):
            return self.getTypedRuleContext(GoParser.OperandNameContext,0)


        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperand" ):
                listener.enterOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperand" ):
                listener.exitOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperand" ):
                return visitor.visitOperand(self)
            else:
                return visitor.visitChildren(self)




    def operand(self):

        localctx = GoParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_operand)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.operandName()
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 848
                    self.typeArgs()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 851
                self.match(GoParser.L_PAREN)
                self.state = 852
                self.expression(0)
                self.state = 853
                self.match(GoParser.R_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicLit(self):
            return self.getTypedRuleContext(GoParser.BasicLitContext,0)


        def compositeLit(self):
            return self.getTypedRuleContext(GoParser.CompositeLitContext,0)


        def functionLit(self):
            return self.getTypedRuleContext(GoParser.FunctionLitContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = GoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_literal)
        try:
            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 65, 66, 67, 68, 69, 72, 73, 79, 80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 857
                self.basicLit()
                pass
            elif token in [17, 23, 27, 32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.compositeLit()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 3)
                self.state = 859
                self.functionLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL_LIT(self):
            return self.getToken(GoParser.NIL_LIT, 0)

        def integer(self):
            return self.getTypedRuleContext(GoParser.IntegerContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def FLOAT_LIT(self):
            return self.getToken(GoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_basicLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicLit" ):
                listener.enterBasicLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicLit" ):
                listener.exitBasicLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicLit" ):
                return visitor.visitBasicLit(self)
            else:
                return visitor.visitChildren(self)




    def basicLit(self):

        localctx = GoParser.BasicLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_basicLit)
        try:
            self.state = 866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                self.match(GoParser.NIL_LIT)
                pass
            elif token in [65, 66, 67, 68, 72, 73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 863
                self.integer()
                pass
            elif token in [79, 80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 864
                self.string_()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 4)
                self.state = 865
                self.match(GoParser.FLOAT_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LIT(self):
            return self.getToken(GoParser.DECIMAL_LIT, 0)

        def BINARY_LIT(self):
            return self.getToken(GoParser.BINARY_LIT, 0)

        def OCTAL_LIT(self):
            return self.getToken(GoParser.OCTAL_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(GoParser.HEX_LIT, 0)

        def IMAGINARY_LIT(self):
            return self.getToken(GoParser.IMAGINARY_LIT, 0)

        def RUNE_LIT(self):
            return self.getToken(GoParser.RUNE_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = GoParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 399) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def qualifiedIdent(self):
            return self.getTypedRuleContext(GoParser.QualifiedIdentContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_operandName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandName" ):
                listener.enterOperandName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandName" ):
                listener.exitOperandName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperandName" ):
                return visitor.visitOperandName(self)
            else:
                return visitor.visitChildren(self)




    def operandName(self):

        localctx = GoParser.OperandNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_operandName)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.match(GoParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.qualifiedIdent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.IDENTIFIER)
            else:
                return self.getToken(GoParser.IDENTIFIER, i)

        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedIdent" ):
                return visitor.visitQualifiedIdent(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdent(self):

        localctx = GoParser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_qualifiedIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(GoParser.IDENTIFIER)
            self.state = 875
            self.match(GoParser.DOT)
            self.state = 876
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalType(self):
            return self.getTypedRuleContext(GoParser.LiteralTypeContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_compositeLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompositeLit" ):
                listener.enterCompositeLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompositeLit" ):
                listener.exitCompositeLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompositeLit" ):
                return visitor.visitCompositeLit(self)
            else:
                return visitor.visitChildren(self)




    def compositeLit(self):

        localctx = GoParser.CompositeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_compositeLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.literalType()
            self.state = 879
            self.literalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structType(self):
            return self.getTypedRuleContext(GoParser.StructTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(GoParser.ArrayTypeContext,0)


        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoParser.MapTypeContext,0)


        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_literalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralType" ):
                listener.enterLiteralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralType" ):
                listener.exitLiteralType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralType" ):
                return visitor.visitLiteralType(self)
            else:
                return visitor.visitChildren(self)




    def literalType(self):

        localctx = GoParser.LiteralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_literalType)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.structType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.arrayType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 883
                self.match(GoParser.L_BRACKET)
                self.state = 884
                self.match(GoParser.ELLIPSIS)
                self.state = 885
                self.match(GoParser.R_BRACKET)
                self.state = 886
                self.elementType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                self.sliceType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 888
                self.mapType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 889
                self.typeName()
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 890
                    self.typeArgs()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def elementList(self):
            return self.getTypedRuleContext(GoParser.ElementListContext,0)


        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_literalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralValue" ):
                listener.enterLiteralValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralValue" ):
                listener.exitLiteralValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralValue" ):
                return visitor.visitLiteralValue(self)
            else:
                return visitor.visitChildren(self)




    def literalValue(self):

        localctx = GoParser.LiteralValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_literalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(GoParser.L_CURLY)
            self.state = 900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 896
                self.elementList()
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 897
                    self.match(GoParser.COMMA)




            self.state = 902
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.KeyedElementContext)
            else:
                return self.getTypedRuleContext(GoParser.KeyedElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementList" ):
                return visitor.visitElementList(self)
            else:
                return visitor.visitChildren(self)




    def elementList(self):

        localctx = GoParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_elementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.keyedElement()
            self.state = 909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 905
                    self.match(GoParser.COMMA)
                    self.state = 906
                    self.keyedElement() 
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self):
            return self.getTypedRuleContext(GoParser.ElementContext,0)


        def key(self):
            return self.getTypedRuleContext(GoParser.KeyContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def getRuleIndex(self):
            return GoParser.RULE_keyedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedElement" ):
                listener.enterKeyedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedElement" ):
                listener.exitKeyedElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyedElement" ):
                return visitor.visitKeyedElement(self)
            else:
                return visitor.visitChildren(self)




    def keyedElement(self):

        localctx = GoParser.KeyedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_keyedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 912
                self.key()
                self.state = 913
                self.match(GoParser.COLON)


            self.state = 917
            self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey" ):
                listener.enterKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey" ):
                listener.exitKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey" ):
                return visitor.visitKey(self)
            else:
                return visitor.visitChildren(self)




    def key(self):

        localctx = GoParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_key)
        try:
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.literalValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = GoParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_element)
        try:
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.literalValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(GoParser.STRUCT, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def fieldDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.FieldDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.FieldDeclContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructType" ):
                return visitor.visitStructType(self)
            else:
                return visitor.visitChildren(self)




    def structType(self):

        localctx = GoParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_structType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(GoParser.STRUCT)
            self.state = 928
            self.match(GoParser.L_CURLY)
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27 or _la==62:
                self.state = 929
                self.fieldDecl()
                self.state = 930
                self.eos()
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 937
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tag = None # String_Context

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def embeddedField(self):
            return self.getTypedRuleContext(GoParser.EmbeddedFieldContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_fieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDecl" ):
                listener.enterFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDecl" ):
                listener.exitFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDecl" ):
                return visitor.visitFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def fieldDecl(self):

        localctx = GoParser.FieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_fieldDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 939
                self.identifierList()
                self.state = 940
                self.type_()
                pass

            elif la_ == 2:
                self.state = 942
                self.embeddedField()
                pass


            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 945
                localctx.tag = self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAW_STRING_LIT(self):
            return self.getToken(GoParser.RAW_STRING_LIT, 0)

        def INTERPRETED_STRING_LIT(self):
            return self.getToken(GoParser.INTERPRETED_STRING_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_string_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_" ):
                listener.enterString_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_" ):
                listener.exitString_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_" ):
                return visitor.visitString_(self)
            else:
                return visitor.visitChildren(self)




    def string_(self):

        localctx = GoParser.String_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_string_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            _la = self._input.LA(1)
            if not(_la==79 or _la==80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmbeddedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_embeddedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbeddedField" ):
                listener.enterEmbeddedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbeddedField" ):
                listener.exitEmbeddedField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmbeddedField" ):
                return visitor.visitEmbeddedField(self)
            else:
                return visitor.visitChildren(self)




    def embeddedField(self):

        localctx = GoParser.EmbeddedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_embeddedField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 950
                self.match(GoParser.STAR)


            self.state = 953
            self.typeName()
            self.state = 955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 954
                self.typeArgs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLit" ):
                listener.enterFunctionLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLit" ):
                listener.exitFunctionLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionLit" ):
                return visitor.visitFunctionLit(self)
            else:
                return visitor.visitChildren(self)




    def functionLit(self):

        localctx = GoParser.FunctionLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_functionLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(GoParser.FUNC)
            self.state = 958
            self.signature()
            self.state = 959
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return GoParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = GoParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(GoParser.L_BRACKET)
            self.state = 962
            self.expression(0)
            self.state = 963
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COLON)
            else:
                return self.getToken(GoParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_slice_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_" ):
                listener.enterSlice_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_" ):
                listener.exitSlice_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlice_" ):
                return visitor.visitSlice_(self)
            else:
                return visitor.visitChildren(self)




    def slice_(self):

        localctx = GoParser.Slice_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_slice_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(GoParser.L_BRACKET)
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 966
                    self.expression(0)


                self.state = 969
                self.match(GoParser.COLON)
                self.state = 971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 970
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 973
                    self.expression(0)


                self.state = 976
                self.match(GoParser.COLON)
                self.state = 977
                self.expression(0)
                self.state = 978
                self.match(GoParser.COLON)
                self.state = 979
                self.expression(0)
                pass


            self.state = 983
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAssertionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeAssertion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAssertion" ):
                listener.enterTypeAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAssertion" ):
                listener.exitTypeAssertion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAssertion" ):
                return visitor.visitTypeAssertion(self)
            else:
                return visitor.visitChildren(self)




    def typeAssertion(self):

        localctx = GoParser.TypeAssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_typeAssertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(GoParser.DOT)
            self.state = 986
            self.match(GoParser.L_PAREN)
            self.state = 987
            self.type_()
            self.state = 988
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = GoParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(GoParser.L_PAREN)
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 991
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 992
                    self.type_()
                    self.state = 995
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        self.state = 993
                        self.match(GoParser.COMMA)
                        self.state = 994
                        self.expressionList()


                    pass


                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 999
                    self.match(GoParser.ELLIPSIS)


                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 1002
                    self.match(GoParser.COMMA)




            self.state = 1007
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_methodExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodExpr" ):
                listener.enterMethodExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodExpr" ):
                listener.exitMethodExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodExpr" ):
                return visitor.visitMethodExpr(self)
            else:
                return visitor.visitChildren(self)




    def methodExpr(self):

        localctx = GoParser.MethodExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_methodExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.type_()
            self.state = 1010
            self.match(GoParser.DOT)
            self.state = 1011
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(GoParser.SEMI, 0)

        def EOS(self):
            return self.getToken(GoParser.EOS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = GoParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_eos)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                self.match(GoParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                self.match(GoParser.EOS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1015
                if not this.closingBracket():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.closingBracket()")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[72] = self.channelType_sempred
        self._predicates[79] = self.expression_sempred
        self._predicates[80] = self.primaryExpr_sempred
        self._predicates[105] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def channelType_sempred(self, localctx:ChannelTypeContext, predIndex:int):
            if predIndex == 0:
                return this.isNotReceive()
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def primaryExpr_sempred(self, localctx:PrimaryExprContext, predIndex:int):
            if predIndex == 6:
                return this.isOperand()
         

            if predIndex == 7:
                return this.isConversion()
         

            if predIndex == 8:
                return this.isMethodExpr()
         

    def eos_sempred(self, localctx:EosContext, predIndex:int):
            if predIndex == 9:
                return this.closingBracket()
         




