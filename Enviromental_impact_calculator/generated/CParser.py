# Generated from grammars/C.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,120,1101,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,1,0,1,0,1,0,4,0,178,8,0,11,0,12,0,179,1,0,1,0,
        1,0,1,0,1,0,1,0,3,0,188,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,208,8,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,5,2,220,8,2,10,2,12,2,223,9,2,1,3,1,3,3,
        3,227,8,3,1,3,1,3,1,3,1,4,1,4,3,4,234,8,4,1,4,1,4,1,4,1,4,1,4,1,
        4,3,4,242,8,4,1,4,1,4,3,4,246,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,254,
        8,4,1,4,1,4,1,4,1,4,1,4,5,4,261,8,4,10,4,12,4,264,9,4,1,5,1,5,1,
        5,5,5,269,8,5,10,5,12,5,272,9,5,1,6,5,6,275,8,6,10,6,12,6,278,9,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,291,8,6,1,7,1,
        7,1,8,3,8,296,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,305,8,8,1,9,1,
        9,1,9,5,9,310,8,9,10,9,12,9,313,9,9,1,10,1,10,1,10,5,10,318,8,10,
        10,10,12,10,321,9,10,1,11,1,11,1,11,5,11,326,8,11,10,11,12,11,329,
        9,11,1,12,1,12,1,12,5,12,334,8,12,10,12,12,12,337,9,12,1,13,1,13,
        1,13,5,13,342,8,13,10,13,12,13,345,9,13,1,14,1,14,1,14,5,14,350,
        8,14,10,14,12,14,353,9,14,1,15,1,15,1,15,5,15,358,8,15,10,15,12,
        15,361,9,15,1,16,1,16,1,16,5,16,366,8,16,10,16,12,16,369,9,16,1,
        17,1,17,1,17,5,17,374,8,17,10,17,12,17,377,9,17,1,18,1,18,1,18,5,
        18,382,8,18,10,18,12,18,385,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,
        19,393,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,401,8,20,1,21,1,21,
        1,22,1,22,1,22,5,22,408,8,22,10,22,12,22,411,9,22,1,23,1,23,1,24,
        1,24,3,24,417,8,24,1,24,1,24,1,24,3,24,422,8,24,1,25,4,25,425,8,
        25,11,25,12,25,426,1,26,4,26,430,8,26,11,26,12,26,431,1,27,1,27,
        1,27,1,27,1,27,3,27,439,8,27,1,28,1,28,1,28,5,28,444,8,28,10,28,
        12,28,447,9,28,1,29,1,29,1,29,3,29,452,8,29,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
        483,8,31,1,32,1,32,3,32,487,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,3,32,496,8,32,1,33,1,33,1,34,4,34,501,8,34,11,34,12,34,502,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,513,8,35,1,36,1,36,3,
        36,517,8,36,1,36,3,36,520,8,36,1,37,1,37,1,37,5,37,525,8,37,10,37,
        12,37,528,9,37,1,38,1,38,3,38,532,8,38,1,38,1,38,3,38,536,8,38,1,
        39,1,39,3,39,540,8,39,1,39,1,39,1,39,3,39,545,8,39,1,39,1,39,1,39,
        1,39,3,39,551,8,39,1,40,1,40,1,40,5,40,556,8,40,10,40,12,40,559,
        9,40,1,41,1,41,1,41,3,41,564,8,41,1,42,1,42,1,43,1,43,1,43,1,43,
        1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,
        584,8,45,1,46,1,46,1,46,1,46,3,46,590,8,46,1,46,1,46,1,47,3,47,595,
        8,47,1,47,1,47,5,47,599,8,47,10,47,12,47,602,9,47,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,3,48,621,8,48,1,48,1,48,1,48,3,48,626,8,48,1,48,3,48,629,8,
        48,1,48,1,48,1,48,1,48,1,48,3,48,636,8,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,651,8,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,663,8,48,1,48,5,
        48,666,8,48,10,48,12,48,669,9,48,1,49,1,49,1,50,1,50,1,50,4,50,676,
        8,50,11,50,12,50,677,1,50,1,50,3,50,682,8,50,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,52,3,52,692,8,52,1,52,1,52,3,52,696,8,52,5,52,698,
        8,52,10,52,12,52,701,9,52,1,53,1,53,1,53,3,53,706,8,53,1,53,3,53,
        709,8,53,1,54,1,54,3,54,713,8,54,4,54,715,8,54,11,54,12,54,716,1,
        55,4,55,720,8,55,11,55,12,55,721,1,56,1,56,1,56,3,56,727,8,56,1,
        57,1,57,1,57,5,57,732,8,57,10,57,12,57,735,9,57,1,58,1,58,1,58,1,
        58,1,58,3,58,742,8,58,3,58,744,8,58,1,59,1,59,1,59,5,59,749,8,59,
        10,59,12,59,752,9,59,1,60,1,60,3,60,756,8,60,1,61,1,61,3,61,760,
        8,61,1,61,1,61,5,61,764,8,61,10,61,12,61,767,9,61,3,61,769,8,61,
        1,62,1,62,1,62,1,62,1,62,5,62,776,8,62,10,62,12,62,779,9,62,1,62,
        1,62,3,62,783,8,62,1,62,3,62,786,8,62,1,62,1,62,1,62,1,62,3,62,792,
        8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,3,62,808,8,62,1,62,1,62,5,62,812,8,62,10,62,12,62,815,
        9,62,3,62,817,8,62,1,62,1,62,1,62,3,62,822,8,62,1,62,3,62,825,8,
        62,1,62,1,62,1,62,1,62,1,62,3,62,832,8,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,
        62,851,8,62,1,62,1,62,5,62,855,8,62,10,62,12,62,858,9,62,5,62,860,
        8,62,10,62,12,62,863,9,62,1,63,1,63,1,64,1,64,1,64,1,64,3,64,871,
        8,64,1,64,1,64,3,64,875,8,64,1,65,3,65,878,8,65,1,65,1,65,1,65,3,
        65,883,8,65,1,65,5,65,886,8,65,10,65,12,65,889,9,65,1,66,1,66,1,
        66,1,67,4,67,895,8,67,11,67,12,67,896,1,68,1,68,1,68,1,68,1,68,1,
        68,3,68,905,8,68,1,69,1,69,1,69,1,69,1,69,4,69,912,8,69,11,69,12,
        69,913,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,5,70,931,8,70,10,70,12,70,934,9,70,3,70,936,8,
        70,1,70,1,70,1,70,1,70,5,70,942,8,70,10,70,12,70,945,9,70,3,70,947,
        8,70,5,70,949,8,70,10,70,12,70,952,9,70,1,70,1,70,3,70,956,8,70,
        1,71,1,71,1,71,3,71,961,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,3,71,971,8,71,1,72,1,72,3,72,975,8,72,1,72,1,72,1,73,4,73,980,
        8,73,11,73,12,73,981,1,74,1,74,3,74,986,8,74,1,75,3,75,989,8,75,
        1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1000,8,76,1,76,
        1,76,1,76,1,76,1,76,1,76,3,76,1008,8,76,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,3,77,1030,8,77,1,78,1,78,3,78,1034,8,78,3,78,1036,8,78,
        1,78,1,78,3,78,1040,8,78,1,78,1,78,3,78,1044,8,78,1,79,1,79,3,79,
        1048,8,79,1,80,1,80,1,80,5,80,1053,8,80,10,80,12,80,1056,9,80,1,
        81,1,81,1,81,1,81,1,81,1,81,3,81,1064,8,81,1,81,1,81,3,81,1068,8,
        81,1,81,1,81,1,82,3,82,1073,8,82,1,82,1,82,1,83,4,83,1078,8,83,11,
        83,12,83,1079,1,84,1,84,1,84,3,84,1085,8,84,1,85,3,85,1088,8,85,
        1,85,1,85,3,85,1092,8,85,1,85,1,85,1,86,4,86,1097,8,86,11,86,12,
        86,1098,1,86,0,2,96,124,87,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,0,19,
        1,0,107,108,3,0,44,44,77,77,79,79,2,0,44,44,55,55,5,0,76,76,78,78,
        80,80,83,83,88,89,1,0,80,82,2,0,76,76,78,78,1,0,74,75,1,0,70,73,
        1,0,105,106,1,0,94,104,6,0,20,20,31,31,39,39,45,45,48,48,63,63,1,
        0,4,6,2,0,46,46,49,49,4,0,24,24,40,40,52,52,56,56,2,0,9,9,11,15,
        2,0,64,65,93,93,2,0,80,80,87,87,2,0,16,16,18,18,2,0,19,19,52,52,
        1210,0,207,1,0,0,0,2,209,1,0,0,0,4,216,1,0,0,0,6,226,1,0,0,0,8,245,
        1,0,0,0,10,265,1,0,0,0,12,276,1,0,0,0,14,292,1,0,0,0,16,304,1,0,
        0,0,18,306,1,0,0,0,20,314,1,0,0,0,22,322,1,0,0,0,24,330,1,0,0,0,
        26,338,1,0,0,0,28,346,1,0,0,0,30,354,1,0,0,0,32,362,1,0,0,0,34,370,
        1,0,0,0,36,378,1,0,0,0,38,386,1,0,0,0,40,400,1,0,0,0,42,402,1,0,
        0,0,44,404,1,0,0,0,46,412,1,0,0,0,48,421,1,0,0,0,50,424,1,0,0,0,
        52,429,1,0,0,0,54,438,1,0,0,0,56,440,1,0,0,0,58,448,1,0,0,0,60,453,
        1,0,0,0,62,482,1,0,0,0,64,495,1,0,0,0,66,497,1,0,0,0,68,500,1,0,
        0,0,70,512,1,0,0,0,72,516,1,0,0,0,74,521,1,0,0,0,76,535,1,0,0,0,
        78,550,1,0,0,0,80,552,1,0,0,0,82,560,1,0,0,0,84,565,1,0,0,0,86,567,
        1,0,0,0,88,572,1,0,0,0,90,583,1,0,0,0,92,585,1,0,0,0,94,594,1,0,
        0,0,96,620,1,0,0,0,98,670,1,0,0,0,100,681,1,0,0,0,102,683,1,0,0,
        0,104,691,1,0,0,0,106,702,1,0,0,0,108,714,1,0,0,0,110,719,1,0,0,
        0,112,723,1,0,0,0,114,728,1,0,0,0,116,743,1,0,0,0,118,745,1,0,0,
        0,120,753,1,0,0,0,122,768,1,0,0,0,124,816,1,0,0,0,126,864,1,0,0,
        0,128,874,1,0,0,0,130,877,1,0,0,0,132,890,1,0,0,0,134,894,1,0,0,
        0,136,904,1,0,0,0,138,906,1,0,0,0,140,955,1,0,0,0,142,970,1,0,0,
        0,144,972,1,0,0,0,146,979,1,0,0,0,148,985,1,0,0,0,150,988,1,0,0,
        0,152,1007,1,0,0,0,154,1029,1,0,0,0,156,1035,1,0,0,0,158,1045,1,
        0,0,0,160,1049,1,0,0,0,162,1067,1,0,0,0,164,1072,1,0,0,0,166,1077,
        1,0,0,0,168,1084,1,0,0,0,170,1087,1,0,0,0,172,1096,1,0,0,0,174,208,
        5,110,0,0,175,208,5,111,0,0,176,178,5,113,0,0,177,176,1,0,0,0,178,
        179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,208,1,0,0,0,181,
        182,5,64,0,0,182,183,3,44,22,0,183,184,5,65,0,0,184,208,1,0,0,0,
        185,208,3,2,1,0,186,188,5,1,0,0,187,186,1,0,0,0,187,188,1,0,0,0,
        188,189,1,0,0,0,189,190,5,64,0,0,190,191,3,144,72,0,191,192,5,65,
        0,0,192,208,1,0,0,0,193,194,5,2,0,0,194,195,5,64,0,0,195,196,3,12,
        6,0,196,197,5,93,0,0,197,198,3,120,60,0,198,199,5,65,0,0,199,208,
        1,0,0,0,200,201,5,3,0,0,201,202,5,64,0,0,202,203,3,120,60,0,203,
        204,5,93,0,0,204,205,3,12,6,0,205,206,5,65,0,0,206,208,1,0,0,0,207,
        174,1,0,0,0,207,175,1,0,0,0,207,177,1,0,0,0,207,181,1,0,0,0,207,
        185,1,0,0,0,207,187,1,0,0,0,207,193,1,0,0,0,207,200,1,0,0,0,208,
        1,1,0,0,0,209,210,5,59,0,0,210,211,5,64,0,0,211,212,3,40,20,0,212,
        213,5,93,0,0,213,214,3,4,2,0,214,215,5,65,0,0,215,3,1,0,0,0,216,
        221,3,6,3,0,217,218,5,93,0,0,218,220,3,6,3,0,219,217,1,0,0,0,220,
        223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,5,1,0,0,0,223,221,
        1,0,0,0,224,227,3,120,60,0,225,227,5,26,0,0,226,224,1,0,0,0,226,
        225,1,0,0,0,227,228,1,0,0,0,228,229,5,91,0,0,229,230,3,40,20,0,230,
        7,1,0,0,0,231,246,3,0,0,0,232,234,5,1,0,0,233,232,1,0,0,0,233,234,
        1,0,0,0,234,235,1,0,0,0,235,236,5,64,0,0,236,237,3,120,60,0,237,
        238,5,65,0,0,238,239,5,68,0,0,239,241,3,130,65,0,240,242,5,93,0,
        0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,244,5,69,0,
        0,244,246,1,0,0,0,245,231,1,0,0,0,245,233,1,0,0,0,246,262,1,0,0,
        0,247,248,5,66,0,0,248,249,3,44,22,0,249,250,5,67,0,0,250,261,1,
        0,0,0,251,253,5,64,0,0,252,254,3,10,5,0,253,252,1,0,0,0,253,254,
        1,0,0,0,254,255,1,0,0,0,255,261,5,65,0,0,256,257,7,0,0,0,257,261,
        5,110,0,0,258,261,5,77,0,0,259,261,5,79,0,0,260,247,1,0,0,0,260,
        251,1,0,0,0,260,256,1,0,0,0,260,258,1,0,0,0,260,259,1,0,0,0,261,
        264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,9,1,0,0,0,264,262,
        1,0,0,0,265,270,3,40,20,0,266,267,5,93,0,0,267,269,3,40,20,0,268,
        266,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,
        11,1,0,0,0,272,270,1,0,0,0,273,275,7,1,0,0,274,273,1,0,0,0,275,278,
        1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,290,1,0,0,0,278,276,
        1,0,0,0,279,291,3,8,4,0,280,281,3,14,7,0,281,282,3,16,8,0,282,291,
        1,0,0,0,283,284,7,2,0,0,284,285,5,64,0,0,285,286,3,120,60,0,286,
        287,5,65,0,0,287,291,1,0,0,0,288,289,5,85,0,0,289,291,5,110,0,0,
        290,279,1,0,0,0,290,280,1,0,0,0,290,283,1,0,0,0,290,288,1,0,0,0,
        291,13,1,0,0,0,292,293,7,3,0,0,293,15,1,0,0,0,294,296,5,1,0,0,295,
        294,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,5,64,0,0,298,
        299,3,120,60,0,299,300,5,65,0,0,300,301,3,16,8,0,301,305,1,0,0,0,
        302,305,3,12,6,0,303,305,5,112,0,0,304,295,1,0,0,0,304,302,1,0,0,
        0,304,303,1,0,0,0,305,17,1,0,0,0,306,311,3,16,8,0,307,308,7,4,0,
        0,308,310,3,16,8,0,309,307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,
        0,311,312,1,0,0,0,312,19,1,0,0,0,313,311,1,0,0,0,314,319,3,18,9,
        0,315,316,7,5,0,0,316,318,3,18,9,0,317,315,1,0,0,0,318,321,1,0,0,
        0,319,317,1,0,0,0,319,320,1,0,0,0,320,21,1,0,0,0,321,319,1,0,0,0,
        322,327,3,20,10,0,323,324,7,6,0,0,324,326,3,20,10,0,325,323,1,0,
        0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,23,1,0,0,
        0,329,327,1,0,0,0,330,335,3,22,11,0,331,332,7,7,0,0,332,334,3,22,
        11,0,333,331,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,
        0,0,336,25,1,0,0,0,337,335,1,0,0,0,338,343,3,24,12,0,339,340,7,8,
        0,0,340,342,3,24,12,0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,
        0,0,0,343,344,1,0,0,0,344,27,1,0,0,0,345,343,1,0,0,0,346,351,3,26,
        13,0,347,348,5,83,0,0,348,350,3,26,13,0,349,347,1,0,0,0,350,353,
        1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,29,1,0,0,0,353,351,1,
        0,0,0,354,359,3,28,14,0,355,356,5,87,0,0,356,358,3,28,14,0,357,355,
        1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,31,1,
        0,0,0,361,359,1,0,0,0,362,367,3,30,15,0,363,364,5,84,0,0,364,366,
        3,30,15,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,
        1,0,0,0,368,33,1,0,0,0,369,367,1,0,0,0,370,375,3,32,16,0,371,372,
        5,85,0,0,372,374,3,32,16,0,373,371,1,0,0,0,374,377,1,0,0,0,375,373,
        1,0,0,0,375,376,1,0,0,0,376,35,1,0,0,0,377,375,1,0,0,0,378,383,3,
        34,17,0,379,380,5,86,0,0,380,382,3,34,17,0,381,379,1,0,0,0,382,385,
        1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,37,1,0,0,0,385,383,1,
        0,0,0,386,392,3,36,18,0,387,388,5,90,0,0,388,389,3,44,22,0,389,390,
        5,91,0,0,390,391,3,38,19,0,391,393,1,0,0,0,392,387,1,0,0,0,392,393,
        1,0,0,0,393,39,1,0,0,0,394,401,3,38,19,0,395,396,3,12,6,0,396,397,
        3,42,21,0,397,398,3,40,20,0,398,401,1,0,0,0,399,401,5,112,0,0,400,
        394,1,0,0,0,400,395,1,0,0,0,400,399,1,0,0,0,401,41,1,0,0,0,402,403,
        7,9,0,0,403,43,1,0,0,0,404,409,3,40,20,0,405,406,5,93,0,0,406,408,
        3,40,20,0,407,405,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,
        1,0,0,0,410,45,1,0,0,0,411,409,1,0,0,0,412,413,3,38,19,0,413,47,
        1,0,0,0,414,416,3,50,25,0,415,417,3,56,28,0,416,415,1,0,0,0,416,
        417,1,0,0,0,417,418,1,0,0,0,418,419,5,92,0,0,419,422,1,0,0,0,420,
        422,3,138,69,0,421,414,1,0,0,0,421,420,1,0,0,0,422,49,1,0,0,0,423,
        425,3,54,27,0,424,423,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,
        427,1,0,0,0,427,51,1,0,0,0,428,430,3,54,27,0,429,428,1,0,0,0,430,
        431,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,53,1,0,0,0,433,439,
        3,60,30,0,434,439,3,62,31,0,435,439,3,88,44,0,436,439,3,90,45,0,
        437,439,3,92,46,0,438,433,1,0,0,0,438,434,1,0,0,0,438,435,1,0,0,
        0,438,436,1,0,0,0,438,437,1,0,0,0,439,55,1,0,0,0,440,445,3,58,29,
        0,441,442,5,93,0,0,442,444,3,58,29,0,443,441,1,0,0,0,444,447,1,0,
        0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,57,1,0,0,0,447,445,1,0,0,
        0,448,451,3,94,47,0,449,450,5,94,0,0,450,452,3,128,64,0,451,449,
        1,0,0,0,451,452,1,0,0,0,452,59,1,0,0,0,453,454,7,10,0,0,454,61,1,
        0,0,0,455,483,5,51,0,0,456,483,5,23,0,0,457,483,5,42,0,0,458,483,
        5,37,0,0,459,483,5,38,0,0,460,483,5,32,0,0,461,483,5,28,0,0,462,
        483,5,43,0,0,463,483,5,50,0,0,464,483,5,57,0,0,465,483,5,58,0,0,
        466,483,5,4,0,0,467,483,5,5,0,0,468,483,5,6,0,0,469,470,5,1,0,0,
        470,471,5,64,0,0,471,472,7,11,0,0,472,483,5,65,0,0,473,483,3,86,
        43,0,474,483,3,64,32,0,475,483,3,78,39,0,476,483,3,126,63,0,477,
        478,5,7,0,0,478,479,5,64,0,0,479,480,3,46,23,0,480,481,5,65,0,0,
        481,483,1,0,0,0,482,455,1,0,0,0,482,456,1,0,0,0,482,457,1,0,0,0,
        482,458,1,0,0,0,482,459,1,0,0,0,482,460,1,0,0,0,482,461,1,0,0,0,
        482,462,1,0,0,0,482,463,1,0,0,0,482,464,1,0,0,0,482,465,1,0,0,0,
        482,466,1,0,0,0,482,467,1,0,0,0,482,468,1,0,0,0,482,469,1,0,0,0,
        482,473,1,0,0,0,482,474,1,0,0,0,482,475,1,0,0,0,482,476,1,0,0,0,
        482,477,1,0,0,0,483,63,1,0,0,0,484,486,3,66,33,0,485,487,5,110,0,
        0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,489,5,68,0,
        0,489,490,3,68,34,0,490,491,5,69,0,0,491,496,1,0,0,0,492,493,3,66,
        33,0,493,494,5,110,0,0,494,496,1,0,0,0,495,484,1,0,0,0,495,492,1,
        0,0,0,496,65,1,0,0,0,497,498,7,12,0,0,498,67,1,0,0,0,499,501,3,70,
        35,0,500,499,1,0,0,0,501,502,1,0,0,0,502,500,1,0,0,0,502,503,1,0,
        0,0,503,69,1,0,0,0,504,505,3,72,36,0,505,506,3,74,37,0,506,507,5,
        92,0,0,507,513,1,0,0,0,508,509,3,72,36,0,509,510,5,92,0,0,510,513,
        1,0,0,0,511,513,3,138,69,0,512,504,1,0,0,0,512,508,1,0,0,0,512,511,
        1,0,0,0,513,71,1,0,0,0,514,517,3,62,31,0,515,517,3,88,44,0,516,514,
        1,0,0,0,516,515,1,0,0,0,517,519,1,0,0,0,518,520,3,72,36,0,519,518,
        1,0,0,0,519,520,1,0,0,0,520,73,1,0,0,0,521,526,3,76,38,0,522,523,
        5,93,0,0,523,525,3,76,38,0,524,522,1,0,0,0,525,528,1,0,0,0,526,524,
        1,0,0,0,526,527,1,0,0,0,527,75,1,0,0,0,528,526,1,0,0,0,529,536,3,
        94,47,0,530,532,3,94,47,0,531,530,1,0,0,0,531,532,1,0,0,0,532,533,
        1,0,0,0,533,534,5,91,0,0,534,536,3,46,23,0,535,529,1,0,0,0,535,531,
        1,0,0,0,536,77,1,0,0,0,537,539,5,30,0,0,538,540,5,110,0,0,539,538,
        1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,68,0,0,542,544,
        3,80,40,0,543,545,5,93,0,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,
        1,0,0,0,546,547,5,69,0,0,547,551,1,0,0,0,548,549,5,30,0,0,549,551,
        5,110,0,0,550,537,1,0,0,0,550,548,1,0,0,0,551,79,1,0,0,0,552,557,
        3,82,41,0,553,554,5,93,0,0,554,556,3,82,41,0,555,553,1,0,0,0,556,
        559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,81,1,0,0,0,559,557,
        1,0,0,0,560,563,3,84,42,0,561,562,5,94,0,0,562,564,3,46,23,0,563,
        561,1,0,0,0,563,564,1,0,0,0,564,83,1,0,0,0,565,566,5,110,0,0,566,
        85,1,0,0,0,567,568,5,56,0,0,568,569,5,64,0,0,569,570,3,120,60,0,
        570,571,5,65,0,0,571,87,1,0,0,0,572,573,7,13,0,0,573,89,1,0,0,0,
        574,584,5,36,0,0,575,584,5,61,0,0,576,584,5,8,0,0,577,584,5,9,0,
        0,578,584,3,102,51,0,579,580,5,10,0,0,580,581,5,64,0,0,581,582,5,
        110,0,0,582,584,5,65,0,0,583,574,1,0,0,0,583,575,1,0,0,0,583,576,
        1,0,0,0,583,577,1,0,0,0,583,578,1,0,0,0,583,579,1,0,0,0,584,91,1,
        0,0,0,585,586,5,54,0,0,586,589,5,64,0,0,587,590,3,120,60,0,588,590,
        3,46,23,0,589,587,1,0,0,0,589,588,1,0,0,0,590,591,1,0,0,0,591,592,
        5,65,0,0,592,93,1,0,0,0,593,595,3,108,54,0,594,593,1,0,0,0,594,595,
        1,0,0,0,595,596,1,0,0,0,596,600,3,96,48,0,597,599,3,100,50,0,598,
        597,1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,
        95,1,0,0,0,602,600,1,0,0,0,603,604,6,48,-1,0,604,621,5,110,0,0,605,
        606,5,64,0,0,606,607,3,94,47,0,607,608,5,65,0,0,608,621,1,0,0,0,
        609,610,5,110,0,0,610,611,5,91,0,0,611,621,5,112,0,0,612,613,3,98,
        49,0,613,614,5,110,0,0,614,621,1,0,0,0,615,616,5,64,0,0,616,617,
        3,98,49,0,617,618,3,94,47,0,618,619,5,65,0,0,619,621,1,0,0,0,620,
        603,1,0,0,0,620,605,1,0,0,0,620,609,1,0,0,0,620,612,1,0,0,0,620,
        615,1,0,0,0,621,667,1,0,0,0,622,623,10,9,0,0,623,625,5,66,0,0,624,
        626,3,110,55,0,625,624,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,
        629,3,40,20,0,628,627,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,
        666,5,67,0,0,631,632,10,8,0,0,632,633,5,66,0,0,633,635,5,45,0,0,
        634,636,3,110,55,0,635,634,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,
        0,637,638,3,40,20,0,638,639,5,67,0,0,639,666,1,0,0,0,640,641,10,
        7,0,0,641,642,5,66,0,0,642,643,3,110,55,0,643,644,5,45,0,0,644,645,
        3,40,20,0,645,646,5,67,0,0,646,666,1,0,0,0,647,648,10,6,0,0,648,
        650,5,66,0,0,649,651,3,110,55,0,650,649,1,0,0,0,650,651,1,0,0,0,
        651,652,1,0,0,0,652,653,5,80,0,0,653,666,5,67,0,0,654,655,10,5,0,
        0,655,656,5,64,0,0,656,657,3,112,56,0,657,658,5,65,0,0,658,666,1,
        0,0,0,659,660,10,4,0,0,660,662,5,64,0,0,661,663,3,118,59,0,662,661,
        1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,666,5,65,0,0,665,622,
        1,0,0,0,665,631,1,0,0,0,665,640,1,0,0,0,665,647,1,0,0,0,665,654,
        1,0,0,0,665,659,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,
        1,0,0,0,668,97,1,0,0,0,669,667,1,0,0,0,670,671,7,14,0,0,671,99,1,
        0,0,0,672,673,5,16,0,0,673,675,5,64,0,0,674,676,5,113,0,0,675,674,
        1,0,0,0,676,677,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,679,
        1,0,0,0,679,682,5,65,0,0,680,682,3,102,51,0,681,672,1,0,0,0,681,
        680,1,0,0,0,682,101,1,0,0,0,683,684,5,17,0,0,684,685,5,64,0,0,685,
        686,5,64,0,0,686,687,3,104,52,0,687,688,5,65,0,0,688,689,5,65,0,
        0,689,103,1,0,0,0,690,692,3,106,53,0,691,690,1,0,0,0,691,692,1,0,
        0,0,692,699,1,0,0,0,693,695,5,93,0,0,694,696,3,106,53,0,695,694,
        1,0,0,0,695,696,1,0,0,0,696,698,1,0,0,0,697,693,1,0,0,0,698,701,
        1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,105,1,0,0,0,701,699,
        1,0,0,0,702,708,8,15,0,0,703,705,5,64,0,0,704,706,3,10,5,0,705,704,
        1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,709,5,65,0,0,708,703,
        1,0,0,0,708,709,1,0,0,0,709,107,1,0,0,0,710,712,7,16,0,0,711,713,
        3,110,55,0,712,711,1,0,0,0,712,713,1,0,0,0,713,715,1,0,0,0,714,710,
        1,0,0,0,715,716,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,717,109,
        1,0,0,0,718,720,3,88,44,0,719,718,1,0,0,0,720,721,1,0,0,0,721,719,
        1,0,0,0,721,722,1,0,0,0,722,111,1,0,0,0,723,726,3,114,57,0,724,725,
        5,93,0,0,725,727,5,109,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,113,
        1,0,0,0,728,733,3,116,58,0,729,730,5,93,0,0,730,732,3,116,58,0,731,
        729,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,
        115,1,0,0,0,735,733,1,0,0,0,736,737,3,50,25,0,737,738,3,94,47,0,
        738,744,1,0,0,0,739,741,3,52,26,0,740,742,3,122,61,0,741,740,1,0,
        0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,736,1,0,0,0,743,739,1,0,
        0,0,744,117,1,0,0,0,745,750,5,110,0,0,746,747,5,93,0,0,747,749,5,
        110,0,0,748,746,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,751,
        1,0,0,0,751,119,1,0,0,0,752,750,1,0,0,0,753,755,3,72,36,0,754,756,
        3,122,61,0,755,754,1,0,0,0,755,756,1,0,0,0,756,121,1,0,0,0,757,769,
        3,108,54,0,758,760,3,108,54,0,759,758,1,0,0,0,759,760,1,0,0,0,760,
        761,1,0,0,0,761,765,3,124,62,0,762,764,3,100,50,0,763,762,1,0,0,
        0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,769,1,0,0,
        0,767,765,1,0,0,0,768,757,1,0,0,0,768,759,1,0,0,0,769,123,1,0,0,
        0,770,771,6,62,-1,0,771,772,5,64,0,0,772,773,3,122,61,0,773,777,
        5,65,0,0,774,776,3,100,50,0,775,774,1,0,0,0,776,779,1,0,0,0,777,
        775,1,0,0,0,777,778,1,0,0,0,778,817,1,0,0,0,779,777,1,0,0,0,780,
        782,5,66,0,0,781,783,3,110,55,0,782,781,1,0,0,0,782,783,1,0,0,0,
        783,785,1,0,0,0,784,786,3,40,20,0,785,784,1,0,0,0,785,786,1,0,0,
        0,786,787,1,0,0,0,787,817,5,67,0,0,788,789,5,66,0,0,789,791,5,45,
        0,0,790,792,3,110,55,0,791,790,1,0,0,0,791,792,1,0,0,0,792,793,1,
        0,0,0,793,794,3,40,20,0,794,795,5,67,0,0,795,817,1,0,0,0,796,797,
        5,66,0,0,797,798,3,110,55,0,798,799,5,45,0,0,799,800,3,40,20,0,800,
        801,5,67,0,0,801,817,1,0,0,0,802,803,5,66,0,0,803,804,5,80,0,0,804,
        817,5,67,0,0,805,807,5,64,0,0,806,808,3,112,56,0,807,806,1,0,0,0,
        807,808,1,0,0,0,808,809,1,0,0,0,809,813,5,65,0,0,810,812,3,100,50,
        0,811,810,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,814,1,0,0,
        0,814,817,1,0,0,0,815,813,1,0,0,0,816,770,1,0,0,0,816,780,1,0,0,
        0,816,788,1,0,0,0,816,796,1,0,0,0,816,802,1,0,0,0,816,805,1,0,0,
        0,817,861,1,0,0,0,818,819,10,5,0,0,819,821,5,66,0,0,820,822,3,110,
        55,0,821,820,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,825,3,40,
        20,0,824,823,1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,0,826,860,5,67,
        0,0,827,828,10,4,0,0,828,829,5,66,0,0,829,831,5,45,0,0,830,832,3,
        110,55,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,0,0,0,833,834,
        3,40,20,0,834,835,5,67,0,0,835,860,1,0,0,0,836,837,10,3,0,0,837,
        838,5,66,0,0,838,839,3,110,55,0,839,840,5,45,0,0,840,841,3,40,20,
        0,841,842,5,67,0,0,842,860,1,0,0,0,843,844,10,2,0,0,844,845,5,66,
        0,0,845,846,5,80,0,0,846,860,5,67,0,0,847,848,10,1,0,0,848,850,5,
        64,0,0,849,851,3,112,56,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,
        1,0,0,0,852,856,5,65,0,0,853,855,3,100,50,0,854,853,1,0,0,0,855,
        858,1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,860,1,0,0,0,858,
        856,1,0,0,0,859,818,1,0,0,0,859,827,1,0,0,0,859,836,1,0,0,0,859,
        843,1,0,0,0,859,847,1,0,0,0,860,863,1,0,0,0,861,859,1,0,0,0,861,
        862,1,0,0,0,862,125,1,0,0,0,863,861,1,0,0,0,864,865,5,110,0,0,865,
        127,1,0,0,0,866,875,3,40,20,0,867,868,5,68,0,0,868,870,3,130,65,
        0,869,871,5,93,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,
        0,872,873,5,69,0,0,873,875,1,0,0,0,874,866,1,0,0,0,874,867,1,0,0,
        0,875,129,1,0,0,0,876,878,3,132,66,0,877,876,1,0,0,0,877,878,1,0,
        0,0,878,879,1,0,0,0,879,887,3,128,64,0,880,882,5,93,0,0,881,883,
        3,132,66,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,886,
        3,128,64,0,885,880,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,
        1,0,0,0,888,131,1,0,0,0,889,887,1,0,0,0,890,891,3,134,67,0,891,892,
        5,94,0,0,892,133,1,0,0,0,893,895,3,136,68,0,894,893,1,0,0,0,895,
        896,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,135,1,0,0,0,898,
        899,5,66,0,0,899,900,3,46,23,0,900,901,5,67,0,0,901,905,1,0,0,0,
        902,903,5,108,0,0,903,905,5,110,0,0,904,898,1,0,0,0,904,902,1,0,
        0,0,905,137,1,0,0,0,906,907,5,62,0,0,907,908,5,64,0,0,908,909,3,
        46,23,0,909,911,5,93,0,0,910,912,5,113,0,0,911,910,1,0,0,0,912,913,
        1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,
        5,65,0,0,916,917,5,92,0,0,917,139,1,0,0,0,918,956,3,142,71,0,919,
        956,3,144,72,0,920,956,3,150,75,0,921,956,3,152,76,0,922,956,3,154,
        77,0,923,956,3,162,81,0,924,925,7,17,0,0,925,926,7,18,0,0,926,935,
        5,64,0,0,927,932,3,36,18,0,928,929,5,93,0,0,929,931,3,36,18,0,930,
        928,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,
        936,1,0,0,0,934,932,1,0,0,0,935,927,1,0,0,0,935,936,1,0,0,0,936,
        950,1,0,0,0,937,946,5,91,0,0,938,943,3,36,18,0,939,940,5,93,0,0,
        940,942,3,36,18,0,941,939,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,
        0,943,944,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,946,938,1,0,0,
        0,946,947,1,0,0,0,947,949,1,0,0,0,948,937,1,0,0,0,949,952,1,0,0,
        0,950,948,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,950,1,0,0,
        0,953,954,5,65,0,0,954,956,5,92,0,0,955,918,1,0,0,0,955,919,1,0,
        0,0,955,920,1,0,0,0,955,921,1,0,0,0,955,922,1,0,0,0,955,923,1,0,
        0,0,955,924,1,0,0,0,956,141,1,0,0,0,957,958,5,110,0,0,958,960,5,
        91,0,0,959,961,3,140,70,0,960,959,1,0,0,0,960,961,1,0,0,0,961,971,
        1,0,0,0,962,963,5,22,0,0,963,964,3,46,23,0,964,965,5,91,0,0,965,
        966,3,140,70,0,966,971,1,0,0,0,967,968,5,26,0,0,968,969,5,91,0,0,
        969,971,3,140,70,0,970,957,1,0,0,0,970,962,1,0,0,0,970,967,1,0,0,
        0,971,143,1,0,0,0,972,974,5,68,0,0,973,975,3,146,73,0,974,973,1,
        0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,977,5,69,0,0,977,145,1,
        0,0,0,978,980,3,148,74,0,979,978,1,0,0,0,980,981,1,0,0,0,981,979,
        1,0,0,0,981,982,1,0,0,0,982,147,1,0,0,0,983,986,3,140,70,0,984,986,
        3,48,24,0,985,983,1,0,0,0,985,984,1,0,0,0,986,149,1,0,0,0,987,989,
        3,44,22,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,991,
        5,92,0,0,991,151,1,0,0,0,992,993,5,35,0,0,993,994,5,64,0,0,994,995,
        3,44,22,0,995,996,5,65,0,0,996,999,3,140,70,0,997,998,5,29,0,0,998,
        1000,3,140,70,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,1008,1,0,0,
        0,1001,1002,5,47,0,0,1002,1003,5,64,0,0,1003,1004,3,44,22,0,1004,
        1005,5,65,0,0,1005,1006,3,140,70,0,1006,1008,1,0,0,0,1007,992,1,
        0,0,0,1007,1001,1,0,0,0,1008,153,1,0,0,0,1009,1010,5,53,0,0,1010,
        1011,5,64,0,0,1011,1012,3,44,22,0,1012,1013,5,65,0,0,1013,1014,3,
        140,70,0,1014,1030,1,0,0,0,1015,1016,5,27,0,0,1016,1017,3,140,70,
        0,1017,1018,5,53,0,0,1018,1019,5,64,0,0,1019,1020,3,44,22,0,1020,
        1021,5,65,0,0,1021,1022,5,92,0,0,1022,1030,1,0,0,0,1023,1024,5,33,
        0,0,1024,1025,5,64,0,0,1025,1026,3,156,78,0,1026,1027,5,65,0,0,1027,
        1028,3,140,70,0,1028,1030,1,0,0,0,1029,1009,1,0,0,0,1029,1015,1,
        0,0,0,1029,1023,1,0,0,0,1030,155,1,0,0,0,1031,1036,3,158,79,0,1032,
        1034,3,44,22,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,
        0,0,1035,1031,1,0,0,0,1035,1033,1,0,0,0,1036,1037,1,0,0,0,1037,1039,
        5,92,0,0,1038,1040,3,160,80,0,1039,1038,1,0,0,0,1039,1040,1,0,0,
        0,1040,1041,1,0,0,0,1041,1043,5,92,0,0,1042,1044,3,160,80,0,1043,
        1042,1,0,0,0,1043,1044,1,0,0,0,1044,157,1,0,0,0,1045,1047,3,50,25,
        0,1046,1048,3,56,28,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,159,
        1,0,0,0,1049,1054,3,40,20,0,1050,1051,5,93,0,0,1051,1053,3,40,20,
        0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,
        1,0,0,0,1055,161,1,0,0,0,1056,1054,1,0,0,0,1057,1058,5,34,0,0,1058,
        1068,5,110,0,0,1059,1068,5,25,0,0,1060,1068,5,21,0,0,1061,1063,5,
        41,0,0,1062,1064,3,44,22,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,
        1068,1,0,0,0,1065,1066,5,34,0,0,1066,1068,3,12,6,0,1067,1057,1,0,
        0,0,1067,1059,1,0,0,0,1067,1060,1,0,0,0,1067,1061,1,0,0,0,1067,1065,
        1,0,0,0,1068,1069,1,0,0,0,1069,1070,5,92,0,0,1070,163,1,0,0,0,1071,
        1073,3,166,83,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,
        0,0,0,1074,1075,5,0,0,1,1075,165,1,0,0,0,1076,1078,3,168,84,0,1077,
        1076,1,0,0,0,1078,1079,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,
        0,1080,167,1,0,0,0,1081,1085,3,170,85,0,1082,1085,3,48,24,0,1083,
        1085,5,92,0,0,1084,1081,1,0,0,0,1084,1082,1,0,0,0,1084,1083,1,0,
        0,0,1085,169,1,0,0,0,1086,1088,3,50,25,0,1087,1086,1,0,0,0,1087,
        1088,1,0,0,0,1088,1089,1,0,0,0,1089,1091,3,94,47,0,1090,1092,3,172,
        86,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1093,1,0,0,0,1093,
        1094,3,144,72,0,1094,171,1,0,0,0,1095,1097,3,48,24,0,1096,1095,1,
        0,0,0,1097,1098,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,
        173,1,0,0,0,133,179,187,207,221,226,233,241,245,253,260,262,270,
        276,290,295,304,311,319,327,335,343,351,359,367,375,383,392,400,
        409,416,421,426,431,438,445,451,482,486,495,502,512,516,519,526,
        531,535,539,544,550,557,563,583,589,594,600,620,625,628,635,650,
        662,665,667,677,681,691,695,699,705,708,712,716,721,726,733,741,
        743,750,755,759,765,768,777,782,785,791,807,813,816,821,824,831,
        850,856,859,861,870,874,877,882,887,896,904,913,932,935,943,946,
        950,955,960,970,974,981,985,988,999,1007,1029,1033,1035,1039,1043,
        1047,1054,1063,1067,1072,1079,1084,1087,1091,1098
    ]

class CParser ( Parser ):

    grammarFileName = "C.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__cdecl'", "'__clrcall'", "'__fastcall'", "'__thiscall'", 
                     "'__vectorcall'", "'__asm'", "'__attribute__'", "'__asm__'", 
                     "'__volatile__'", "'auto'", "'break'", "'case'", "'char'", 
                     "'const'", "'continue'", "'default'", "'do'", "'double'", 
                     "'else'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'struct'", "'switch'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", 
                     "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'", 
                     "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
                     "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Auto", "Break", "Case", "Char", "Const", "Continue", 
                      "Default", "Do", "Double", "Else", "Enum", "Extern", 
                      "Float", "For", "Goto", "If", "Inline", "Int", "Long", 
                      "Register", "Restrict", "Return", "Short", "Signed", 
                      "Sizeof", "Static", "Struct", "Switch", "Typedef", 
                      "Union", "Unsigned", "Void", "Volatile", "While", 
                      "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
                      "Generic", "Imaginary", "Noreturn", "StaticAssert", 
                      "ThreadLocal", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Less", 
                      "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
                      "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
                      "Caret", "Not", "Tilde", "Question", "Colon", "Semi", 
                      "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "MultiLineMacro", 
                      "Directive", "AsmBlock", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postfixExpression = 4
    RULE_argumentExpressionList = 5
    RULE_unaryExpression = 6
    RULE_unaryOperator = 7
    RULE_castExpression = 8
    RULE_multiplicativeExpression = 9
    RULE_additiveExpression = 10
    RULE_shiftExpression = 11
    RULE_relationalExpression = 12
    RULE_equalityExpression = 13
    RULE_andExpression = 14
    RULE_exclusiveOrExpression = 15
    RULE_inclusiveOrExpression = 16
    RULE_logicalAndExpression = 17
    RULE_logicalOrExpression = 18
    RULE_conditionalExpression = 19
    RULE_assignmentExpression = 20
    RULE_assignmentOperator = 21
    RULE_expression = 22
    RULE_constantExpression = 23
    RULE_declaration = 24
    RULE_declarationSpecifiers = 25
    RULE_declarationSpecifiers2 = 26
    RULE_declarationSpecifier = 27
    RULE_initDeclaratorList = 28
    RULE_initDeclarator = 29
    RULE_storageClassSpecifier = 30
    RULE_typeSpecifier = 31
    RULE_structOrUnionSpecifier = 32
    RULE_structOrUnion = 33
    RULE_structDeclarationList = 34
    RULE_structDeclaration = 35
    RULE_specifierQualifierList = 36
    RULE_structDeclaratorList = 37
    RULE_structDeclarator = 38
    RULE_enumSpecifier = 39
    RULE_enumeratorList = 40
    RULE_enumerator = 41
    RULE_enumerationConstant = 42
    RULE_atomicTypeSpecifier = 43
    RULE_typeQualifier = 44
    RULE_functionSpecifier = 45
    RULE_alignmentSpecifier = 46
    RULE_declarator = 47
    RULE_directDeclarator = 48
    RULE_vcSpecificModifer = 49
    RULE_gccDeclaratorExtension = 50
    RULE_gccAttributeSpecifier = 51
    RULE_gccAttributeList = 52
    RULE_gccAttribute = 53
    RULE_pointer = 54
    RULE_typeQualifierList = 55
    RULE_parameterTypeList = 56
    RULE_parameterList = 57
    RULE_parameterDeclaration = 58
    RULE_identifierList = 59
    RULE_typeName = 60
    RULE_abstractDeclarator = 61
    RULE_directAbstractDeclarator = 62
    RULE_typedefName = 63
    RULE_initializer = 64
    RULE_initializerList = 65
    RULE_designation = 66
    RULE_designatorList = 67
    RULE_designator = 68
    RULE_staticAssertDeclaration = 69
    RULE_statement = 70
    RULE_labeledStatement = 71
    RULE_compoundStatement = 72
    RULE_blockItemList = 73
    RULE_blockItem = 74
    RULE_expressionStatement = 75
    RULE_selectionStatement = 76
    RULE_iterationStatement = 77
    RULE_forCondition = 78
    RULE_forDeclaration = 79
    RULE_forExpression = 80
    RULE_jumpStatement = 81
    RULE_compilationUnit = 82
    RULE_translationUnit = 83
    RULE_externalDeclaration = 84
    RULE_functionDefinition = 85
    RULE_declarationList = 86

    ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "vcSpecificModifer", "gccDeclaratorExtension", "gccAttributeSpecifier", 
                   "gccAttributeList", "gccAttribute", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    Auto=20
    Break=21
    Case=22
    Char=23
    Const=24
    Continue=25
    Default=26
    Do=27
    Double=28
    Else=29
    Enum=30
    Extern=31
    Float=32
    For=33
    Goto=34
    If=35
    Inline=36
    Int=37
    Long=38
    Register=39
    Restrict=40
    Return=41
    Short=42
    Signed=43
    Sizeof=44
    Static=45
    Struct=46
    Switch=47
    Typedef=48
    Union=49
    Unsigned=50
    Void=51
    Volatile=52
    While=53
    Alignas=54
    Alignof=55
    Atomic=56
    Bool=57
    Complex=58
    Generic=59
    Imaginary=60
    Noreturn=61
    StaticAssert=62
    ThreadLocal=63
    LeftParen=64
    RightParen=65
    LeftBracket=66
    RightBracket=67
    LeftBrace=68
    RightBrace=69
    Less=70
    LessEqual=71
    Greater=72
    GreaterEqual=73
    LeftShift=74
    RightShift=75
    Plus=76
    PlusPlus=77
    Minus=78
    MinusMinus=79
    Star=80
    Div=81
    Mod=82
    And=83
    Or=84
    AndAnd=85
    OrOr=86
    Caret=87
    Not=88
    Tilde=89
    Question=90
    Colon=91
    Semi=92
    Comma=93
    Assign=94
    StarAssign=95
    DivAssign=96
    ModAssign=97
    PlusAssign=98
    MinusAssign=99
    LeftShiftAssign=100
    RightShiftAssign=101
    AndAssign=102
    XorAssign=103
    OrAssign=104
    Equal=105
    NotEqual=106
    Arrow=107
    Dot=108
    Ellipsis=109
    Identifier=110
    Constant=111
    DigitSequence=112
    StringLiteral=113
    MultiLineMacro=114
    Directive=115
    AsmBlock=116
    Whitespace=117
    Newline=118
    BlockComment=119
    LineComment=120

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(CParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.match(CParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 177 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 176
                    self.match(CParser.StringLiteral)
                    self.state = 179 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==113):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 181
                self.match(CParser.LeftParen)
                self.state = 182
                self.expression()
                self.state = 183
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 185
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 186
                    self.match(CParser.T__0)


                self.state = 189
                self.match(CParser.LeftParen)
                self.state = 190
                self.compoundStatement()
                self.state = 191
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 193
                self.match(CParser.T__1)
                self.state = 194
                self.match(CParser.LeftParen)
                self.state = 195
                self.unaryExpression()
                self.state = 196
                self.match(CParser.Comma)
                self.state = 197
                self.typeName()
                self.state = 198
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 200
                self.match(CParser.T__2)
                self.state = 201
                self.match(CParser.LeftParen)
                self.state = 202
                self.typeName()
                self.state = 203
                self.match(CParser.Comma)
                self.state = 204
                self.unaryExpression()
                self.state = 205
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(CParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericSelection

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericSelection" ):
                return visitor.visitGenericSelection(self)
            else:
                return visitor.visitChildren(self)




    def genericSelection(self):

        localctx = CParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(CParser.Generic)
            self.state = 210
            self.match(CParser.LeftParen)
            self.state = 211
            self.assignmentExpression()
            self.state = 212
            self.match(CParser.Comma)
            self.state = 213
            self.genericAssocList()
            self.state = 214
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(CParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_genericAssocList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssocList" ):
                return visitor.visitGenericAssocList(self)
            else:
                return visitor.visitChildren(self)




    def genericAssocList(self):

        localctx = CParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.genericAssociation()
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 217
                self.match(CParser.Comma)
                self.state = 218
                self.genericAssociation()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssociation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssociation" ):
                return visitor.visitGenericAssociation(self)
            else:
                return visitor.visitChildren(self)




    def genericAssociation(self):

        localctx = CParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 5, 6, 7, 23, 24, 28, 30, 32, 37, 38, 40, 42, 43, 46, 49, 50, 51, 52, 56, 57, 58, 110]:
                self.state = 224
                self.typeName()
                pass
            elif token in [26]:
                self.state = 225
                self.match(CParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 228
            self.match(CParser.Colon)
            self.state = 229
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftBracket)
            else:
                return self.getToken(CParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightBracket)
            else:
                return self.getToken(CParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Dot)
            else:
                return self.getToken(CParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Arrow)
            else:
                return self.getToken(CParser.Arrow, i)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = CParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 231
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 232
                    self.match(CParser.T__0)


                self.state = 235
                self.match(CParser.LeftParen)
                self.state = 236
                self.typeName()
                self.state = 237
                self.match(CParser.RightParen)
                self.state = 238
                self.match(CParser.LeftBrace)
                self.state = 239
                self.initializerList()
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 240
                    self.match(CParser.Comma)


                self.state = 243
                self.match(CParser.RightBrace)
                pass


            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 26388279107589) != 0):
                self.state = 260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [66]:
                    self.state = 247
                    self.match(CParser.LeftBracket)
                    self.state = 248
                    self.expression()
                    self.state = 249
                    self.match(CParser.RightBracket)
                    pass
                elif token in [64]:
                    self.state = 251
                    self.match(CParser.LeftParen)
                    self.state = 253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                        self.state = 252
                        self.argumentExpressionList()


                    self.state = 255
                    self.match(CParser.RightParen)
                    pass
                elif token in [107, 108]:
                    self.state = 256
                    _la = self._input.LA(1)
                    if not(_la==107 or _la==108):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 257
                    self.match(CParser.Identifier)
                    pass
                elif token in [77]:
                    self.state = 258
                    self.match(CParser.PlusPlus)
                    pass
                elif token in [79]:
                    self.state = 259
                    self.match(CParser.MinusMinus)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpressionList" ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpressionList(self):

        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.assignmentExpression()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 266
                self.match(CParser.Comma)
                self.state = 267
                self.assignmentExpression()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(CParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(CParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Sizeof)
            else:
                return self.getToken(CParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(CParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 273
                    _la = self._input.LA(1)
                    if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & 42949672961) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 59, 64, 110, 111, 113]:
                self.state = 279
                self.postfixExpression()
                pass
            elif token in [76, 78, 80, 83, 88, 89]:
                self.state = 280
                self.unaryOperator()
                self.state = 281
                self.castExpression()
                pass
            elif token in [44, 55]:
                self.state = 283
                _la = self._input.LA(1)
                if not(_la==44 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 284
                self.match(CParser.LeftParen)
                self.state = 285
                self.typeName()
                self.state = 286
                self.match(CParser.RightParen)
                pass
            elif token in [85]:
                self.state = 288
                self.match(CParser.AndAnd)
                self.state = 289
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CParser.And, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def Plus(self):
            return self.getToken(CParser.Plus, 0)

        def Minus(self):
            return self.getToken(CParser.Minus, 0)

        def Tilde(self):
            return self.getToken(CParser.Tilde, 0)

        def Not(self):
            return self.getToken(CParser.Not, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = CParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            _la = self._input.LA(1)
            if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 12437) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 294
                    self.match(CParser.T__0)


                self.state = 297
                self.match(CParser.LeftParen)
                self.state = 298
                self.typeName()
                self.state = 299
                self.match(CParser.RightParen)
                self.state = 300
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 303
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Div)
            else:
                return self.getToken(CParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Mod)
            else:
                return self.getToken(CParser.Mod, i)

        def getRuleIndex(self):
            return CParser.RULE_multiplicativeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = CParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.castExpression()
            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 7) != 0):
                self.state = 307
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 308
                self.castExpression()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Plus)
            else:
                return self.getToken(CParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Minus)
            else:
                return self.getToken(CParser.Minus, i)

        def getRuleIndex(self):
            return CParser.RULE_additiveExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = CParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.multiplicativeExpression()
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76 or _la==78:
                self.state = 315
                _la = self._input.LA(1)
                if not(_la==76 or _la==78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 316
                self.multiplicativeExpression()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftShift)
            else:
                return self.getToken(CParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightShift)
            else:
                return self.getToken(CParser.RightShift, i)

        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExpression" ):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)




    def shiftExpression(self):

        localctx = CParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.additiveExpression()
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74 or _la==75:
                self.state = 323
                _la = self._input.LA(1)
                if not(_la==74 or _la==75):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 324
                self.additiveExpression()
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Less)
            else:
                return self.getToken(CParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Greater)
            else:
                return self.getToken(CParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LessEqual)
            else:
                return self.getToken(CParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.GreaterEqual)
            else:
                return self.getToken(CParser.GreaterEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = CParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.shiftExpression()
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 15) != 0):
                self.state = 331
                _la = self._input.LA(1)
                if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 332
                self.shiftExpression()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Equal)
            else:
                return self.getToken(CParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.NotEqual)
            else:
                return self.getToken(CParser.NotEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalityExpression(self):

        localctx = CParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.relationalExpression()
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==105 or _la==106:
                self.state = 339
                _la = self._input.LA(1)
                if not(_la==105 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 340
                self.relationalExpression()
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.And)
            else:
                return self.getToken(CParser.And, i)

        def getRuleIndex(self):
            return CParser.RULE_andExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpression" ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def andExpression(self):

        localctx = CParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.equalityExpression()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 347
                self.match(CParser.And)
                self.state = 348
                self.equalityExpression()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def getRuleIndex(self):
            return CParser.RULE_exclusiveOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveOrExpression" ):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def exclusiveOrExpression(self):

        localctx = CParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.andExpression()
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==87:
                self.state = 355
                self.match(CParser.Caret)
                self.state = 356
                self.andExpression()
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Or)
            else:
                return self.getToken(CParser.Or, i)

        def getRuleIndex(self):
            return CParser.RULE_inclusiveOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveOrExpression" ):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def inclusiveOrExpression(self):

        localctx = CParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.exclusiveOrExpression()
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84:
                self.state = 363
                self.match(CParser.Or)
                self.state = 364
                self.exclusiveOrExpression()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.AndAnd)
            else:
                return self.getToken(CParser.AndAnd, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalAndExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = CParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.inclusiveOrExpression()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 371
                self.match(CParser.AndAnd)
                self.state = 372
                self.inclusiveOrExpression()
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.OrOr)
            else:
                return self.getToken(CParser.OrOr, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.logicalAndExpression()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 379
                self.match(CParser.OrOr)
                self.state = 380
                self.logicalAndExpression()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(CParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.logicalOrExpression()
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 387
                self.match(CParser.Question)
                self.state = 388
                self.expression()
                self.state = 389
                self.match(CParser.Colon)
                self.state = 390
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentExpression)
        try:
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.unaryExpression()
                self.state = 396
                self.assignmentOperator()
                self.state = 397
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 399
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CParser.OrAssign, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            _la = self._input.LA(1)
            if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = CParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.assignmentExpression()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 405
                self.match(CParser.Comma)
                self.state = 406
                self.assignmentExpression()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_constantExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = CParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 5, 6, 7, 8, 9, 10, 17, 20, 23, 24, 28, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 45, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 63, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                self.declarationSpecifiers()
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368752631809) != 0):
                    self.state = 415
                    self.initDeclaratorList()


                self.state = 418
                self.match(CParser.Semi)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers" ):
                return visitor.visitDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers(self):

        localctx = CParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 423
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 426 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers2" ):
                return visitor.visitDeclarationSpecifiers2(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers2(self):

        localctx = CParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 428
                self.declarationSpecifier()
                self.state = 431 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -6386264861217519630) != 0) or _la==110):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifier" ):
                return visitor.visitDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarationSpecifier)
        try:
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 436
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 437
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclaratorList" ):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def initDeclaratorList(self):

        localctx = CParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.initDeclarator()
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 441
                self.match(CParser.Comma)
                self.state = 442
                self.initDeclarator()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclarator" ):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.declarator()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 449
                self.match(CParser.Assign)
                self.state = 450
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def Extern(self):
            return self.getToken(CParser.Extern, 0)

        def Static(self):
            return self.getToken(CParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(CParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(CParser.Auto, 0)

        def Register(self):
            return self.getToken(CParser.Register, 0)

        def getRuleIndex(self):
            return CParser.RULE_storageClassSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageClassSpecifier" ):
                return visitor.visitStorageClassSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageClassSpecifier(self):

        localctx = CParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9223054825601630208) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(CParser.Void, 0)

        def Char(self):
            return self.getToken(CParser.Char, 0)

        def Short(self):
            return self.getToken(CParser.Short, 0)

        def Int(self):
            return self.getToken(CParser.Int, 0)

        def Long(self):
            return self.getToken(CParser.Long, 0)

        def Float(self):
            return self.getToken(CParser.Float, 0)

        def Double(self):
            return self.getToken(CParser.Double, 0)

        def Signed(self):
            return self.getToken(CParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(CParser.Bool, 0)

        def Complex(self):
            return self.getToken(CParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(CParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(CParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(CParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifier" ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def typeSpecifier(self):

        localctx = CParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.match(CParser.Void)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.match(CParser.Char)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self.match(CParser.Short)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 4)
                self.state = 458
                self.match(CParser.Int)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 459
                self.match(CParser.Long)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 6)
                self.state = 460
                self.match(CParser.Float)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 7)
                self.state = 461
                self.match(CParser.Double)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 8)
                self.state = 462
                self.match(CParser.Signed)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 9)
                self.state = 463
                self.match(CParser.Unsigned)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 10)
                self.state = 464
                self.match(CParser.Bool)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 11)
                self.state = 465
                self.match(CParser.Complex)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 12)
                self.state = 466
                self.match(CParser.T__3)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 13)
                self.state = 467
                self.match(CParser.T__4)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 14)
                self.state = 468
                self.match(CParser.T__5)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 15)
                self.state = 469
                self.match(CParser.T__0)
                self.state = 470
                self.match(CParser.LeftParen)
                self.state = 471
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 112) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 472
                self.match(CParser.RightParen)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 16)
                self.state = 473
                self.atomicTypeSpecifier()
                pass
            elif token in [46, 49]:
                self.enterOuterAlt(localctx, 17)
                self.state = 474
                self.structOrUnionSpecifier()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 18)
                self.state = 475
                self.enumSpecifier()
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 19)
                self.state = 476
                self.typedefName()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 20)
                self.state = 477
                self.match(CParser.T__6)
                self.state = 478
                self.match(CParser.LeftParen)
                self.state = 479
                self.constantExpression()
                self.state = 480
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(CParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnionSpecifier" ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 484
                self.structOrUnion()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 485
                    self.match(CParser.Identifier)


                self.state = 488
                self.match(CParser.LeftBrace)
                self.state = 489
                self.structDeclarationList()
                self.state = 490
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.structOrUnion()
                self.state = 493
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(CParser.Struct, 0)

        def Union(self):
            return self.getToken(CParser.Union, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnion" ):
                return visitor.visitStructOrUnion(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnion(self):

        localctx = CParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            _la = self._input.LA(1)
            if not(_la==46 or _la==49):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarationList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarationList" ):
                return visitor.visitStructDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarationList(self):

        localctx = CParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 499
                self.structDeclaration()
                self.state = 502 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 5124618506368712946) != 0) or _la==110):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaration" ):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclaration)
        try:
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.specifierQualifierList()
                self.state = 505
                self.structDeclaratorList()
                self.state = 506
                self.match(CParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.specifierQualifierList()
                self.state = 509
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 511
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifierQualifierList" ):
                return visitor.visitSpecifierQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 514
                self.typeSpecifier()
                pass

            elif la_ == 2:
                self.state = 515
                self.typeQualifier()
                pass


            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 518
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaratorList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaratorList" ):
                return visitor.visitStructDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaratorList(self):

        localctx = CParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.structDeclarator()
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 522
                self.match(CParser.Comma)
                self.state = 523
                self.structDeclarator()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarator" ):
                return visitor.visitStructDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368752631809) != 0):
                    self.state = 530
                    self.declarator()


                self.state = 533
                self.match(CParser.Colon)
                self.state = 534
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumSpecifier" ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = CParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 537
                self.match(CParser.Enum)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 538
                    self.match(CParser.Identifier)


                self.state = 541
                self.match(CParser.LeftBrace)
                self.state = 542
                self.enumeratorList()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 543
                    self.match(CParser.Comma)


                self.state = 546
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.match(CParser.Enum)
                self.state = 549
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(CParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_enumeratorList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorList" ):
                return visitor.visitEnumeratorList(self)
            else:
                return visitor.visitChildren(self)




    def enumeratorList(self):

        localctx = CParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.enumerator()
            self.state = 557
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 553
                    self.match(CParser.Comma)
                    self.state = 554
                    self.enumerator() 
                self.state = 559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(CParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.enumerationConstant()
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 561
                self.match(CParser.Assign)
                self.state = 562
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerationConstant

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerationConstant" ):
                return visitor.visitEnumerationConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumerationConstant(self):

        localctx = CParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_atomicTypeSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicTypeSpecifier" ):
                return visitor.visitAtomicTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def atomicTypeSpecifier(self):

        localctx = CParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(CParser.Atomic)
            self.state = 568
            self.match(CParser.LeftParen)
            self.state = 569
            self.typeName()
            self.state = 570
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CParser.Const, 0)

        def Restrict(self):
            return self.getToken(CParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeQualifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifier" ):
                return visitor.visitTypeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifier(self):

        localctx = CParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(CParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionSpecifier" ):
                return visitor.visitFunctionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_functionSpecifier)
        try:
            self.state = 583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.match(CParser.Inline)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.match(CParser.Noreturn)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.match(CParser.T__7)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 4)
                self.state = 577
                self.match(CParser.T__8)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 5)
                self.state = 578
                self.gccAttributeSpecifier()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 6)
                self.state = 579
                self.match(CParser.T__9)
                self.state = 580
                self.match(CParser.LeftParen)
                self.state = 581
                self.match(CParser.Identifier)
                self.state = 582
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentSpecifier" ):
                return visitor.visitAlignmentSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(CParser.Alignas)
            self.state = 586
            self.match(CParser.LeftParen)
            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 587
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 588
                self.constantExpression()
                pass


            self.state = 591
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80 or _la==87:
                self.state = 593
                self.pointer()


            self.state = 596
            self.directDeclarator(0)
            self.state = 600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 597
                    self.gccDeclaratorExtension() 
                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def vcSpecificModifer(self):
            return self.getTypedRuleContext(CParser.VcSpecificModiferContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectDeclarator" ):
                return visitor.visitDirectDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 604
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 605
                self.match(CParser.LeftParen)
                self.state = 606
                self.declarator()
                self.state = 607
                self.match(CParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 609
                self.match(CParser.Identifier)
                self.state = 610
                self.match(CParser.Colon)
                self.state = 611
                self.match(CParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 612
                self.vcSpecificModifer()
                self.state = 613
                self.match(CParser.Identifier)
                pass

            elif la_ == 5:
                self.state = 615
                self.match(CParser.LeftParen)
                self.state = 616
                self.vcSpecificModifer()
                self.state = 617
                self.declarator()
                self.state = 618
                self.match(CParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 665
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 622
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 623
                        self.match(CParser.LeftBracket)
                        self.state = 625
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                            self.state = 624
                            self.typeQualifierList()


                        self.state = 628
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                            self.state = 627
                            self.assignmentExpression()


                        self.state = 630
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 631
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 632
                        self.match(CParser.LeftBracket)
                        self.state = 633
                        self.match(CParser.Static)
                        self.state = 635
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                            self.state = 634
                            self.typeQualifierList()


                        self.state = 637
                        self.assignmentExpression()
                        self.state = 638
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 640
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 641
                        self.match(CParser.LeftBracket)
                        self.state = 642
                        self.typeQualifierList()
                        self.state = 643
                        self.match(CParser.Static)
                        self.state = 644
                        self.assignmentExpression()
                        self.state = 645
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 647
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 648
                        self.match(CParser.LeftBracket)
                        self.state = 650
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                            self.state = 649
                            self.typeQualifierList()


                        self.state = 652
                        self.match(CParser.Star)
                        self.state = 653
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 654
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 655
                        self.match(CParser.LeftParen)
                        self.state = 656
                        self.parameterTypeList()
                        self.state = 657
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 659
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 660
                        self.match(CParser.LeftParen)
                        self.state = 662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==110:
                            self.state = 661
                            self.identifierList()


                        self.state = 664
                        self.match(CParser.RightParen)
                        pass

             
                self.state = 669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VcSpecificModiferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CParser.RULE_vcSpecificModifer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVcSpecificModifer" ):
                return visitor.visitVcSpecificModifer(self)
            else:
                return visitor.visitChildren(self)




    def vcSpecificModifer(self):

        localctx = CParser.VcSpecificModiferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_vcSpecificModifer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccDeclaratorExtension" ):
                return visitor.visitGccDeclaratorExtension(self)
            else:
                return visitor.visitChildren(self)




    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.match(CParser.T__15)
                self.state = 673
                self.match(CParser.LeftParen)
                self.state = 675 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 674
                    self.match(CParser.StringLiteral)
                    self.state = 677 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==113):
                        break

                self.state = 679
                self.match(CParser.RightParen)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeSpecifier" ):
                return visitor.visitGccAttributeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(CParser.T__16)
            self.state = 684
            self.match(CParser.LeftParen)
            self.state = 685
            self.match(CParser.LeftParen)
            self.state = 686
            self.gccAttributeList()
            self.state = 687
            self.match(CParser.RightParen)
            self.state = 688
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeList" ):
                return visitor.visitGccAttributeList(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 36028796884746239) != 0):
                self.state = 690
                self.gccAttribute()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 693
                self.match(CParser.Comma)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 36028796884746239) != 0):
                    self.state = 694
                    self.gccAttribute()


                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttribute" ):
                return visitor.visitGccAttribute(self)
            else:
                return visitor.visitChildren(self)




    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 536870915) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 703
                self.match(CParser.LeftParen)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                    self.state = 704
                    self.argumentExpressionList()


                self.state = 707
                self.match(CParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_pointer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointer" ):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)




    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 710
                _la = self._input.LA(1)
                if not(_la==80 or _la==87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                    self.state = 711
                    self.typeQualifierList()


                self.state = 716 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==80 or _la==87):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_typeQualifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifierList" ):
                return visitor.visitTypeQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifierList(self):

        localctx = CParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeQualifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 718
                self.typeQualifier()
                self.state = 721 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(CParser.Ellipsis, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterTypeList" ):
                return visitor.visitParameterTypeList(self)
            else:
                return visitor.visitChildren(self)




    def parameterTypeList(self):

        localctx = CParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.parameterList()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 724
                self.match(CParser.Comma)
                self.state = 725
                self.match(CParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_parameterList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = CParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.parameterDeclaration()
            self.state = 733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 729
                    self.match(CParser.Comma)
                    self.state = 730
                    self.parameterDeclaration() 
                self.state = 735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self.declarationSpecifiers()
                self.state = 737
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.declarationSpecifiers2()
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8454149) != 0):
                    self.state = 740
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = CParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(CParser.Identifier)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 746
                self.match(CParser.Comma)
                self.state = 747
                self.match(CParser.Identifier)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.specifierQualifierList()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8454149) != 0):
                self.state = 754
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractDeclarator" ):
                return visitor.visitAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==87:
                    self.state = 758
                    self.pointer()


                self.state = 761
                self.directAbstractDeclarator(0)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16 or _la==17:
                    self.state = 762
                    self.gccDeclaratorExtension()
                    self.state = 767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectAbstractDeclarator" ):
                return visitor.visitDirectAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 771
                self.match(CParser.LeftParen)
                self.state = 772
                self.abstractDeclarator()
                self.state = 773
                self.match(CParser.RightParen)
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 774
                        self.gccDeclaratorExtension() 
                    self.state = 779
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                pass

            elif la_ == 2:
                self.state = 780
                self.match(CParser.LeftBracket)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                    self.state = 781
                    self.typeQualifierList()


                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                    self.state = 784
                    self.assignmentExpression()


                self.state = 787
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 788
                self.match(CParser.LeftBracket)
                self.state = 789
                self.match(CParser.Static)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                    self.state = 790
                    self.typeQualifierList()


                self.state = 793
                self.assignmentExpression()
                self.state = 794
                self.match(CParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 796
                self.match(CParser.LeftBracket)
                self.state = 797
                self.typeQualifierList()
                self.state = 798
                self.match(CParser.Static)
                self.state = 799
                self.assignmentExpression()
                self.state = 800
                self.match(CParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 802
                self.match(CParser.LeftBracket)
                self.state = 803
                self.match(CParser.Star)
                self.state = 804
                self.match(CParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 805
                self.match(CParser.LeftParen)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6386264861217519630) != 0) or _la==110:
                    self.state = 806
                    self.parameterTypeList()


                self.state = 809
                self.match(CParser.RightParen)
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 810
                        self.gccDeclaratorExtension() 
                    self.state = 815
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 859
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 818
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 819
                        self.match(CParser.LeftBracket)
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                            self.state = 820
                            self.typeQualifierList()


                        self.state = 824
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                            self.state = 823
                            self.assignmentExpression()


                        self.state = 826
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 827
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 828
                        self.match(CParser.LeftBracket)
                        self.state = 829
                        self.match(CParser.Static)
                        self.state = 831
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 76562293193703424) != 0):
                            self.state = 830
                            self.typeQualifierList()


                        self.state = 833
                        self.assignmentExpression()
                        self.state = 834
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 836
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 837
                        self.match(CParser.LeftBracket)
                        self.state = 838
                        self.typeQualifierList()
                        self.state = 839
                        self.match(CParser.Static)
                        self.state = 840
                        self.assignmentExpression()
                        self.state = 841
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 843
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 844
                        self.match(CParser.LeftBracket)
                        self.state = 845
                        self.match(CParser.Star)
                        self.state = 846
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 847
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 848
                        self.match(CParser.LeftParen)
                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6386264861217519630) != 0) or _la==110:
                            self.state = 849
                            self.parameterTypeList()


                        self.state = 852
                        self.match(CParser.RightParen)
                        self.state = 856
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 853
                                self.gccDeclaratorExtension() 
                            self.state = 858
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                        pass

             
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_typedefName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefName" ):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)




    def typedefName(self):

        localctx = CParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 44, 55, 59, 64, 76, 77, 78, 79, 80, 83, 85, 88, 89, 110, 111, 112, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.assignmentExpression()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.match(CParser.LeftBrace)
                self.state = 868
                self.initializerList()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 869
                    self.match(CParser.Comma)


                self.state = 872
                self.match(CParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitializerContext)
            else:
                return self.getTypedRuleContext(CParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignationContext)
            else:
                return self.getTypedRuleContext(CParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerList" ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)




    def initializerList(self):

        localctx = CParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==108:
                self.state = 876
                self.designation()


            self.state = 879
            self.initializer()
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self.match(CParser.Comma)
                    self.state = 882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==66 or _la==108:
                        self.state = 881
                        self.designation()


                    self.state = 884
                    self.initializer() 
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def getRuleIndex(self):
            return CParser.RULE_designation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignation" ):
                return visitor.visitDesignation(self)
            else:
                return visitor.visitChildren(self)




    def designation(self):

        localctx = CParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.designatorList()
            self.state = 891
            self.match(CParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(CParser.DesignatorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_designatorList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorList" ):
                return visitor.visitDesignatorList(self)
            else:
                return visitor.visitChildren(self)




    def designatorList(self):

        localctx = CParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 893
                self.designator()
                self.state = 896 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==66 or _la==108):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CParser.Dot, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_designator)
        try:
            self.state = 904
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.match(CParser.LeftBracket)
                self.state = 899
                self.constantExpression()
                self.state = 900
                self.match(CParser.RightBracket)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.match(CParser.Dot)
                self.state = 903
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(CParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticAssertDeclaration" ):
                return visitor.visitStaticAssertDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(CParser.StaticAssert)
            self.state = 907
            self.match(CParser.LeftParen)
            self.state = 908
            self.constantExpression()
            self.state = 909
            self.match(CParser.Comma)
            self.state = 911 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 910
                self.match(CParser.StringLiteral)
                self.state = 913 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==113):
                    break

            self.state = 915
            self.match(CParser.RightParen)
            self.state = 916
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Colon)
            else:
                return self.getToken(CParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 920
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 921
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 922
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 923
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 924
                _la = self._input.LA(1)
                if not(_la==16 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 925
                _la = self._input.LA(1)
                if not(_la==19 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 926
                self.match(CParser.LeftParen)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                    self.state = 927
                    self.logicalOrExpression()
                    self.state = 932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==93:
                        self.state = 928
                        self.match(CParser.Comma)
                        self.state = 929
                        self.logicalOrExpression()
                        self.state = 934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 937
                    self.match(CParser.Colon)
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                        self.state = 938
                        self.logicalOrExpression()
                        self.state = 943
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==93:
                            self.state = 939
                            self.match(CParser.Comma)
                            self.state = 940
                            self.logicalOrExpression()
                            self.state = 945
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 953
                self.match(CParser.RightParen)
                self.state = 954
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Case(self):
            return self.getToken(CParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_labeledStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = CParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_labeledStatement)
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.match(CParser.Identifier)
                self.state = 958
                self.match(CParser.Colon)
                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 959
                    self.statement()


                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.match(CParser.Case)
                self.state = 963
                self.constantExpression()
                self.state = 964
                self.match(CParser.Colon)
                self.state = 965
                self.statement()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.match(CParser.Default)
                self.state = 968
                self.match(CParser.Colon)
                self.state = 969
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compoundStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = CParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(CParser.LeftBrace)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921505144305666) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531484180497) != 0):
                self.state = 973
                self.blockItemList()


            self.state = 976
            self.match(CParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext,i)


        def getRuleIndex(self):
            return CParser.RULE_blockItemList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItemList" ):
                return visitor.visitBlockItemList(self)
            else:
                return visitor.visitChildren(self)




    def blockItemList(self):

        localctx = CParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 978
                self.blockItem()
                self.state = 981 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921505144305666) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531484180497) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItem" ):
                return visitor.visitBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_blockItem)
        try:
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_expressionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = CParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                self.state = 987
                self.expression()


            self.state = 990
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CParser.If, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StatementContext)
            else:
                return self.getTypedRuleContext(CParser.StatementContext,i)


        def Else(self):
            return self.getToken(CParser.Else, 0)

        def Switch(self):
            return self.getToken(CParser.Switch, 0)

        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_selectionStatement)
        try:
            self.state = 1007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 992
                self.match(CParser.If)
                self.state = 993
                self.match(CParser.LeftParen)
                self.state = 994
                self.expression()
                self.state = 995
                self.match(CParser.RightParen)
                self.state = 996
                self.statement()
                self.state = 999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 997
                    self.match(CParser.Else)
                    self.state = 998
                    self.statement()


                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.match(CParser.Switch)
                self.state = 1002
                self.match(CParser.LeftParen)
                self.state = 1003
                self.expression()
                self.state = 1004
                self.match(CParser.RightParen)
                self.state = 1005
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CParser.While, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Do(self):
            return self.getToken(CParser.Do, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def For(self):
            return self.getToken(CParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(CParser.ForConditionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_iterationStatement)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.match(CParser.While)
                self.state = 1010
                self.match(CParser.LeftParen)
                self.state = 1011
                self.expression()
                self.state = 1012
                self.match(CParser.RightParen)
                self.state = 1013
                self.statement()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(CParser.Do)
                self.state = 1016
                self.statement()
                self.state = 1017
                self.match(CParser.While)
                self.state = 1018
                self.match(CParser.LeftParen)
                self.state = 1019
                self.expression()
                self.state = 1020
                self.match(CParser.RightParen)
                self.state = 1021
                self.match(CParser.Semi)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1023
                self.match(CParser.For)
                self.state = 1024
                self.match(CParser.LeftParen)
                self.state = 1025
                self.forCondition()
                self.state = 1026
                self.match(CParser.RightParen)
                self.state = 1027
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Semi)
            else:
                return self.getToken(CParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(CParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForCondition" ):
                return visitor.visitForCondition(self)
            else:
                return visitor.visitChildren(self)




    def forCondition(self):

        localctx = CParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1031
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                    self.state = 1032
                    self.expression()


                pass


            self.state = 1037
            self.match(CParser.Semi)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                self.state = 1038
                self.forExpression()


            self.state = 1041
            self.match(CParser.Semi)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                self.state = 1042
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForDeclaration" ):
                return visitor.visitForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forDeclaration(self):

        localctx = CParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.declarationSpecifiers()
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368752631809) != 0):
                self.state = 1046
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_forExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)




    def forExpression(self):

        localctx = CParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.assignmentExpression()
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 1050
                self.match(CParser.Comma)
                self.state = 1051
                self.assignmentExpression()
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Goto(self):
            return self.getToken(CParser.Goto, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Continue(self):
            return self.getToken(CParser.Continue, 0)

        def Break(self):
            return self.getToken(CParser.Break, 0)

        def Return(self):
            return self.getToken(CParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpStatement" ):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1057
                self.match(CParser.Goto)
                self.state = 1058
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1059
                self.match(CParser.Continue)
                pass

            elif la_ == 3:
                self.state = 1060
                self.match(CParser.Break)
                pass

            elif la_ == 4:
                self.state = 1061
                self.match(CParser.Return)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612507141508431886) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1055531215745025) != 0):
                    self.state = 1062
                    self.expression()


                pass

            elif la_ == 5:
                self.state = 1065
                self.match(CParser.Goto)
                self.state = 1066
                self.unaryExpression()
                pass


            self.state = 1069
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1774578842790068238) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70369021067265) != 0):
                self.state = 1071
                self.translationUnit()


            self.state = 1074
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_translationUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationUnit" ):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)




    def translationUnit(self):

        localctx = CParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1076
                self.externalDeclaration()
                self.state = 1079 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1774578842790068238) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70369021067265) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(CParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDeclaration" ):
                return visitor.visitExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_externalDeclaration)
        try:
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = CParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1086
                self.declarationSpecifiers()


            self.state = 1089
            self.declarator()
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1774578842790131726) != 0) or _la==110:
                self.state = 1090
                self.declarationList()


            self.state = 1093
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationList" ):
                return visitor.visitDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def declarationList(self):

        localctx = CParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1095
                self.declaration()
                self.state = 1098 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1774578842790131726) != 0) or _la==110):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[48] = self.directDeclarator_sempred
        self._predicates[62] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




