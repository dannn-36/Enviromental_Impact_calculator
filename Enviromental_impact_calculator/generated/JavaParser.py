# Generated from grammars/JavaParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .JavaParserBase import JavaParserBase
else:
    from JavaParserBase import JavaParserBase

def serializedATN():
    return [
        4,1,129,1844,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,1,0,3,0,260,8,0,1,0,1,0,5,0,
        264,8,0,10,0,12,0,267,9,0,1,0,1,0,5,0,271,8,0,10,0,12,0,274,9,0,
        1,0,1,0,1,0,1,0,3,0,280,8,0,1,1,5,1,283,8,1,10,1,12,1,286,9,1,1,
        1,1,1,1,2,5,2,291,8,2,10,2,12,2,294,9,2,1,2,1,2,1,2,1,2,1,3,1,3,
        3,3,302,8,3,1,3,1,3,1,3,3,3,307,8,3,1,3,1,3,1,4,5,4,312,8,4,10,4,
        12,4,315,9,4,1,4,1,4,1,4,1,4,1,4,3,4,322,8,4,1,5,1,5,1,5,1,5,1,5,
        3,5,329,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,341,8,6,
        1,7,1,7,3,7,345,8,7,1,8,1,8,1,8,3,8,350,8,8,1,8,1,8,3,8,354,8,8,
        1,8,1,8,3,8,358,8,8,1,8,1,8,3,8,362,8,8,1,8,1,8,1,9,1,9,1,9,1,9,
        5,9,370,8,9,10,9,12,9,373,9,9,1,9,1,9,1,10,5,10,378,8,10,10,10,12,
        10,381,9,10,1,10,1,10,1,10,5,10,386,8,10,10,10,12,10,389,9,10,1,
        10,3,10,392,8,10,1,11,1,11,1,11,5,11,397,8,11,10,11,12,11,400,9,
        11,1,12,1,12,1,12,1,12,3,12,406,8,12,1,12,1,12,3,12,410,8,12,1,12,
        3,12,413,8,12,1,12,3,12,416,8,12,1,12,1,12,1,13,1,13,1,13,5,13,423,
        8,13,10,13,12,13,426,9,13,1,14,5,14,429,8,14,10,14,12,14,432,9,14,
        1,14,1,14,3,14,436,8,14,1,14,3,14,439,8,14,1,15,1,15,5,15,443,8,
        15,10,15,12,15,446,9,15,1,16,1,16,1,16,3,16,451,8,16,1,16,1,16,3,
        16,455,8,16,1,16,1,16,3,16,459,8,16,1,16,1,16,1,17,1,17,5,17,465,
        8,17,10,17,12,17,468,9,17,1,17,1,17,1,18,1,18,5,18,474,8,18,10,18,
        12,18,477,9,18,1,18,1,18,1,19,1,19,3,19,483,8,19,1,19,1,19,5,19,
        487,8,19,10,19,12,19,490,9,19,1,19,3,19,493,8,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,505,8,20,1,21,1,21,1,21,
        1,21,1,21,5,21,512,8,21,10,21,12,21,515,9,21,1,21,1,21,3,21,519,
        8,21,1,21,1,21,1,22,1,22,3,22,525,8,22,1,23,1,23,3,23,529,8,23,1,
        24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,541,8,26,1,
        26,1,26,1,27,5,27,546,8,27,10,27,12,27,549,9,27,1,27,1,27,1,27,1,
        28,1,28,1,28,1,28,1,29,5,29,559,8,29,10,29,12,29,562,9,29,1,29,1,
        29,3,29,566,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,576,
        8,30,1,31,1,31,1,31,1,31,5,31,582,8,31,10,31,12,31,585,9,31,1,31,
        1,31,1,32,1,32,1,32,5,32,592,8,32,10,32,12,32,595,9,32,1,32,1,32,
        1,32,1,33,5,33,601,8,33,10,33,12,33,604,9,33,1,33,1,33,1,34,1,34,
        1,34,1,34,1,34,1,34,3,34,614,8,34,1,35,5,35,617,8,35,10,35,12,35,
        620,9,35,1,35,1,35,1,35,1,36,5,36,626,8,36,10,36,12,36,629,9,36,
        1,36,1,36,1,36,1,36,1,36,5,36,636,8,36,10,36,12,36,639,9,36,1,36,
        1,36,3,36,643,8,36,1,36,1,36,1,37,1,37,1,37,5,37,650,8,37,10,37,
        12,37,653,9,37,1,38,1,38,1,38,3,38,658,8,38,1,39,1,39,1,39,5,39,
        663,8,39,10,39,12,39,666,9,39,1,40,1,40,3,40,670,8,40,1,41,1,41,
        1,41,1,41,5,41,676,8,41,10,41,12,41,679,9,41,1,41,3,41,682,8,41,
        3,41,684,8,41,1,41,1,41,1,42,1,42,1,42,5,42,691,8,42,10,42,12,42,
        694,9,42,3,42,696,8,42,1,42,1,42,3,42,700,8,42,4,42,702,8,42,11,
        42,12,42,703,1,42,1,42,5,42,708,8,42,10,42,12,42,711,9,42,1,42,1,
        42,3,42,715,8,42,5,42,717,8,42,10,42,12,42,720,9,42,1,43,1,43,1,
        43,5,43,725,8,43,10,43,12,43,728,9,43,1,44,1,44,5,44,732,8,44,10,
        44,12,44,735,9,44,1,44,1,44,1,44,3,44,740,8,44,3,44,742,8,44,1,45,
        1,45,1,45,5,45,747,8,45,10,45,12,45,750,9,45,1,46,1,46,1,46,3,46,
        755,8,46,1,46,1,46,5,46,759,8,46,10,46,12,46,762,9,46,3,46,764,8,
        46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,772,8,47,10,47,12,47,775,9,
        47,1,47,1,47,1,48,1,48,1,48,5,48,782,8,48,10,48,12,48,785,9,48,1,
        49,5,49,788,8,49,10,49,12,49,791,9,49,1,49,1,49,5,49,795,8,49,10,
        49,12,49,798,9,49,1,49,3,49,801,8,49,1,49,1,49,1,50,1,50,1,50,5,
        50,808,8,50,10,50,12,50,811,9,50,1,51,5,51,814,8,51,10,51,12,51,
        817,9,51,1,51,1,51,1,51,1,52,1,52,1,52,5,52,825,8,52,10,52,12,52,
        828,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,837,8,53,1,54,1,
        54,1,55,1,55,1,56,1,56,1,56,5,56,846,8,56,10,56,12,56,849,9,56,1,
        56,1,56,1,56,1,57,1,57,1,57,1,57,3,57,858,8,57,1,58,1,58,1,58,1,
        58,5,58,864,8,58,10,58,12,58,867,9,58,3,58,869,8,58,1,58,1,58,1,
        59,1,59,1,59,1,59,1,59,1,59,3,59,879,8,59,1,60,1,60,1,60,1,60,1,
        60,1,60,5,60,887,8,60,10,60,12,60,890,9,60,3,60,892,8,60,1,60,3,
        60,895,8,60,1,60,3,60,898,8,60,1,61,1,61,1,61,3,61,903,8,61,1,62,
        1,62,1,62,1,62,5,62,909,8,62,10,62,12,62,912,9,62,3,62,914,8,62,
        1,62,3,62,917,8,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,
        5,64,928,8,64,10,64,12,64,931,9,64,1,64,1,64,1,65,5,65,936,8,65,
        10,65,12,65,939,9,65,1,65,1,65,3,65,943,8,65,1,66,1,66,1,66,1,66,
        1,66,1,66,3,66,951,8,66,1,66,1,66,3,66,955,8,66,1,66,1,66,3,66,959,
        8,66,1,66,1,66,3,66,963,8,66,1,66,1,66,3,66,967,8,66,3,66,969,8,
        66,1,67,1,67,3,67,973,8,67,1,68,1,68,1,68,1,68,3,68,979,8,68,1,69,
        1,69,1,70,1,70,1,70,1,71,5,71,987,8,71,10,71,12,71,990,9,71,1,71,
        3,71,993,8,71,1,71,1,71,1,71,1,71,5,71,999,8,71,10,71,12,71,1002,
        9,71,1,71,1,71,1,72,1,72,5,72,1008,8,72,10,72,12,72,1011,9,72,1,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,1022,8,72,10,72,
        12,72,1025,9,72,3,72,1027,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,5,72,1037,8,72,10,72,12,72,1040,9,72,3,72,1042,8,72,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,1056,8,
        72,10,72,12,72,1059,9,72,1,72,1,72,3,72,1063,8,72,1,73,1,73,1,74,
        1,74,1,74,3,74,1070,8,74,1,74,1,74,1,74,3,74,1075,8,74,1,74,1,74,
        1,75,1,75,3,75,1081,8,75,1,75,1,75,1,76,1,76,1,76,5,76,1088,8,76,
        10,76,12,76,1091,9,76,1,76,1,76,1,77,5,77,1096,8,77,10,77,12,77,
        1099,9,77,1,77,1,77,5,77,1103,8,77,10,77,12,77,1106,9,77,1,77,3,
        77,1109,8,77,1,77,1,77,1,78,1,78,1,78,5,78,1116,8,78,10,78,12,78,
        1119,9,78,1,78,1,78,1,79,1,79,5,79,1125,8,79,10,79,12,79,1128,9,
        79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,3,80,1137,8,80,1,81,5,81,1140,
        8,81,10,81,12,81,1143,9,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,3,81,1153,8,81,1,82,1,82,1,83,1,83,1,84,5,84,1160,8,84,10,84,
        12,84,1163,9,84,1,84,1,84,1,84,1,84,3,84,1169,8,84,1,85,1,85,1,85,
        1,85,1,85,3,85,1176,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,3,85,1187,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,4,85,1212,8,85,11,85,12,85,1213,1,85,3,85,1217,8,85,1,85,3,
        85,1220,8,85,1,85,1,85,1,85,1,85,5,85,1226,8,85,10,85,12,85,1229,
        9,85,1,85,3,85,1232,8,85,1,85,1,85,1,85,1,85,1,85,1,85,5,85,1240,
        8,85,10,85,12,85,1243,9,85,1,85,5,85,1246,8,85,10,85,12,85,1249,
        9,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1261,
        8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1270,8,85,1,85,1,85,
        1,85,3,85,1275,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,3,85,1288,8,85,1,85,1,85,1,85,1,85,3,85,1294,8,85,1,86,
        1,86,1,86,5,86,1299,8,86,10,86,12,86,1302,9,86,1,86,1,86,1,86,1,
        86,1,86,1,87,1,87,1,87,5,87,1312,8,87,10,87,12,87,1315,9,87,1,88,
        1,88,1,88,1,89,1,89,1,89,3,89,1323,8,89,1,89,1,89,1,90,1,90,1,90,
        5,90,1330,8,90,10,90,12,90,1333,9,90,1,91,5,91,1336,8,91,10,91,12,
        91,1339,9,91,1,91,1,91,1,91,1,91,1,91,3,91,1346,8,91,1,91,1,91,1,
        91,1,91,3,91,1352,8,91,1,92,1,92,1,92,4,92,1357,8,92,11,92,12,92,
        1358,1,92,4,92,1362,8,92,11,92,12,92,1363,1,93,1,93,1,93,1,93,1,
        93,1,93,3,93,1372,8,93,1,93,3,93,1375,8,93,1,94,1,94,3,94,1379,8,
        94,1,94,1,94,3,94,1383,8,94,1,94,1,94,3,94,1387,8,94,3,94,1389,8,
        94,1,95,1,95,3,95,1393,8,95,1,96,5,96,1396,8,96,10,96,12,96,1399,
        9,96,1,96,1,96,3,96,1403,8,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,
        5,97,1412,8,97,10,97,12,97,1415,9,97,1,98,1,98,1,98,3,98,1420,8,
        98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1430,8,99,1,99,1,
        99,3,99,1434,8,99,1,99,1,99,1,99,3,99,1439,8,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,5,99,1448,8,99,10,99,12,99,1451,9,99,1,99,1,99,
        1,99,5,99,1456,8,99,10,99,12,99,1459,9,99,1,99,1,99,1,99,1,99,1,
        99,1,99,3,99,1467,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,3,99,1483,8,99,1,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,
        99,1528,8,99,1,99,1,99,1,99,1,99,3,99,1534,8,99,1,99,1,99,1,99,3,
        99,1539,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1548,8,99,5,
        99,1550,8,99,10,99,12,99,1553,9,99,1,100,5,100,1556,8,100,10,100,
        12,100,1559,9,100,1,100,1,100,5,100,1563,8,100,10,100,12,100,1566,
        9,100,1,100,1,100,1,100,1,100,1,100,3,100,1573,8,100,1,100,1,100,
        3,100,1577,8,100,1,101,1,101,1,101,5,101,1582,8,101,10,101,12,101,
        1585,9,101,1,102,1,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,
        3,104,1596,8,104,1,104,1,104,1,104,1,104,1,104,5,104,1603,8,104,
        10,104,12,104,1606,9,104,1,104,1,104,1,104,1,104,3,104,1612,8,104,
        1,104,3,104,1615,8,104,1,105,1,105,3,105,1619,8,105,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,3,106,1637,8,106,3,106,1639,8,106,1,107,1,107,
        1,107,1,107,1,107,1,107,5,107,1647,8,107,10,107,12,107,1650,9,107,
        1,107,1,107,1,108,1,108,1,108,1,108,1,108,3,108,1659,8,108,1,108,
        1,108,1,108,5,108,1664,8,108,10,108,12,108,1667,9,108,1,108,3,108,
        1670,8,108,3,108,1672,8,108,1,108,1,108,1,108,1,108,1,108,3,108,
        1679,8,108,1,109,1,109,1,109,1,110,1,110,1,111,1,111,5,111,1688,
        8,111,10,111,12,111,1691,9,111,3,111,1693,8,111,1,112,1,112,1,113,
        3,113,1698,8,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1706,
        8,113,1,114,1,114,3,114,1710,8,114,1,114,1,114,1,114,3,114,1715,
        8,114,5,114,1717,8,114,10,114,12,114,1720,9,114,1,114,3,114,1723,
        8,114,1,115,1,115,3,115,1727,8,115,1,115,1,115,1,116,1,116,4,116,
        1733,8,116,11,116,12,116,1734,1,116,1,116,1,116,1,116,1,116,4,116,
        1742,8,116,11,116,12,116,1743,1,116,1,116,5,116,1748,8,116,10,116,
        12,116,1751,9,116,3,116,1753,8,116,1,117,1,117,3,117,1757,8,117,
        1,118,1,118,1,118,1,119,1,119,1,119,3,119,1765,8,119,1,120,1,120,
        1,120,3,120,1770,8,120,1,121,1,121,1,121,1,121,1,122,1,122,1,122,
        5,122,1779,8,122,10,122,12,122,1782,9,122,1,123,5,123,1785,8,123,
        10,123,12,123,1788,9,123,1,123,1,123,3,123,1792,8,123,1,123,5,123,
        1795,8,123,10,123,12,123,1798,9,123,1,123,1,123,5,123,1802,8,123,
        10,123,12,123,1805,9,123,1,124,1,124,1,125,1,125,1,125,1,125,5,125,
        1813,8,125,10,125,12,125,1816,9,125,1,125,1,125,1,126,1,126,1,126,
        3,126,1823,8,126,1,126,1,126,3,126,1827,8,126,3,126,1829,8,126,1,
        127,1,127,1,127,1,127,1,127,3,127,1836,8,127,1,128,1,128,3,128,1840,
        8,128,1,128,1,128,1,128,0,1,198,129,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,0,15,2,0,18,18,50,50,
        1,0,68,71,1,0,72,73,2,0,48,48,58,58,13,0,17,17,31,31,35,36,38,38,
        41,41,43,44,46,46,56,56,58,58,60,61,64,64,66,67,129,129,11,0,17,
        17,31,31,35,36,41,41,44,44,46,46,56,56,58,58,60,60,66,66,129,129,
        2,0,91,92,101,104,2,0,105,106,110,110,1,0,103,104,2,0,89,90,96,97,
        2,0,95,95,98,98,2,0,88,88,111,121,1,0,101,102,2,0,94,94,122,122,
        8,0,3,3,5,5,8,8,14,14,21,21,28,28,30,30,47,47,2049,0,279,1,0,0,0,
        2,284,1,0,0,0,4,292,1,0,0,0,6,299,1,0,0,0,8,313,1,0,0,0,10,328,1,
        0,0,0,12,340,1,0,0,0,14,344,1,0,0,0,16,346,1,0,0,0,18,365,1,0,0,
        0,20,379,1,0,0,0,22,393,1,0,0,0,24,401,1,0,0,0,26,419,1,0,0,0,28,
        430,1,0,0,0,30,440,1,0,0,0,32,447,1,0,0,0,34,462,1,0,0,0,36,471,
        1,0,0,0,38,492,1,0,0,0,40,504,1,0,0,0,42,506,1,0,0,0,44,524,1,0,
        0,0,46,528,1,0,0,0,48,530,1,0,0,0,50,533,1,0,0,0,52,536,1,0,0,0,
        54,547,1,0,0,0,56,553,1,0,0,0,58,565,1,0,0,0,60,575,1,0,0,0,62,577,
        1,0,0,0,64,588,1,0,0,0,66,602,1,0,0,0,68,613,1,0,0,0,70,618,1,0,
        0,0,72,627,1,0,0,0,74,646,1,0,0,0,76,654,1,0,0,0,78,659,1,0,0,0,
        80,669,1,0,0,0,82,671,1,0,0,0,84,701,1,0,0,0,86,721,1,0,0,0,88,741,
        1,0,0,0,90,743,1,0,0,0,92,751,1,0,0,0,94,767,1,0,0,0,96,778,1,0,
        0,0,98,789,1,0,0,0,100,804,1,0,0,0,102,815,1,0,0,0,104,821,1,0,0,
        0,106,836,1,0,0,0,108,838,1,0,0,0,110,840,1,0,0,0,112,847,1,0,0,
        0,114,853,1,0,0,0,116,859,1,0,0,0,118,878,1,0,0,0,120,897,1,0,0,
        0,122,902,1,0,0,0,124,904,1,0,0,0,126,920,1,0,0,0,128,925,1,0,0,
        0,130,942,1,0,0,0,132,968,1,0,0,0,134,972,1,0,0,0,136,974,1,0,0,
        0,138,980,1,0,0,0,140,982,1,0,0,0,142,988,1,0,0,0,144,1062,1,0,0,
        0,146,1064,1,0,0,0,148,1066,1,0,0,0,150,1078,1,0,0,0,152,1084,1,
        0,0,0,154,1097,1,0,0,0,156,1112,1,0,0,0,158,1122,1,0,0,0,160,1136,
        1,0,0,0,162,1141,1,0,0,0,164,1154,1,0,0,0,166,1156,1,0,0,0,168,1161,
        1,0,0,0,170,1293,1,0,0,0,172,1295,1,0,0,0,174,1308,1,0,0,0,176,1316,
        1,0,0,0,178,1319,1,0,0,0,180,1326,1,0,0,0,182,1351,1,0,0,0,184,1356,
        1,0,0,0,186,1374,1,0,0,0,188,1388,1,0,0,0,190,1392,1,0,0,0,192,1397,
        1,0,0,0,194,1408,1,0,0,0,196,1419,1,0,0,0,198,1466,1,0,0,0,200,1576,
        1,0,0,0,202,1578,1,0,0,0,204,1586,1,0,0,0,206,1588,1,0,0,0,208,1614,
        1,0,0,0,210,1618,1,0,0,0,212,1638,1,0,0,0,214,1640,1,0,0,0,216,1678,
        1,0,0,0,218,1680,1,0,0,0,220,1683,1,0,0,0,222,1692,1,0,0,0,224,1694,
        1,0,0,0,226,1705,1,0,0,0,228,1722,1,0,0,0,230,1724,1,0,0,0,232,1752,
        1,0,0,0,234,1754,1,0,0,0,236,1758,1,0,0,0,238,1764,1,0,0,0,240,1769,
        1,0,0,0,242,1771,1,0,0,0,244,1775,1,0,0,0,246,1786,1,0,0,0,248,1806,
        1,0,0,0,250,1808,1,0,0,0,252,1828,1,0,0,0,254,1835,1,0,0,0,256,1837,
        1,0,0,0,258,260,3,4,2,0,259,258,1,0,0,0,259,260,1,0,0,0,260,265,
        1,0,0,0,261,264,3,6,3,0,262,264,5,85,0,0,263,261,1,0,0,0,263,262,
        1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,272,
        1,0,0,0,267,265,1,0,0,0,268,271,3,8,4,0,269,271,5,85,0,0,270,268,
        1,0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,
        1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,280,5,0,0,1,276,277,
        3,2,1,0,277,278,5,0,0,1,278,280,1,0,0,0,279,259,1,0,0,0,279,276,
        1,0,0,0,280,1,1,0,0,0,281,283,3,6,3,0,282,281,1,0,0,0,283,286,1,
        0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,
        0,0,0,287,288,3,142,71,0,288,3,1,0,0,0,289,291,3,114,57,0,290,289,
        1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,
        1,0,0,0,294,292,1,0,0,0,295,296,5,37,0,0,296,297,3,104,52,0,297,
        298,5,85,0,0,298,5,1,0,0,0,299,301,5,26,0,0,300,302,5,48,0,0,301,
        300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,306,3,104,52,0,304,
        305,5,87,0,0,305,307,5,105,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,
        308,1,0,0,0,308,309,5,85,0,0,309,7,1,0,0,0,310,312,3,12,6,0,311,
        310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,
        321,1,0,0,0,315,313,1,0,0,0,316,322,3,16,8,0,317,322,3,24,12,0,318,
        322,3,32,16,0,319,322,3,126,63,0,320,322,3,148,74,0,321,316,1,0,
        0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,1,0,0,0,321,320,1,0,
        0,0,322,9,1,0,0,0,323,329,3,12,6,0,324,329,5,32,0,0,325,329,5,52,
        0,0,326,329,5,57,0,0,327,329,5,63,0,0,328,323,1,0,0,0,328,324,1,
        0,0,0,328,325,1,0,0,0,328,326,1,0,0,0,328,327,1,0,0,0,329,11,1,0,
        0,0,330,341,3,114,57,0,331,341,5,42,0,0,332,341,5,40,0,0,333,341,
        5,39,0,0,334,341,5,48,0,0,335,341,5,1,0,0,336,341,5,19,0,0,337,341,
        5,49,0,0,338,341,5,46,0,0,339,341,5,34,0,0,340,330,1,0,0,0,340,331,
        1,0,0,0,340,332,1,0,0,0,340,333,1,0,0,0,340,334,1,0,0,0,340,335,
        1,0,0,0,340,336,1,0,0,0,340,337,1,0,0,0,340,338,1,0,0,0,340,339,
        1,0,0,0,341,13,1,0,0,0,342,345,5,19,0,0,343,345,3,114,57,0,344,342,
        1,0,0,0,344,343,1,0,0,0,345,15,1,0,0,0,346,347,5,9,0,0,347,349,3,
        164,82,0,348,350,3,18,9,0,349,348,1,0,0,0,349,350,1,0,0,0,350,353,
        1,0,0,0,351,352,5,18,0,0,352,354,3,246,123,0,353,351,1,0,0,0,353,
        354,1,0,0,0,354,357,1,0,0,0,355,356,5,25,0,0,356,358,3,244,122,0,
        357,355,1,0,0,0,357,358,1,0,0,0,358,361,1,0,0,0,359,360,5,38,0,0,
        360,362,3,244,122,0,361,359,1,0,0,0,361,362,1,0,0,0,362,363,1,0,
        0,0,363,364,3,34,17,0,364,17,1,0,0,0,365,366,5,90,0,0,366,371,3,
        20,10,0,367,368,5,86,0,0,368,370,3,20,10,0,369,367,1,0,0,0,370,373,
        1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,
        1,0,0,0,374,375,5,89,0,0,375,19,1,0,0,0,376,378,3,114,57,0,377,376,
        1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,
        1,0,0,0,381,379,1,0,0,0,382,391,3,164,82,0,383,387,5,18,0,0,384,
        386,3,114,57,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,
        388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,392,3,22,11,0,391,
        383,1,0,0,0,391,392,1,0,0,0,392,21,1,0,0,0,393,398,3,246,123,0,394,
        395,5,107,0,0,395,397,3,246,123,0,396,394,1,0,0,0,397,400,1,0,0,
        0,398,396,1,0,0,0,398,399,1,0,0,0,399,23,1,0,0,0,400,398,1,0,0,0,
        401,402,5,16,0,0,402,405,3,164,82,0,403,404,5,25,0,0,404,406,3,244,
        122,0,405,403,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,409,5,
        81,0,0,408,410,3,26,13,0,409,408,1,0,0,0,409,410,1,0,0,0,410,412,
        1,0,0,0,411,413,5,86,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,415,
        1,0,0,0,414,416,3,30,15,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,
        1,0,0,0,417,418,5,82,0,0,418,25,1,0,0,0,419,424,3,28,14,0,420,421,
        5,86,0,0,421,423,3,28,14,0,422,420,1,0,0,0,423,426,1,0,0,0,424,422,
        1,0,0,0,424,425,1,0,0,0,425,27,1,0,0,0,426,424,1,0,0,0,427,429,3,
        114,57,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,
        1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,435,3,164,82,0,434,436,
        3,256,128,0,435,434,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,
        439,3,34,17,0,438,437,1,0,0,0,438,439,1,0,0,0,439,29,1,0,0,0,440,
        444,5,85,0,0,441,443,3,38,19,0,442,441,1,0,0,0,443,446,1,0,0,0,444,
        442,1,0,0,0,444,445,1,0,0,0,445,31,1,0,0,0,446,444,1,0,0,0,447,448,
        5,29,0,0,448,450,3,164,82,0,449,451,3,18,9,0,450,449,1,0,0,0,450,
        451,1,0,0,0,451,454,1,0,0,0,452,453,5,18,0,0,453,455,3,244,122,0,
        454,452,1,0,0,0,454,455,1,0,0,0,455,458,1,0,0,0,456,457,5,38,0,0,
        457,459,3,244,122,0,458,456,1,0,0,0,458,459,1,0,0,0,459,460,1,0,
        0,0,460,461,3,36,18,0,461,33,1,0,0,0,462,466,5,81,0,0,463,465,3,
        38,19,0,464,463,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,
        1,0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,82,0,0,470,35,
        1,0,0,0,471,475,5,81,0,0,472,474,3,58,29,0,473,472,1,0,0,0,474,477,
        1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,
        1,0,0,0,478,479,5,82,0,0,479,37,1,0,0,0,480,493,5,85,0,0,481,483,
        5,48,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,493,
        3,158,79,0,485,487,3,10,5,0,486,485,1,0,0,0,487,490,1,0,0,0,488,
        486,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,488,1,0,0,0,491,
        493,3,40,20,0,492,480,1,0,0,0,492,482,1,0,0,0,492,488,1,0,0,0,493,
        39,1,0,0,0,494,505,3,148,74,0,495,505,3,42,21,0,496,505,3,48,24,
        0,497,505,3,56,28,0,498,505,3,52,26,0,499,505,3,50,25,0,500,505,
        3,32,16,0,501,505,3,126,63,0,502,505,3,16,8,0,503,505,3,24,12,0,
        504,494,1,0,0,0,504,495,1,0,0,0,504,496,1,0,0,0,504,497,1,0,0,0,
        504,498,1,0,0,0,504,499,1,0,0,0,504,500,1,0,0,0,504,501,1,0,0,0,
        504,502,1,0,0,0,504,503,1,0,0,0,505,41,1,0,0,0,506,507,3,46,23,0,
        507,508,3,164,82,0,508,513,3,92,46,0,509,510,5,83,0,0,510,512,5,
        84,0,0,511,509,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,514,1,
        0,0,0,514,518,1,0,0,0,515,513,1,0,0,0,516,517,5,55,0,0,517,519,3,
        90,45,0,518,516,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,
        3,44,22,0,521,43,1,0,0,0,522,525,3,158,79,0,523,525,5,85,0,0,524,
        522,1,0,0,0,524,523,1,0,0,0,525,45,1,0,0,0,526,529,3,246,123,0,527,
        529,5,62,0,0,528,526,1,0,0,0,528,527,1,0,0,0,529,47,1,0,0,0,530,
        531,3,18,9,0,531,532,3,42,21,0,532,49,1,0,0,0,533,534,3,18,9,0,534,
        535,3,52,26,0,535,51,1,0,0,0,536,537,3,164,82,0,537,540,3,92,46,
        0,538,539,5,55,0,0,539,541,3,90,45,0,540,538,1,0,0,0,540,541,1,0,
        0,0,541,542,1,0,0,0,542,543,3,158,79,0,543,53,1,0,0,0,544,546,3,
        10,5,0,545,544,1,0,0,0,546,549,1,0,0,0,547,545,1,0,0,0,547,548,1,
        0,0,0,548,550,1,0,0,0,549,547,1,0,0,0,550,551,3,164,82,0,551,552,
        3,158,79,0,552,55,1,0,0,0,553,554,3,246,123,0,554,555,3,74,37,0,
        555,556,5,85,0,0,556,57,1,0,0,0,557,559,3,10,5,0,558,557,1,0,0,0,
        559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,
        562,560,1,0,0,0,563,566,3,60,30,0,564,566,5,85,0,0,565,560,1,0,0,
        0,565,564,1,0,0,0,566,59,1,0,0,0,567,576,3,148,74,0,568,576,3,62,
        31,0,569,576,3,66,33,0,570,576,3,70,35,0,571,576,3,32,16,0,572,576,
        3,126,63,0,573,576,3,16,8,0,574,576,3,24,12,0,575,567,1,0,0,0,575,
        568,1,0,0,0,575,569,1,0,0,0,575,570,1,0,0,0,575,571,1,0,0,0,575,
        572,1,0,0,0,575,573,1,0,0,0,575,574,1,0,0,0,576,61,1,0,0,0,577,578,
        3,246,123,0,578,583,3,64,32,0,579,580,5,86,0,0,580,582,3,64,32,0,
        581,579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,
        584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,85,0,0,587,63,1,0,0,0,
        588,593,3,164,82,0,589,590,5,83,0,0,590,592,5,84,0,0,591,589,1,0,
        0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,
        0,0,595,593,1,0,0,0,596,597,5,88,0,0,597,598,3,80,40,0,598,65,1,
        0,0,0,599,601,3,68,34,0,600,599,1,0,0,0,601,604,1,0,0,0,602,600,
        1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,602,1,0,0,0,605,606,
        3,72,36,0,606,67,1,0,0,0,607,614,3,114,57,0,608,614,5,42,0,0,609,
        614,5,1,0,0,610,614,5,12,0,0,611,614,5,48,0,0,612,614,5,49,0,0,613,
        607,1,0,0,0,613,608,1,0,0,0,613,609,1,0,0,0,613,610,1,0,0,0,613,
        611,1,0,0,0,613,612,1,0,0,0,614,69,1,0,0,0,615,617,3,68,34,0,616,
        615,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,
        621,1,0,0,0,620,618,1,0,0,0,621,622,3,18,9,0,622,623,3,72,36,0,623,
        71,1,0,0,0,624,626,3,114,57,0,625,624,1,0,0,0,626,629,1,0,0,0,627,
        625,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,627,1,0,0,0,630,
        631,3,46,23,0,631,632,3,164,82,0,632,637,3,92,46,0,633,634,5,83,
        0,0,634,636,5,84,0,0,635,633,1,0,0,0,636,639,1,0,0,0,637,635,1,0,
        0,0,637,638,1,0,0,0,638,642,1,0,0,0,639,637,1,0,0,0,640,641,5,55,
        0,0,641,643,3,90,45,0,642,640,1,0,0,0,642,643,1,0,0,0,643,644,1,
        0,0,0,644,645,3,44,22,0,645,73,1,0,0,0,646,651,3,76,38,0,647,648,
        5,86,0,0,648,650,3,76,38,0,649,647,1,0,0,0,650,653,1,0,0,0,651,649,
        1,0,0,0,651,652,1,0,0,0,652,75,1,0,0,0,653,651,1,0,0,0,654,657,3,
        78,39,0,655,656,5,88,0,0,656,658,3,80,40,0,657,655,1,0,0,0,657,658,
        1,0,0,0,658,77,1,0,0,0,659,664,3,164,82,0,660,661,5,83,0,0,661,663,
        5,84,0,0,662,660,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,
        1,0,0,0,665,79,1,0,0,0,666,664,1,0,0,0,667,670,3,82,41,0,668,670,
        3,198,99,0,669,667,1,0,0,0,669,668,1,0,0,0,670,81,1,0,0,0,671,683,
        5,81,0,0,672,677,3,80,40,0,673,674,5,86,0,0,674,676,3,80,40,0,675,
        673,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,
        681,1,0,0,0,679,677,1,0,0,0,680,682,5,86,0,0,681,680,1,0,0,0,681,
        682,1,0,0,0,682,684,1,0,0,0,683,672,1,0,0,0,683,684,1,0,0,0,684,
        685,1,0,0,0,685,686,5,82,0,0,686,83,1,0,0,0,687,688,3,86,43,0,688,
        692,5,87,0,0,689,691,3,114,57,0,690,689,1,0,0,0,691,694,1,0,0,0,
        692,690,1,0,0,0,692,693,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,
        695,687,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,699,3,166,83,
        0,698,700,3,250,125,0,699,698,1,0,0,0,699,700,1,0,0,0,700,702,1,
        0,0,0,701,695,1,0,0,0,702,703,1,0,0,0,703,701,1,0,0,0,703,704,1,
        0,0,0,704,718,1,0,0,0,705,709,5,87,0,0,706,708,3,114,57,0,707,706,
        1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,712,
        1,0,0,0,711,709,1,0,0,0,712,714,3,166,83,0,713,715,3,250,125,0,714,
        713,1,0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,705,1,0,0,0,717,
        720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,85,1,0,0,0,720,718,
        1,0,0,0,721,726,3,164,82,0,722,723,5,87,0,0,723,725,3,164,82,0,724,
        722,1,0,0,0,725,728,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,
        87,1,0,0,0,728,726,1,0,0,0,729,742,3,246,123,0,730,732,3,114,57,
        0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,
        0,734,736,1,0,0,0,735,733,1,0,0,0,736,739,5,93,0,0,737,738,7,0,0,
        0,738,740,3,246,123,0,739,737,1,0,0,0,739,740,1,0,0,0,740,742,1,
        0,0,0,741,729,1,0,0,0,741,733,1,0,0,0,742,89,1,0,0,0,743,748,3,104,
        52,0,744,745,5,86,0,0,745,747,3,104,52,0,746,744,1,0,0,0,747,750,
        1,0,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,91,1,0,0,0,750,748,1,
        0,0,0,751,763,5,79,0,0,752,755,3,94,47,0,753,755,3,98,49,0,754,752,
        1,0,0,0,754,753,1,0,0,0,755,760,1,0,0,0,756,757,5,86,0,0,757,759,
        3,96,48,0,758,756,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,
        1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,763,754,1,0,0,0,763,764,
        1,0,0,0,764,765,1,0,0,0,765,766,5,80,0,0,766,93,1,0,0,0,767,773,
        3,246,123,0,768,769,3,164,82,0,769,770,5,87,0,0,770,772,1,0,0,0,
        771,768,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,
        774,776,1,0,0,0,775,773,1,0,0,0,776,777,5,53,0,0,777,95,1,0,0,0,
        778,783,3,98,49,0,779,780,5,86,0,0,780,782,3,98,49,0,781,779,1,0,
        0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,97,1,0,0,
        0,785,783,1,0,0,0,786,788,3,14,7,0,787,786,1,0,0,0,788,791,1,0,0,
        0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,
        0,792,800,3,246,123,0,793,795,3,114,57,0,794,793,1,0,0,0,795,798,
        1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,798,796,
        1,0,0,0,799,801,5,125,0,0,800,796,1,0,0,0,800,801,1,0,0,0,801,802,
        1,0,0,0,802,803,3,78,39,0,803,99,1,0,0,0,804,809,3,102,51,0,805,
        806,5,86,0,0,806,808,3,102,51,0,807,805,1,0,0,0,808,811,1,0,0,0,
        809,807,1,0,0,0,809,810,1,0,0,0,810,101,1,0,0,0,811,809,1,0,0,0,
        812,814,3,14,7,0,813,812,1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,
        815,816,1,0,0,0,816,818,1,0,0,0,817,815,1,0,0,0,818,819,5,61,0,0,
        819,820,3,164,82,0,820,103,1,0,0,0,821,826,3,164,82,0,822,823,5,
        87,0,0,823,825,3,164,82,0,824,822,1,0,0,0,825,828,1,0,0,0,826,824,
        1,0,0,0,826,827,1,0,0,0,827,105,1,0,0,0,828,826,1,0,0,0,829,837,
        3,108,54,0,830,837,3,110,55,0,831,837,5,75,0,0,832,837,5,76,0,0,
        833,837,5,74,0,0,834,837,5,78,0,0,835,837,5,77,0,0,836,829,1,0,0,
        0,836,830,1,0,0,0,836,831,1,0,0,0,836,832,1,0,0,0,836,833,1,0,0,
        0,836,834,1,0,0,0,836,835,1,0,0,0,837,107,1,0,0,0,838,839,7,1,0,
        0,839,109,1,0,0,0,840,841,7,2,0,0,841,111,1,0,0,0,842,843,3,164,
        82,0,843,844,5,87,0,0,844,846,1,0,0,0,845,842,1,0,0,0,846,849,1,
        0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,847,1,
        0,0,0,850,851,5,124,0,0,851,852,3,164,82,0,852,113,1,0,0,0,853,854,
        5,124,0,0,854,855,3,104,52,0,855,857,1,0,0,0,856,858,3,116,58,0,
        857,856,1,0,0,0,857,858,1,0,0,0,858,115,1,0,0,0,859,868,5,79,0,0,
        860,865,3,118,59,0,861,862,5,86,0,0,862,864,3,118,59,0,863,861,1,
        0,0,0,864,867,1,0,0,0,865,863,1,0,0,0,865,866,1,0,0,0,866,869,1,
        0,0,0,867,865,1,0,0,0,868,860,1,0,0,0,868,869,1,0,0,0,869,870,1,
        0,0,0,870,871,5,80,0,0,871,117,1,0,0,0,872,873,4,59,0,0,873,879,
        3,120,60,0,874,875,3,164,82,0,875,876,5,88,0,0,876,877,3,120,60,
        0,877,879,1,0,0,0,878,872,1,0,0,0,878,874,1,0,0,0,879,119,1,0,0,
        0,880,898,3,198,99,0,881,898,3,114,57,0,882,891,5,81,0,0,883,888,
        3,120,60,0,884,885,5,86,0,0,885,887,3,120,60,0,886,884,1,0,0,0,887,
        890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,892,1,0,0,0,890,
        888,1,0,0,0,891,883,1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,
        895,5,86,0,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,
        898,5,82,0,0,897,880,1,0,0,0,897,881,1,0,0,0,897,882,1,0,0,0,898,
        121,1,0,0,0,899,903,3,198,99,0,900,903,3,114,57,0,901,903,3,124,
        62,0,902,899,1,0,0,0,902,900,1,0,0,0,902,901,1,0,0,0,903,123,1,0,
        0,0,904,913,5,81,0,0,905,910,3,122,61,0,906,907,5,86,0,0,907,909,
        3,122,61,0,908,906,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,
        1,0,0,0,911,914,1,0,0,0,912,910,1,0,0,0,913,905,1,0,0,0,913,914,
        1,0,0,0,914,916,1,0,0,0,915,917,5,86,0,0,916,915,1,0,0,0,916,917,
        1,0,0,0,917,918,1,0,0,0,918,919,5,82,0,0,919,125,1,0,0,0,920,921,
        5,124,0,0,921,922,5,29,0,0,922,923,3,164,82,0,923,924,3,128,64,0,
        924,127,1,0,0,0,925,929,5,81,0,0,926,928,3,130,65,0,927,926,1,0,
        0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,932,1,0,
        0,0,931,929,1,0,0,0,932,933,5,82,0,0,933,129,1,0,0,0,934,936,3,10,
        5,0,935,934,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,
        0,0,938,940,1,0,0,0,939,937,1,0,0,0,940,943,3,132,66,0,941,943,5,
        85,0,0,942,937,1,0,0,0,942,941,1,0,0,0,943,131,1,0,0,0,944,945,3,
        246,123,0,945,946,3,134,67,0,946,947,5,85,0,0,947,969,1,0,0,0,948,
        950,3,16,8,0,949,951,5,85,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,
        969,1,0,0,0,952,954,3,32,16,0,953,955,5,85,0,0,954,953,1,0,0,0,954,
        955,1,0,0,0,955,969,1,0,0,0,956,958,3,24,12,0,957,959,5,85,0,0,958,
        957,1,0,0,0,958,959,1,0,0,0,959,969,1,0,0,0,960,962,3,126,63,0,961,
        963,5,85,0,0,962,961,1,0,0,0,962,963,1,0,0,0,963,969,1,0,0,0,964,
        966,3,148,74,0,965,967,5,85,0,0,966,965,1,0,0,0,966,967,1,0,0,0,
        967,969,1,0,0,0,968,944,1,0,0,0,968,948,1,0,0,0,968,952,1,0,0,0,
        968,956,1,0,0,0,968,960,1,0,0,0,968,964,1,0,0,0,969,133,1,0,0,0,
        970,973,3,136,68,0,971,973,3,138,69,0,972,970,1,0,0,0,972,971,1,
        0,0,0,973,135,1,0,0,0,974,975,3,164,82,0,975,976,5,79,0,0,976,978,
        5,80,0,0,977,979,3,140,70,0,978,977,1,0,0,0,978,979,1,0,0,0,979,
        137,1,0,0,0,980,981,3,74,37,0,981,139,1,0,0,0,982,983,5,12,0,0,983,
        984,3,122,61,0,984,141,1,0,0,0,985,987,3,114,57,0,986,985,1,0,0,
        0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,992,1,0,0,
        0,990,988,1,0,0,0,991,993,5,35,0,0,992,991,1,0,0,0,992,993,1,0,0,
        0,993,994,1,0,0,0,994,995,5,31,0,0,995,996,3,104,52,0,996,1000,5,
        81,0,0,997,999,3,144,72,0,998,997,1,0,0,0,999,1002,1,0,0,0,1000,
        998,1,0,0,0,1000,1001,1,0,0,0,1001,1003,1,0,0,0,1002,1000,1,0,0,
        0,1003,1004,5,82,0,0,1004,143,1,0,0,0,1005,1009,5,44,0,0,1006,1008,
        3,146,73,0,1007,1006,1,0,0,0,1008,1011,1,0,0,0,1009,1007,1,0,0,0,
        1009,1010,1,0,0,0,1010,1012,1,0,0,0,1011,1009,1,0,0,0,1012,1013,
        3,104,52,0,1013,1014,5,85,0,0,1014,1063,1,0,0,0,1015,1016,5,17,0,
        0,1016,1026,3,104,52,0,1017,1018,5,56,0,0,1018,1023,3,104,52,0,1019,
        1020,5,86,0,0,1020,1022,3,104,52,0,1021,1019,1,0,0,0,1022,1025,1,
        0,0,0,1023,1021,1,0,0,0,1023,1024,1,0,0,0,1024,1027,1,0,0,0,1025,
        1023,1,0,0,0,1026,1017,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,
        0,1028,1029,5,85,0,0,1029,1063,1,0,0,0,1030,1031,5,36,0,0,1031,1041,
        3,104,52,0,1032,1033,5,56,0,0,1033,1038,3,104,52,0,1034,1035,5,86,
        0,0,1035,1037,3,104,52,0,1036,1034,1,0,0,0,1037,1040,1,0,0,0,1038,
        1036,1,0,0,0,1038,1039,1,0,0,0,1039,1042,1,0,0,0,1040,1038,1,0,0,
        0,1041,1032,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1044,
        5,85,0,0,1044,1063,1,0,0,0,1045,1046,5,60,0,0,1046,1047,3,104,52,
        0,1047,1048,5,85,0,0,1048,1063,1,0,0,0,1049,1050,5,41,0,0,1050,1051,
        3,104,52,0,1051,1052,5,66,0,0,1052,1057,3,104,52,0,1053,1054,5,86,
        0,0,1054,1056,3,104,52,0,1055,1053,1,0,0,0,1056,1059,1,0,0,0,1057,
        1055,1,0,0,0,1057,1058,1,0,0,0,1058,1060,1,0,0,0,1059,1057,1,0,0,
        0,1060,1061,5,85,0,0,1061,1063,1,0,0,0,1062,1005,1,0,0,0,1062,1015,
        1,0,0,0,1062,1030,1,0,0,0,1062,1045,1,0,0,0,1062,1049,1,0,0,0,1063,
        145,1,0,0,0,1064,1065,7,3,0,0,1065,147,1,0,0,0,1066,1067,5,43,0,
        0,1067,1069,3,164,82,0,1068,1070,3,18,9,0,1069,1068,1,0,0,0,1069,
        1070,1,0,0,0,1070,1071,1,0,0,0,1071,1074,3,150,75,0,1072,1073,5,
        25,0,0,1073,1075,3,244,122,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,
        1075,1076,1,0,0,0,1076,1077,3,156,78,0,1077,149,1,0,0,0,1078,1080,
        5,79,0,0,1079,1081,3,152,76,0,1080,1079,1,0,0,0,1080,1081,1,0,0,
        0,1081,1082,1,0,0,0,1082,1083,5,80,0,0,1083,151,1,0,0,0,1084,1089,
        3,154,77,0,1085,1086,5,86,0,0,1086,1088,3,154,77,0,1087,1085,1,0,
        0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,1092,
        1,0,0,0,1091,1089,1,0,0,0,1092,1093,4,76,1,0,1093,153,1,0,0,0,1094,
        1096,3,114,57,0,1095,1094,1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,
        0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,0,1099,1097,1,0,0,0,1100,
        1108,3,246,123,0,1101,1103,3,114,57,0,1102,1101,1,0,0,0,1103,1106,
        1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,1107,1,0,0,0,1106,
        1104,1,0,0,0,1107,1109,5,125,0,0,1108,1104,1,0,0,0,1108,1109,1,0,
        0,0,1109,1110,1,0,0,0,1110,1111,3,164,82,0,1111,155,1,0,0,0,1112,
        1117,5,81,0,0,1113,1116,3,38,19,0,1114,1116,3,54,27,0,1115,1113,
        1,0,0,0,1115,1114,1,0,0,0,1116,1119,1,0,0,0,1117,1115,1,0,0,0,1117,
        1118,1,0,0,0,1118,1120,1,0,0,0,1119,1117,1,0,0,0,1120,1121,5,82,
        0,0,1121,157,1,0,0,0,1122,1126,5,81,0,0,1123,1125,3,160,80,0,1124,
        1123,1,0,0,0,1125,1128,1,0,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,
        0,1127,1129,1,0,0,0,1128,1126,1,0,0,0,1129,1130,5,82,0,0,1130,159,
        1,0,0,0,1131,1132,3,162,81,0,1132,1133,5,85,0,0,1133,1137,1,0,0,
        0,1134,1137,3,168,84,0,1135,1137,3,170,85,0,1136,1131,1,0,0,0,1136,
        1134,1,0,0,0,1136,1135,1,0,0,0,1137,161,1,0,0,0,1138,1140,3,14,7,
        0,1139,1138,1,0,0,0,1140,1143,1,0,0,0,1141,1139,1,0,0,0,1141,1142,
        1,0,0,0,1142,1152,1,0,0,0,1143,1141,1,0,0,0,1144,1145,5,61,0,0,1145,
        1146,3,164,82,0,1146,1147,5,88,0,0,1147,1148,3,198,99,0,1148,1153,
        1,0,0,0,1149,1150,3,246,123,0,1150,1151,3,74,37,0,1151,1153,1,0,
        0,0,1152,1144,1,0,0,0,1152,1149,1,0,0,0,1153,163,1,0,0,0,1154,1155,
        7,4,0,0,1155,165,1,0,0,0,1156,1157,7,5,0,0,1157,167,1,0,0,0,1158,
        1160,3,12,6,0,1159,1158,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,
        0,0,1161,1162,1,0,0,0,1162,1168,1,0,0,0,1163,1161,1,0,0,0,1164,1169,
        3,16,8,0,1165,1169,3,32,16,0,1166,1169,3,148,74,0,1167,1169,3,24,
        12,0,1168,1164,1,0,0,0,1168,1165,1,0,0,0,1168,1166,1,0,0,0,1168,
        1167,1,0,0,0,1169,169,1,0,0,0,1170,1294,3,158,79,0,1171,1172,5,2,
        0,0,1172,1175,3,198,99,0,1173,1174,5,94,0,0,1174,1176,3,198,99,0,
        1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1178,
        5,85,0,0,1178,1294,1,0,0,0,1179,1180,5,24,0,0,1180,1181,5,79,0,0,
        1181,1182,3,198,99,0,1182,1183,5,80,0,0,1183,1186,3,170,85,0,1184,
        1185,5,15,0,0,1185,1187,3,170,85,0,1186,1184,1,0,0,0,1186,1187,1,
        0,0,0,1187,1294,1,0,0,0,1188,1189,5,22,0,0,1189,1190,5,79,0,0,1190,
        1191,3,188,94,0,1191,1192,5,80,0,0,1192,1193,3,170,85,0,1193,1294,
        1,0,0,0,1194,1195,5,65,0,0,1195,1196,5,79,0,0,1196,1197,3,198,99,
        0,1197,1198,5,80,0,0,1198,1199,3,170,85,0,1199,1294,1,0,0,0,1200,
        1201,5,13,0,0,1201,1202,3,170,85,0,1202,1203,5,65,0,0,1203,1204,
        5,79,0,0,1204,1205,3,198,99,0,1205,1206,5,80,0,0,1206,1207,5,85,
        0,0,1207,1294,1,0,0,0,1208,1209,5,59,0,0,1209,1219,3,158,79,0,1210,
        1212,3,172,86,0,1211,1210,1,0,0,0,1212,1213,1,0,0,0,1213,1211,1,
        0,0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,1215,1217,3,176,88,0,1216,
        1215,1,0,0,0,1216,1217,1,0,0,0,1217,1220,1,0,0,0,1218,1220,3,176,
        88,0,1219,1211,1,0,0,0,1219,1218,1,0,0,0,1220,1294,1,0,0,0,1221,
        1222,5,59,0,0,1222,1223,3,178,89,0,1223,1227,3,158,79,0,1224,1226,
        3,172,86,0,1225,1224,1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,
        1227,1228,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1230,1232,
        3,176,88,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1294,1,0,0,0,
        1233,1234,5,51,0,0,1234,1235,5,79,0,0,1235,1236,3,198,99,0,1236,
        1237,5,80,0,0,1237,1241,5,81,0,0,1238,1240,3,184,92,0,1239,1238,
        1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,
        1247,1,0,0,0,1243,1241,1,0,0,0,1244,1246,3,186,93,0,1245,1244,1,
        0,0,0,1246,1249,1,0,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,
        1250,1,0,0,0,1249,1247,1,0,0,0,1250,1251,5,82,0,0,1251,1294,1,0,
        0,0,1252,1253,5,52,0,0,1253,1254,5,79,0,0,1254,1255,3,198,99,0,1255,
        1256,5,80,0,0,1256,1257,3,158,79,0,1257,1294,1,0,0,0,1258,1260,5,
        45,0,0,1259,1261,3,198,99,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,
        1261,1262,1,0,0,0,1262,1294,5,85,0,0,1263,1264,5,54,0,0,1264,1265,
        3,198,99,0,1265,1266,5,85,0,0,1266,1294,1,0,0,0,1267,1269,5,4,0,
        0,1268,1270,3,164,82,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,
        1271,1,0,0,0,1271,1294,5,85,0,0,1272,1274,5,11,0,0,1273,1275,3,164,
        82,0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,
        1294,5,85,0,0,1277,1278,5,67,0,0,1278,1279,3,198,99,0,1279,1280,
        5,85,0,0,1280,1294,1,0,0,0,1281,1294,5,85,0,0,1282,1283,3,198,99,
        0,1283,1284,5,85,0,0,1284,1294,1,0,0,0,1285,1287,3,214,107,0,1286,
        1288,5,85,0,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,1288,1294,1,0,
        0,0,1289,1290,3,164,82,0,1290,1291,5,94,0,0,1291,1292,3,170,85,0,
        1292,1294,1,0,0,0,1293,1170,1,0,0,0,1293,1171,1,0,0,0,1293,1179,
        1,0,0,0,1293,1188,1,0,0,0,1293,1194,1,0,0,0,1293,1200,1,0,0,0,1293,
        1208,1,0,0,0,1293,1221,1,0,0,0,1293,1233,1,0,0,0,1293,1252,1,0,0,
        0,1293,1258,1,0,0,0,1293,1263,1,0,0,0,1293,1267,1,0,0,0,1293,1272,
        1,0,0,0,1293,1277,1,0,0,0,1293,1281,1,0,0,0,1293,1282,1,0,0,0,1293,
        1285,1,0,0,0,1293,1289,1,0,0,0,1294,171,1,0,0,0,1295,1296,5,7,0,
        0,1296,1300,5,79,0,0,1297,1299,3,14,7,0,1298,1297,1,0,0,0,1299,1302,
        1,0,0,0,1300,1298,1,0,0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,0,1302,
        1300,1,0,0,0,1303,1304,3,174,87,0,1304,1305,3,164,82,0,1305,1306,
        5,80,0,0,1306,1307,3,158,79,0,1307,173,1,0,0,0,1308,1313,3,104,52,
        0,1309,1310,5,108,0,0,1310,1312,3,104,52,0,1311,1309,1,0,0,0,1312,
        1315,1,0,0,0,1313,1311,1,0,0,0,1313,1314,1,0,0,0,1314,175,1,0,0,
        0,1315,1313,1,0,0,0,1316,1317,5,20,0,0,1317,1318,3,158,79,0,1318,
        177,1,0,0,0,1319,1320,5,79,0,0,1320,1322,3,180,90,0,1321,1323,5,
        85,0,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1324,1,0,0,0,1324,
        1325,5,80,0,0,1325,179,1,0,0,0,1326,1331,3,182,91,0,1327,1328,5,
        85,0,0,1328,1330,3,182,91,0,1329,1327,1,0,0,0,1330,1333,1,0,0,0,
        1331,1329,1,0,0,0,1331,1332,1,0,0,0,1332,181,1,0,0,0,1333,1331,1,
        0,0,0,1334,1336,3,14,7,0,1335,1334,1,0,0,0,1336,1339,1,0,0,0,1337,
        1335,1,0,0,0,1337,1338,1,0,0,0,1338,1345,1,0,0,0,1339,1337,1,0,0,
        0,1340,1341,3,224,112,0,1341,1342,3,78,39,0,1342,1346,1,0,0,0,1343,
        1344,5,61,0,0,1344,1346,3,164,82,0,1345,1340,1,0,0,0,1345,1343,1,
        0,0,0,1346,1347,1,0,0,0,1347,1348,5,88,0,0,1348,1349,3,198,99,0,
        1349,1352,1,0,0,0,1350,1352,3,104,52,0,1351,1337,1,0,0,0,1351,1350,
        1,0,0,0,1352,183,1,0,0,0,1353,1354,3,186,93,0,1354,1355,5,94,0,0,
        1355,1357,1,0,0,0,1356,1353,1,0,0,0,1357,1358,1,0,0,0,1358,1356,
        1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,0,0,0,1360,1362,3,160,80,0,
        1361,1360,1,0,0,0,1362,1363,1,0,0,0,1363,1361,1,0,0,0,1363,1364,
        1,0,0,0,1364,185,1,0,0,0,1365,1371,5,6,0,0,1366,1372,3,198,99,0,
        1367,1372,5,129,0,0,1368,1369,3,246,123,0,1369,1370,3,164,82,0,1370,
        1372,1,0,0,0,1371,1366,1,0,0,0,1371,1367,1,0,0,0,1371,1368,1,0,0,
        0,1372,1375,1,0,0,0,1373,1375,5,12,0,0,1374,1365,1,0,0,0,1374,1373,
        1,0,0,0,1375,187,1,0,0,0,1376,1389,3,192,96,0,1377,1379,3,190,95,
        0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1382,
        5,85,0,0,1381,1383,3,198,99,0,1382,1381,1,0,0,0,1382,1383,1,0,0,
        0,1383,1384,1,0,0,0,1384,1386,5,85,0,0,1385,1387,3,194,97,0,1386,
        1385,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,0,0,1388,1376,1,0,0,
        0,1388,1378,1,0,0,0,1389,189,1,0,0,0,1390,1393,3,162,81,0,1391,1393,
        3,194,97,0,1392,1390,1,0,0,0,1392,1391,1,0,0,0,1393,191,1,0,0,0,
        1394,1396,3,14,7,0,1395,1394,1,0,0,0,1396,1399,1,0,0,0,1397,1395,
        1,0,0,0,1397,1398,1,0,0,0,1398,1402,1,0,0,0,1399,1397,1,0,0,0,1400,
        1403,3,246,123,0,1401,1403,5,61,0,0,1402,1400,1,0,0,0,1402,1401,
        1,0,0,0,1403,1404,1,0,0,0,1404,1405,3,78,39,0,1405,1406,5,94,0,0,
        1406,1407,3,198,99,0,1407,193,1,0,0,0,1408,1413,3,198,99,0,1409,
        1410,5,86,0,0,1410,1412,3,198,99,0,1411,1409,1,0,0,0,1412,1415,1,
        0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,195,1,0,0,0,1415,
        1413,1,0,0,0,1416,1420,3,164,82,0,1417,1420,5,53,0,0,1418,1420,5,
        50,0,0,1419,1416,1,0,0,0,1419,1417,1,0,0,0,1419,1418,1,0,0,0,1420,
        1421,1,0,0,0,1421,1422,3,256,128,0,1422,197,1,0,0,0,1423,1424,6,
        99,-1,0,1424,1467,3,212,106,0,1425,1467,3,196,98,0,1426,1427,3,246,
        123,0,1427,1433,5,123,0,0,1428,1430,3,250,125,0,1429,1428,1,0,0,
        0,1429,1430,1,0,0,0,1430,1431,1,0,0,0,1431,1434,3,164,82,0,1432,
        1434,5,33,0,0,1433,1429,1,0,0,0,1433,1432,1,0,0,0,1434,1467,1,0,
        0,0,1435,1436,3,84,42,0,1436,1438,5,123,0,0,1437,1439,3,250,125,
        0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1441,
        5,33,0,0,1441,1467,1,0,0,0,1442,1467,3,214,107,0,1443,1444,7,6,0,
        0,1444,1467,3,198,99,17,1445,1449,5,79,0,0,1446,1448,3,114,57,0,
        1447,1446,1,0,0,0,1448,1451,1,0,0,0,1449,1447,1,0,0,0,1449,1450,
        1,0,0,0,1450,1452,1,0,0,0,1451,1449,1,0,0,0,1452,1457,3,246,123,
        0,1453,1454,5,107,0,0,1454,1456,3,246,123,0,1455,1453,1,0,0,0,1456,
        1459,1,0,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,
        0,1459,1457,1,0,0,0,1460,1461,5,80,0,0,1461,1462,3,198,99,16,1462,
        1467,1,0,0,0,1463,1464,5,33,0,0,1464,1467,3,226,113,0,1465,1467,
        3,206,103,0,1466,1423,1,0,0,0,1466,1425,1,0,0,0,1466,1426,1,0,0,
        0,1466,1435,1,0,0,0,1466,1442,1,0,0,0,1466,1443,1,0,0,0,1466,1445,
        1,0,0,0,1466,1463,1,0,0,0,1466,1465,1,0,0,0,1467,1551,1,0,0,0,1468,
        1469,10,14,0,0,1469,1470,7,7,0,0,1470,1550,3,198,99,15,1471,1472,
        10,13,0,0,1472,1473,7,8,0,0,1473,1550,3,198,99,14,1474,1482,10,12,
        0,0,1475,1476,5,90,0,0,1476,1483,5,90,0,0,1477,1478,5,89,0,0,1478,
        1479,5,89,0,0,1479,1483,5,89,0,0,1480,1481,5,89,0,0,1481,1483,5,
        89,0,0,1482,1475,1,0,0,0,1482,1477,1,0,0,0,1482,1480,1,0,0,0,1483,
        1484,1,0,0,0,1484,1550,3,198,99,13,1485,1486,10,11,0,0,1486,1487,
        7,9,0,0,1487,1550,3,198,99,12,1488,1489,10,9,0,0,1489,1490,7,10,
        0,0,1490,1550,3,198,99,10,1491,1492,10,8,0,0,1492,1493,5,107,0,0,
        1493,1550,3,198,99,9,1494,1495,10,7,0,0,1495,1496,5,109,0,0,1496,
        1550,3,198,99,8,1497,1498,10,6,0,0,1498,1499,5,108,0,0,1499,1550,
        3,198,99,7,1500,1501,10,5,0,0,1501,1502,5,99,0,0,1502,1550,3,198,
        99,6,1503,1504,10,4,0,0,1504,1505,5,100,0,0,1505,1550,3,198,99,5,
        1506,1507,10,3,0,0,1507,1508,5,93,0,0,1508,1509,3,198,99,0,1509,
        1510,5,94,0,0,1510,1511,3,198,99,3,1511,1550,1,0,0,0,1512,1513,10,
        2,0,0,1513,1514,7,11,0,0,1514,1550,3,198,99,2,1515,1516,10,25,0,
        0,1516,1517,5,83,0,0,1517,1518,3,198,99,0,1518,1519,5,84,0,0,1519,
        1550,1,0,0,0,1520,1521,10,24,0,0,1521,1533,5,87,0,0,1522,1534,3,
        164,82,0,1523,1534,3,196,98,0,1524,1534,5,53,0,0,1525,1527,5,33,
        0,0,1526,1528,3,242,121,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,
        1529,1,0,0,0,1529,1534,3,230,115,0,1530,1531,5,50,0,0,1531,1534,
        3,252,126,0,1532,1534,3,236,118,0,1533,1522,1,0,0,0,1533,1523,1,
        0,0,0,1533,1524,1,0,0,0,1533,1525,1,0,0,0,1533,1530,1,0,0,0,1533,
        1532,1,0,0,0,1534,1550,1,0,0,0,1535,1536,10,22,0,0,1536,1538,5,123,
        0,0,1537,1539,3,250,125,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,
        1540,1,0,0,0,1540,1550,3,164,82,0,1541,1542,10,18,0,0,1542,1550,
        7,12,0,0,1543,1544,10,10,0,0,1544,1547,5,27,0,0,1545,1548,3,246,
        123,0,1546,1548,3,200,100,0,1547,1545,1,0,0,0,1547,1546,1,0,0,0,
        1548,1550,1,0,0,0,1549,1468,1,0,0,0,1549,1471,1,0,0,0,1549,1474,
        1,0,0,0,1549,1485,1,0,0,0,1549,1488,1,0,0,0,1549,1491,1,0,0,0,1549,
        1494,1,0,0,0,1549,1497,1,0,0,0,1549,1500,1,0,0,0,1549,1503,1,0,0,
        0,1549,1506,1,0,0,0,1549,1512,1,0,0,0,1549,1515,1,0,0,0,1549,1520,
        1,0,0,0,1549,1535,1,0,0,0,1549,1541,1,0,0,0,1549,1543,1,0,0,0,1550,
        1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,199,1,0,0,
        0,1553,1551,1,0,0,0,1554,1556,3,14,7,0,1555,1554,1,0,0,0,1556,1559,
        1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1560,1,0,0,0,1559,
        1557,1,0,0,0,1560,1564,3,246,123,0,1561,1563,3,114,57,0,1562,1561,
        1,0,0,0,1563,1566,1,0,0,0,1564,1562,1,0,0,0,1564,1565,1,0,0,0,1565,
        1567,1,0,0,0,1566,1564,1,0,0,0,1567,1568,3,74,37,0,1568,1577,1,0,
        0,0,1569,1570,3,246,123,0,1570,1572,5,79,0,0,1571,1573,3,202,101,
        0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,1574,1575,
        5,80,0,0,1575,1577,1,0,0,0,1576,1557,1,0,0,0,1576,1569,1,0,0,0,1577,
        201,1,0,0,0,1578,1583,3,204,102,0,1579,1580,5,86,0,0,1580,1582,3,
        204,102,0,1581,1579,1,0,0,0,1582,1585,1,0,0,0,1583,1581,1,0,0,0,
        1583,1584,1,0,0,0,1584,203,1,0,0,0,1585,1583,1,0,0,0,1586,1587,3,
        200,100,0,1587,205,1,0,0,0,1588,1589,3,208,104,0,1589,1590,5,122,
        0,0,1590,1591,3,210,105,0,1591,207,1,0,0,0,1592,1615,3,164,82,0,
        1593,1595,5,79,0,0,1594,1596,3,96,48,0,1595,1594,1,0,0,0,1595,1596,
        1,0,0,0,1596,1597,1,0,0,0,1597,1615,5,80,0,0,1598,1599,5,79,0,0,
        1599,1604,3,164,82,0,1600,1601,5,86,0,0,1601,1603,3,164,82,0,1602,
        1600,1,0,0,0,1603,1606,1,0,0,0,1604,1602,1,0,0,0,1604,1605,1,0,0,
        0,1605,1607,1,0,0,0,1606,1604,1,0,0,0,1607,1608,5,80,0,0,1608,1615,
        1,0,0,0,1609,1611,5,79,0,0,1610,1612,3,100,50,0,1611,1610,1,0,0,
        0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1615,5,80,0,0,1614,1592,
        1,0,0,0,1614,1593,1,0,0,0,1614,1598,1,0,0,0,1614,1609,1,0,0,0,1615,
        209,1,0,0,0,1616,1619,3,198,99,0,1617,1619,3,158,79,0,1618,1616,
        1,0,0,0,1618,1617,1,0,0,0,1619,211,1,0,0,0,1620,1621,5,79,0,0,1621,
        1622,3,198,99,0,1622,1623,5,80,0,0,1623,1639,1,0,0,0,1624,1639,5,
        53,0,0,1625,1639,5,50,0,0,1626,1639,3,106,53,0,1627,1639,3,164,82,
        0,1628,1629,3,46,23,0,1629,1630,5,87,0,0,1630,1631,5,9,0,0,1631,
        1639,1,0,0,0,1632,1636,3,242,121,0,1633,1637,3,254,127,0,1634,1635,
        5,53,0,0,1635,1637,3,256,128,0,1636,1633,1,0,0,0,1636,1634,1,0,0,
        0,1637,1639,1,0,0,0,1638,1620,1,0,0,0,1638,1624,1,0,0,0,1638,1625,
        1,0,0,0,1638,1626,1,0,0,0,1638,1627,1,0,0,0,1638,1628,1,0,0,0,1638,
        1632,1,0,0,0,1639,213,1,0,0,0,1640,1641,5,51,0,0,1641,1642,5,79,
        0,0,1642,1643,3,198,99,0,1643,1644,5,80,0,0,1644,1648,5,81,0,0,1645,
        1647,3,216,108,0,1646,1645,1,0,0,0,1647,1650,1,0,0,0,1648,1646,1,
        0,0,0,1648,1649,1,0,0,0,1649,1651,1,0,0,0,1650,1648,1,0,0,0,1651,
        1652,5,82,0,0,1652,215,1,0,0,0,1653,1671,5,6,0,0,1654,1672,3,194,
        97,0,1655,1658,5,78,0,0,1656,1657,5,86,0,0,1657,1659,5,12,0,0,1658,
        1656,1,0,0,0,1658,1659,1,0,0,0,1659,1672,1,0,0,0,1660,1665,3,220,
        110,0,1661,1662,5,86,0,0,1662,1664,3,220,110,0,1663,1661,1,0,0,0,
        1664,1667,1,0,0,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1669,
        1,0,0,0,1667,1665,1,0,0,0,1668,1670,3,218,109,0,1669,1668,1,0,0,
        0,1669,1670,1,0,0,0,1670,1672,1,0,0,0,1671,1654,1,0,0,0,1671,1655,
        1,0,0,0,1671,1660,1,0,0,0,1672,1673,1,0,0,0,1673,1674,7,13,0,0,1674,
        1679,3,222,111,0,1675,1676,5,12,0,0,1676,1677,7,13,0,0,1677,1679,
        3,222,111,0,1678,1653,1,0,0,0,1678,1675,1,0,0,0,1679,217,1,0,0,0,
        1680,1681,5,64,0,0,1681,1682,3,198,99,0,1682,219,1,0,0,0,1683,1684,
        3,200,100,0,1684,221,1,0,0,0,1685,1693,3,158,79,0,1686,1688,3,160,
        80,0,1687,1686,1,0,0,0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,
        1690,1,0,0,0,1690,1693,1,0,0,0,1691,1689,1,0,0,0,1692,1685,1,0,0,
        0,1692,1689,1,0,0,0,1693,223,1,0,0,0,1694,1695,3,84,42,0,1695,225,
        1,0,0,0,1696,1698,3,242,121,0,1697,1696,1,0,0,0,1697,1698,1,0,0,
        0,1698,1699,1,0,0,0,1699,1700,3,228,114,0,1700,1701,3,234,117,0,
        1701,1706,1,0,0,0,1702,1703,3,228,114,0,1703,1704,3,232,116,0,1704,
        1706,1,0,0,0,1705,1697,1,0,0,0,1705,1702,1,0,0,0,1706,227,1,0,0,
        0,1707,1709,3,164,82,0,1708,1710,3,238,119,0,1709,1708,1,0,0,0,1709,
        1710,1,0,0,0,1710,1718,1,0,0,0,1711,1712,5,87,0,0,1712,1714,3,164,
        82,0,1713,1715,3,238,119,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,
        1717,1,0,0,0,1716,1711,1,0,0,0,1717,1720,1,0,0,0,1718,1716,1,0,0,
        0,1718,1719,1,0,0,0,1719,1723,1,0,0,0,1720,1718,1,0,0,0,1721,1723,
        3,248,124,0,1722,1707,1,0,0,0,1722,1721,1,0,0,0,1723,229,1,0,0,0,
        1724,1726,3,164,82,0,1725,1727,3,240,120,0,1726,1725,1,0,0,0,1726,
        1727,1,0,0,0,1727,1728,1,0,0,0,1728,1729,3,234,117,0,1729,231,1,
        0,0,0,1730,1731,5,83,0,0,1731,1733,5,84,0,0,1732,1730,1,0,0,0,1733,
        1734,1,0,0,0,1734,1732,1,0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,
        0,1736,1753,3,82,41,0,1737,1738,5,83,0,0,1738,1739,3,198,99,0,1739,
        1740,5,84,0,0,1740,1742,1,0,0,0,1741,1737,1,0,0,0,1742,1743,1,0,
        0,0,1743,1741,1,0,0,0,1743,1744,1,0,0,0,1744,1749,1,0,0,0,1745,1746,
        5,83,0,0,1746,1748,5,84,0,0,1747,1745,1,0,0,0,1748,1751,1,0,0,0,
        1749,1747,1,0,0,0,1749,1750,1,0,0,0,1750,1753,1,0,0,0,1751,1749,
        1,0,0,0,1752,1732,1,0,0,0,1752,1741,1,0,0,0,1753,233,1,0,0,0,1754,
        1756,3,256,128,0,1755,1757,3,34,17,0,1756,1755,1,0,0,0,1756,1757,
        1,0,0,0,1757,235,1,0,0,0,1758,1759,3,242,121,0,1759,1760,3,254,127,
        0,1760,237,1,0,0,0,1761,1762,5,90,0,0,1762,1765,5,89,0,0,1763,1765,
        3,250,125,0,1764,1761,1,0,0,0,1764,1763,1,0,0,0,1765,239,1,0,0,0,
        1766,1767,5,90,0,0,1767,1770,5,89,0,0,1768,1770,3,242,121,0,1769,
        1766,1,0,0,0,1769,1768,1,0,0,0,1770,241,1,0,0,0,1771,1772,5,90,0,
        0,1772,1773,3,244,122,0,1773,1774,5,89,0,0,1774,243,1,0,0,0,1775,
        1780,3,246,123,0,1776,1777,5,86,0,0,1777,1779,3,246,123,0,1778,1776,
        1,0,0,0,1779,1782,1,0,0,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,
        245,1,0,0,0,1782,1780,1,0,0,0,1783,1785,3,114,57,0,1784,1783,1,0,
        0,0,1785,1788,1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,1791,
        1,0,0,0,1788,1786,1,0,0,0,1789,1792,3,224,112,0,1790,1792,3,248,
        124,0,1791,1789,1,0,0,0,1791,1790,1,0,0,0,1792,1803,1,0,0,0,1793,
        1795,3,114,57,0,1794,1793,1,0,0,0,1795,1798,1,0,0,0,1796,1794,1,
        0,0,0,1796,1797,1,0,0,0,1797,1799,1,0,0,0,1798,1796,1,0,0,0,1799,
        1800,5,83,0,0,1800,1802,5,84,0,0,1801,1796,1,0,0,0,1802,1805,1,0,
        0,0,1803,1801,1,0,0,0,1803,1804,1,0,0,0,1804,247,1,0,0,0,1805,1803,
        1,0,0,0,1806,1807,7,14,0,0,1807,249,1,0,0,0,1808,1809,5,90,0,0,1809,
        1814,3,88,44,0,1810,1811,5,86,0,0,1811,1813,3,88,44,0,1812,1810,
        1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,1,0,0,0,1815,
        1817,1,0,0,0,1816,1814,1,0,0,0,1817,1818,5,89,0,0,1818,251,1,0,0,
        0,1819,1829,3,256,128,0,1820,1822,5,87,0,0,1821,1823,3,250,125,0,
        1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1826,
        3,164,82,0,1825,1827,3,256,128,0,1826,1825,1,0,0,0,1826,1827,1,0,
        0,0,1827,1829,1,0,0,0,1828,1819,1,0,0,0,1828,1820,1,0,0,0,1829,253,
        1,0,0,0,1830,1831,5,50,0,0,1831,1836,3,252,126,0,1832,1833,3,164,
        82,0,1833,1834,3,256,128,0,1834,1836,1,0,0,0,1835,1830,1,0,0,0,1835,
        1832,1,0,0,0,1836,255,1,0,0,0,1837,1839,5,79,0,0,1838,1840,3,194,
        97,0,1839,1838,1,0,0,0,1839,1840,1,0,0,0,1840,1841,1,0,0,0,1841,
        1842,5,80,0,0,1842,257,1,0,0,0,231,259,263,265,270,272,279,284,292,
        301,306,313,321,328,340,344,349,353,357,361,371,379,387,391,398,
        405,409,412,415,424,430,435,438,444,450,454,458,466,475,482,488,
        492,504,513,518,524,528,540,547,560,565,575,583,593,602,613,618,
        627,637,642,651,657,664,669,677,681,683,692,695,699,703,709,714,
        718,726,733,739,741,748,754,760,763,773,783,789,796,800,809,815,
        826,836,847,857,865,868,878,888,891,894,897,902,910,913,916,929,
        937,942,950,954,958,962,966,968,972,978,988,992,1000,1009,1023,1026,
        1038,1041,1057,1062,1069,1074,1080,1089,1097,1104,1108,1115,1117,
        1126,1136,1141,1152,1161,1168,1175,1186,1213,1216,1219,1227,1231,
        1241,1247,1260,1269,1274,1287,1293,1300,1313,1322,1331,1337,1345,
        1351,1358,1363,1371,1374,1378,1382,1386,1388,1392,1397,1402,1413,
        1419,1429,1433,1438,1449,1457,1466,1482,1527,1533,1538,1547,1549,
        1551,1557,1564,1572,1576,1583,1595,1604,1611,1614,1618,1636,1638,
        1648,1658,1665,1669,1671,1678,1689,1692,1697,1705,1709,1714,1718,
        1722,1726,1734,1743,1749,1752,1756,1764,1769,1780,1786,1791,1796,
        1803,1814,1822,1826,1828,1835,1839
    ]

class JavaParser ( JavaParserBase ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'exports'", "'extends'", 
                     "'final'", "'finally'", "'float'", "'for'", "'goto'", 
                     "'if'", "'implements'", "'import'", "'instanceof'", 
                     "'int'", "'interface'", "'long'", "'module'", "'native'", 
                     "'new'", "'non-sealed'", "'open'", "'opens'", "'package'", 
                     "'permits'", "'private'", "'protected'", "'provides'", 
                     "'public'", "'record'", "'requires'", "'return'", "'sealed'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'to'", "'transient'", "'transitive'", "'try'", "'uses'", 
                     "'var'", "'void'", "'volatile'", "'when'", "'while'", 
                     "'with'", "'yield'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
                     "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", 
                     "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXPORTS", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
                      "FOR", "GOTO", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", 
                      "INT", "INTERFACE", "LONG", "MODULE", "NATIVE", "NEW", 
                      "NON_SEALED", "OPEN", "OPENS", "PACKAGE", "PERMITS", 
                      "PRIVATE", "PROTECTED", "PROVIDES", "PUBLIC", "RECORD", 
                      "REQUIRES", "RETURN", "SEALED", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TO", "TRANSIENT", "TRANSITIVE", 
                      "TRY", "USES", "VAR", "VOID", "VOLATILE", "WHEN", 
                      "WHILE", "WITH", "YIELD", "DECIMAL_LITERAL", "HEX_LITERAL", 
                      "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", 
                      "HEX_FLOAT_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", 
                      "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                      "SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", 
                      "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", 
                      "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
                      "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                      "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", 
                      "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", 
                      "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_modularCompulationUnit = 1
    RULE_packageDeclaration = 2
    RULE_importDeclaration = 3
    RULE_typeDeclaration = 4
    RULE_modifier = 5
    RULE_classOrInterfaceModifier = 6
    RULE_variableModifier = 7
    RULE_classDeclaration = 8
    RULE_typeParameters = 9
    RULE_typeParameter = 10
    RULE_typeBound = 11
    RULE_enumDeclaration = 12
    RULE_enumConstants = 13
    RULE_enumConstant = 14
    RULE_enumBodyDeclarations = 15
    RULE_interfaceDeclaration = 16
    RULE_classBody = 17
    RULE_interfaceBody = 18
    RULE_classBodyDeclaration = 19
    RULE_memberDeclaration = 20
    RULE_methodDeclaration = 21
    RULE_methodBody = 22
    RULE_typeTypeOrVoid = 23
    RULE_genericMethodDeclaration = 24
    RULE_genericConstructorDeclaration = 25
    RULE_constructorDeclaration = 26
    RULE_compactConstructorDeclaration = 27
    RULE_fieldDeclaration = 28
    RULE_interfaceBodyDeclaration = 29
    RULE_interfaceMemberDeclaration = 30
    RULE_constDeclaration = 31
    RULE_constantDeclarator = 32
    RULE_interfaceMethodDeclaration = 33
    RULE_interfaceMethodModifier = 34
    RULE_genericInterfaceMethodDeclaration = 35
    RULE_interfaceCommonBodyDeclaration = 36
    RULE_variableDeclarators = 37
    RULE_variableDeclarator = 38
    RULE_variableDeclaratorId = 39
    RULE_variableInitializer = 40
    RULE_arrayInitializer = 41
    RULE_classType = 42
    RULE_packageName = 43
    RULE_typeArgument = 44
    RULE_qualifiedNameList = 45
    RULE_formalParameters = 46
    RULE_receiverParameter = 47
    RULE_formalParameterList = 48
    RULE_formalParameter = 49
    RULE_lambdaLVTIList = 50
    RULE_lambdaLVTIParameter = 51
    RULE_qualifiedName = 52
    RULE_literal = 53
    RULE_integerLiteral = 54
    RULE_floatLiteral = 55
    RULE_altAnnotationQualifiedName = 56
    RULE_annotation = 57
    RULE_annotationFieldValues = 58
    RULE_annotationFieldValue = 59
    RULE_annotationValue = 60
    RULE_elementValue = 61
    RULE_elementValueArrayInitializer = 62
    RULE_annotationTypeDeclaration = 63
    RULE_annotationTypeBody = 64
    RULE_annotationTypeElementDeclaration = 65
    RULE_annotationTypeElementRest = 66
    RULE_annotationMethodOrConstantRest = 67
    RULE_annotationMethodRest = 68
    RULE_annotationConstantRest = 69
    RULE_defaultValue = 70
    RULE_moduleDeclaration = 71
    RULE_moduleDirective = 72
    RULE_requiresModifier = 73
    RULE_recordDeclaration = 74
    RULE_recordHeader = 75
    RULE_recordComponentList = 76
    RULE_recordComponent = 77
    RULE_recordBody = 78
    RULE_block = 79
    RULE_blockStatement = 80
    RULE_localVariableDeclaration = 81
    RULE_identifier = 82
    RULE_typeIdentifier = 83
    RULE_localTypeDeclaration = 84
    RULE_statement = 85
    RULE_catchClause = 86
    RULE_catchType = 87
    RULE_finallyBlock = 88
    RULE_resourceSpecification = 89
    RULE_resources = 90
    RULE_resource = 91
    RULE_switchBlockStatementGroup = 92
    RULE_switchLabel = 93
    RULE_forControl = 94
    RULE_forInit = 95
    RULE_enhancedForControl = 96
    RULE_expressionList = 97
    RULE_methodCall = 98
    RULE_expression = 99
    RULE_pattern = 100
    RULE_componentPatternList = 101
    RULE_componentPattern = 102
    RULE_lambdaExpression = 103
    RULE_lambdaParameters = 104
    RULE_lambdaBody = 105
    RULE_primary = 106
    RULE_switchExpression = 107
    RULE_switchLabeledRule = 108
    RULE_guard = 109
    RULE_casePattern = 110
    RULE_switchRuleOutcome = 111
    RULE_classOrInterfaceType = 112
    RULE_creator = 113
    RULE_createdName = 114
    RULE_innerCreator = 115
    RULE_arrayCreatorRest = 116
    RULE_classCreatorRest = 117
    RULE_explicitGenericInvocation = 118
    RULE_typeArgumentsOrDiamond = 119
    RULE_nonWildcardTypeArgumentsOrDiamond = 120
    RULE_nonWildcardTypeArguments = 121
    RULE_typeList = 122
    RULE_typeType = 123
    RULE_primitiveType = 124
    RULE_typeArguments = 125
    RULE_superSuffix = 126
    RULE_explicitGenericInvocationSuffix = 127
    RULE_arguments = 128

    ruleNames =  [ "compilationUnit", "modularCompulationUnit", "packageDeclaration", 
                   "importDeclaration", "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "methodBody", 
                   "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
                   "constructorDeclaration", "compactConstructorDeclaration", 
                   "fieldDeclaration", "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
                   "interfaceCommonBodyDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "classType", "packageName", "typeArgument", 
                   "qualifiedNameList", "formalParameters", "receiverParameter", 
                   "formalParameterList", "formalParameter", "lambdaLVTIList", 
                   "lambdaLVTIParameter", "qualifiedName", "literal", "integerLiteral", 
                   "floatLiteral", "altAnnotationQualifiedName", "annotation", 
                   "annotationFieldValues", "annotationFieldValue", "annotationValue", 
                   "elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "moduleDeclaration", "moduleDirective", "requiresModifier", 
                   "recordDeclaration", "recordHeader", "recordComponentList", 
                   "recordComponent", "recordBody", "block", "blockStatement", 
                   "localVariableDeclaration", "identifier", "typeIdentifier", 
                   "localTypeDeclaration", "statement", "catchClause", "catchType", 
                   "finallyBlock", "resourceSpecification", "resources", 
                   "resource", "switchBlockStatementGroup", "switchLabel", 
                   "forControl", "forInit", "enhancedForControl", "expressionList", 
                   "methodCall", "expression", "pattern", "componentPatternList", 
                   "componentPattern", "lambdaExpression", "lambdaParameters", 
                   "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
                   "guard", "casePattern", "switchRuleOutcome", "classOrInterfaceType", 
                   "creator", "createdName", "innerCreator", "arrayCreatorRest", 
                   "classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXPORTS=17
    EXTENDS=18
    FINAL=19
    FINALLY=20
    FLOAT=21
    FOR=22
    GOTO=23
    IF=24
    IMPLEMENTS=25
    IMPORT=26
    INSTANCEOF=27
    INT=28
    INTERFACE=29
    LONG=30
    MODULE=31
    NATIVE=32
    NEW=33
    NON_SEALED=34
    OPEN=35
    OPENS=36
    PACKAGE=37
    PERMITS=38
    PRIVATE=39
    PROTECTED=40
    PROVIDES=41
    PUBLIC=42
    RECORD=43
    REQUIRES=44
    RETURN=45
    SEALED=46
    SHORT=47
    STATIC=48
    STRICTFP=49
    SUPER=50
    SWITCH=51
    SYNCHRONIZED=52
    THIS=53
    THROW=54
    THROWS=55
    TO=56
    TRANSIENT=57
    TRANSITIVE=58
    TRY=59
    USES=60
    VAR=61
    VOID=62
    VOLATILE=63
    WHEN=64
    WHILE=65
    WITH=66
    YIELD=67
    DECIMAL_LITERAL=68
    HEX_LITERAL=69
    OCT_LITERAL=70
    BINARY_LITERAL=71
    FLOAT_LITERAL=72
    HEX_FLOAT_LITERAL=73
    BOOL_LITERAL=74
    CHAR_LITERAL=75
    STRING_LITERAL=76
    TEXT_BLOCK=77
    NULL_LITERAL=78
    LPAREN=79
    RPAREN=80
    LBRACE=81
    RBRACE=82
    LBRACK=83
    RBRACK=84
    SEMI=85
    COMMA=86
    DOT=87
    ASSIGN=88
    GT=89
    LT=90
    BANG=91
    TILDE=92
    QUESTION=93
    COLON=94
    EQUAL=95
    LE=96
    GE=97
    NOTEQUAL=98
    AND=99
    OR=100
    INC=101
    DEC=102
    ADD=103
    SUB=104
    MUL=105
    DIV=106
    BITAND=107
    BITOR=108
    CARET=109
    MOD=110
    ADD_ASSIGN=111
    SUB_ASSIGN=112
    MUL_ASSIGN=113
    DIV_ASSIGN=114
    AND_ASSIGN=115
    OR_ASSIGN=116
    XOR_ASSIGN=117
    MOD_ASSIGN=118
    LSHIFT_ASSIGN=119
    RSHIFT_ASSIGN=120
    URSHIFT_ASSIGN=121
    ARROW=122
    COLONCOLON=123
    AT=124
    ELLIPSIS=125
    WS=126
    COMMENT=127
    LINE_COMMENT=128
    IDENTIFIER=129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,i)


        def modularCompulationUnit(self):
            return self.getTypedRuleContext(JavaParser.ModularCompulationUnitContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 258
                    self.packageDeclaration()


                self.state = 265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 263
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [26]:
                            self.state = 261
                            self.importDeclaration()
                            pass
                        elif token in [85]:
                            self.state = 262
                            self.match(JavaParser.SEMI)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 267
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 929654798615042) != 0) or _la==85 or _la==124:
                    self.state = 270
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 9, 16, 19, 29, 34, 39, 40, 42, 43, 46, 48, 49, 124]:
                        self.state = 268
                        self.typeDeclaration()
                        pass
                    elif token in [85]:
                        self.state = 269
                        self.match(JavaParser.SEMI)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 275
                self.match(JavaParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.modularCompulationUnit()
                self.state = 277
                self.match(JavaParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModularCompulationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_modularCompulationUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModularCompulationUnit" ):
                return visitor.visitModularCompulationUnit(self)
            else:
                return visitor.visitChildren(self)




    def modularCompulationUnit(self):

        localctx = JavaParser.ModularCompulationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_modularCompulationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 281
                self.importDeclaration()
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 287
            self.moduleDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageDeclaration" ):
                return visitor.visitPackageDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==124:
                self.state = 289
                self.annotation()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self.match(JavaParser.PACKAGE)
            self.state = 296
            self.qualifiedName()
            self.state = 297
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(JavaParser.IMPORT)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 300
                self.match(JavaParser.STATIC)


            self.state = 303
            self.qualifiedName()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 304
                self.match(JavaParser.DOT)
                self.state = 305
                self.match(JavaParser.MUL)


            self.state = 308
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDeclaration" ):
                return visitor.visitTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 310
                    self.classOrInterfaceModifier() 
                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 316
                self.classDeclaration()
                pass
            elif token in [16]:
                self.state = 317
                self.enumDeclaration()
                pass
            elif token in [29]:
                self.state = 318
                self.interfaceDeclaration()
                pass
            elif token in [124]:
                self.state = 319
                self.annotationTypeDeclaration()
                pass
            elif token in [43]:
                self.state = 320
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_modifier)
        try:
            self.state = 328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 19, 34, 39, 40, 42, 46, 48, 49, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.classOrInterfaceModifier()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 324
                self.match(JavaParser.NATIVE)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 325
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 326
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 5)
                self.state = 327
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceModifier" ):
                return visitor.visitClassOrInterfaceModifier(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.annotation()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.match(JavaParser.PROTECTED)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.match(JavaParser.PRIVATE)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 5)
                self.state = 334
                self.match(JavaParser.STATIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 335
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 7)
                self.state = 336
                self.match(JavaParser.FINAL)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 8)
                self.state = 337
                self.match(JavaParser.STRICTFP)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 9)
                self.state = 338
                self.match(JavaParser.SEALED)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 10)
                self.state = 339
                self.match(JavaParser.NON_SEALED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableModifier" ):
                return visitor.visitVariableModifier(self)
            else:
                return visitor.visitChildren(self)




    def variableModifier(self):

        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_variableModifier)
        try:
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.match(JavaParser.FINAL)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(JavaParser.CLASS)
            self.state = 347
            self.identifier()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 348
                self.typeParameters()


            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 351
                self.match(JavaParser.EXTENDS)
                self.state = 352
                self.typeType()


            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 355
                self.match(JavaParser.IMPLEMENTS)
                self.state = 356
                self.typeList()


            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 359
                self.match(JavaParser.PERMITS)
                self.state = 360
                self.typeList()


            self.state = 363
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(JavaParser.LT)
            self.state = 366
            self.typeParameter()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 367
                self.match(JavaParser.COMMA)
                self.state = 368
                self.typeParameter()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 374
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==124:
                self.state = 376
                self.annotation()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 382
            self.identifier()
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 383
                self.match(JavaParser.EXTENDS)
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 384
                        self.annotation() 
                    self.state = 389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 390
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBound" ):
                return visitor.visitTypeBound(self)
            else:
                return visitor.visitChildren(self)




    def typeBound(self):

        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.typeType()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107:
                self.state = 394
                self.match(JavaParser.BITAND)
                self.state = 395
                self.typeType()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(JavaParser.ENUM)
            self.state = 402
            self.identifier()
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 403
                self.match(JavaParser.IMPLEMENTS)
                self.state = 404
                self.typeList()


            self.state = 407
            self.match(JavaParser.LBRACE)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==124 or _la==129:
                self.state = 408
                self.enumConstants()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 411
                self.match(JavaParser.COMMA)


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 414
                self.enumBodyDeclarations()


            self.state = 417
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstants" ):
                return visitor.visitEnumConstants(self)
            else:
                return visitor.visitChildren(self)




    def enumConstants(self):

        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.enumConstant()
            self.state = 424
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 420
                    self.match(JavaParser.COMMA)
                    self.state = 421
                    self.enumConstant() 
                self.state = 426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstant" ):
                return visitor.visitEnumConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumConstant(self):

        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==124:
                self.state = 427
                self.annotation()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.identifier()
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 434
                self.arguments()


            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 437
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumBodyDeclarations" ):
                return visitor.visitEnumBodyDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def enumBodyDeclarations(self):

        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(JavaParser.SEMI)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736857707) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685729789) != 0):
                self.state = 441
                self.classBodyDeclaration()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclaration" ):
                return visitor.visitInterfaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(JavaParser.INTERFACE)
            self.state = 448
            self.identifier()
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 449
                self.typeParameters()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 452
                self.match(JavaParser.EXTENDS)
                self.state = 453
                self.typeList()


            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 456
                self.match(JavaParser.PERMITS)
                self.state = 457
                self.typeList()


            self.state = 460
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(JavaParser.LBRACE)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736857707) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685729789) != 0):
                self.state = 463
                self.classBodyDeclaration()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 469
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBody" ):
                return visitor.visitInterfaceBody(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(JavaParser.LBRACE)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736855659) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685762557) != 0):
                self.state = 472
                self.interfaceBodyDeclaration()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBodyDeclaration" ):
                return visitor.visitClassBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 481
                    self.match(JavaParser.STATIC)


                self.state = 484
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 485
                        self.modifier() 
                    self.state = 490
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                self.state = 491
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration" ):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaration(self):

        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_memberDeclaration)
        try:
            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.genericMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 497
                self.fieldDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 498
                self.constructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 499
                self.genericConstructorDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 500
                self.interfaceDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 501
                self.annotationTypeDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 502
                self.classDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 503
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclaration" ):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.typeTypeOrVoid()
            self.state = 507
            self.identifier()
            self.state = 508
            self.formalParameters()
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 509
                self.match(JavaParser.LBRACK)
                self.state = 510
                self.match(JavaParser.RBRACK)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 516
                self.match(JavaParser.THROWS)
                self.state = 517
                self.qualifiedNameList()


            self.state = 520
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodBody)
        try:
            self.state = 524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 522
                self.block()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 523
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeTypeOrVoid

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVoid" ):
                return visitor.visitTypeTypeOrVoid(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVoid(self):

        localctx = JavaParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typeTypeOrVoid)
        try:
            self.state = 528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 17, 21, 28, 30, 31, 35, 36, 38, 41, 43, 44, 46, 47, 56, 58, 60, 61, 64, 66, 67, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.typeType()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericMethodDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMethodDeclaration" ):
                return visitor.visitGenericMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericMethodDeclaration(self):

        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.typeParameters()
            self.state = 531
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericConstructorDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericConstructorDeclaration" ):
                return visitor.visitGenericConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.typeParameters()
            self.state = 534
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDeclaration" ):
                return visitor.visitConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.identifier()
            self.state = 537
            self.formalParameters()
            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 538
                self.match(JavaParser.THROWS)
                self.state = 539
                self.qualifiedNameList()


            self.state = 542
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_compactConstructorDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompactConstructorDeclaration" ):
                return visitor.visitCompactConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def compactConstructorDeclaration(self):

        localctx = JavaParser.CompactConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_compactConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 544
                    self.modifier() 
                self.state = 549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 550
            self.identifier()
            self.state = 551
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclaration" ):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.typeType()
            self.state = 554
            self.variableDeclarators()
            self.state = 555
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBodyDeclaration" ):
                return visitor.visitInterfaceBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 12, 14, 16, 17, 19, 21, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 90, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 557
                        self.modifier() 
                    self.state = 562
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                self.state = 563
                self.interfaceMemberDeclaration()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration" ):
                return visitor.visitInterfaceMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.constDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 570
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 571
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 572
                self.annotationTypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 573
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 574
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.typeType()
            self.state = 578
            self.constantDeclarator()
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 579
                self.match(JavaParser.COMMA)
                self.state = 580
                self.constantDeclarator()
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 586
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclarator" ):
                return visitor.visitConstantDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclarator(self):

        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.identifier()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 589
                self.match(JavaParser.LBRACK)
                self.state = 590
                self.match(JavaParser.RBRACK)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self.match(JavaParser.ASSIGN)
            self.state = 597
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodDeclaration" ):
                return visitor.visitInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 599
                    self.interfaceMethodModifier() 
                self.state = 604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 605
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodModifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodModifier" ):
                return visitor.visitInterfaceMethodModifier(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodModifier(self):

        localctx = JavaParser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_interfaceMethodModifier)
        try:
            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.annotation()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 610
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 5)
                self.state = 611
                self.match(JavaParser.STATIC)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 6)
                self.state = 612
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericInterfaceMethodDeclaration" ):
                return visitor.visitGenericInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_genericInterfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 848822976647170) != 0) or _la==124:
                self.state = 615
                self.interfaceMethodModifier()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 621
            self.typeParameters()
            self.state = 622
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceCommonBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceCommonBodyDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceCommonBodyDeclaration" ):
                return visitor.visitInterfaceCommonBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceCommonBodyDeclaration(self):

        localctx = JavaParser.InterfaceCommonBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_interfaceCommonBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 624
                    self.annotation() 
                self.state = 629
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 630
            self.typeTypeOrVoid()
            self.state = 631
            self.identifier()
            self.state = 632
            self.formalParameters()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 633
                self.match(JavaParser.LBRACK)
                self.state = 634
                self.match(JavaParser.RBRACK)
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 640
                self.match(JavaParser.THROWS)
                self.state = 641
                self.qualifiedNameList()


            self.state = 644
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarators" ):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclarators)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.variableDeclarator()
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 647
                    self.match(JavaParser.COMMA)
                    self.state = 648
                    self.variableDeclarator() 
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarator" ):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.variableDeclaratorId()
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 655
                self.match(JavaParser.ASSIGN)
                self.state = 656
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaratorId" ):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableDeclaratorId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.identifier()
            self.state = 664
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self.match(JavaParser.LBRACK)
                    self.state = 661
                    self.match(JavaParser.RBRACK) 
                self.state = 666
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer" ):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variableInitializer)
        try:
            self.state = 669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.arrayInitializer()
                pass
            elif token in [3, 5, 8, 14, 17, 21, 28, 30, 31, 33, 35, 36, 38, 41, 43, 44, 46, 47, 50, 51, 53, 56, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 91, 92, 101, 102, 103, 104, 124, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(JavaParser.LBRACE)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260026367) != 0):
                self.state = 672
                self.variableInitializer()
                self.state = 677
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 673
                        self.match(JavaParser.COMMA)
                        self.state = 674
                        self.variableInitializer() 
                    self.state = 679
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 680
                    self.match(JavaParser.COMMA)




            self.state = 685
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeIdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def packageName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.PackageNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.PackageNameContext,i)


        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassType" ):
                return visitor.visitClassType(self)
            else:
                return visitor.visitChildren(self)




    def classType(self):

        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 695
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                    if la_ == 1:
                        self.state = 687
                        self.packageName()
                        self.state = 688
                        self.match(JavaParser.DOT)
                        self.state = 692
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==124:
                            self.state = 689
                            self.annotation()
                            self.state = 694
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 697
                    self.typeIdentifier()
                    self.state = 699
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 698
                        self.typeArguments()



                else:
                    raise NoViableAltException(self)
                self.state = 703 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 718
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 705
                    self.match(JavaParser.DOT)
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==124:
                        self.state = 706
                        self.annotation()
                        self.state = 711
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 712
                    self.typeIdentifier()
                    self.state = 714
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                    if la_ == 1:
                        self.state = 713
                        self.typeArguments()

             
                self.state = 720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_packageName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageName" ):
                return visitor.visitPackageName(self)
            else:
                return visitor.visitChildren(self)




    def packageName(self):

        localctx = JavaParser.PackageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_packageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.identifier()
            self.state = 726
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 722
                    self.match(JavaParser.DOT)
                    self.state = 723
                    self.identifier() 
                self.state = 728
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument" ):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def typeArgument(self):

        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==124:
                    self.state = 730
                    self.annotation()
                    self.state = 735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 736
                self.match(JavaParser.QUESTION)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==50:
                    self.state = 737
                    _la = self._input.LA(1)
                    if not(_la==18 or _la==50):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 738
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.qualifiedName()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 744
                self.match(JavaParser.COMMA)
                self.state = 745
                self.qualifiedName()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaParser.ReceiverParameterContext,0)


        def formalParameter(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def formalParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterListContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterListContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameters" ):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)




    def formalParameters(self):

        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(JavaParser.LPAREN)
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766758363) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                self.state = 754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 752
                    self.receiverParameter()
                    pass

                elif la_ == 2:
                    self.state = 753
                    self.formalParameter()
                    pass


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 756
                    self.match(JavaParser.COMMA)
                    self.state = 757
                    self.formalParameterList()
                    self.state = 762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 765
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiverParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiverParameter" ):
                return visitor.visitReceiverParameter(self)
            else:
                return visitor.visitChildren(self)




    def receiverParameter(self):

        localctx = JavaParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.typeType()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                self.state = 768
                self.identifier()
                self.state = 769
                self.match(JavaParser.DOT)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 776
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_formalParameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.formalParameter()
            self.state = 783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 779
                    self.match(JavaParser.COMMA)
                    self.state = 780
                    self.formalParameter() 
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 786
                    self.variableModifier() 
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 792
            self.typeType()
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124 or _la==125:
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==124:
                    self.state = 793
                    self.annotation()
                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 799
                self.match(JavaParser.ELLIPSIS)


            self.state = 802
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIList" ):
                return visitor.visitLambdaLVTIList(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIList(self):

        localctx = JavaParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.lambdaLVTIParameter()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 805
                self.match(JavaParser.COMMA)
                self.state = 806
                self.lambdaLVTIParameter()
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIParameter" ):
                return visitor.visitLambdaLVTIParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIParameter(self):

        localctx = JavaParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lambdaLVTIParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==19 or _la==124:
                self.state = 812
                self.variableModifier()
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self.match(JavaParser.VAR)
            self.state = 819
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.identifier()
            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 822
                    self.match(JavaParser.DOT)
                    self.state = 823
                    self.identifier() 
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_literal)
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 69, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.integerLiteral()
                pass
            elif token in [72, 73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self.floatLiteral()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 831
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 5)
                self.state = 833
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 6)
                self.state = 834
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 7)
                self.state = 835
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = JavaParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            _la = self._input.LA(1)
            if not(_la==72 or _la==73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_altAnnotationQualifiedName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAltAnnotationQualifiedName" ):
                return visitor.visitAltAnnotationQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaParser.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                self.state = 842
                self.identifier()
                self.state = 843
                self.match(JavaParser.DOT)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 850
            self.match(JavaParser.AT)
            self.state = 851
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def annotationFieldValues(self):
            return self.getTypedRuleContext(JavaParser.AnnotationFieldValuesContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(JavaParser.AT)
            self.state = 854
            self.qualifiedName()
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 856
                self.annotationFieldValues()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationFieldValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def annotationFieldValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationFieldValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationFieldValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationFieldValues

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationFieldValues" ):
                return visitor.visitAnnotationFieldValues(self)
            else:
                return visitor.visitChildren(self)




    def annotationFieldValues(self):

        localctx = JavaParser.AnnotationFieldValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_annotationFieldValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(JavaParser.LPAREN)
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 860
                self.annotationFieldValue()
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 861
                    self.match(JavaParser.COMMA)
                    self.state = 862
                    self.annotationFieldValue()
                    self.state = 867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 870
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationFieldValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationValue(self):
            return self.getTypedRuleContext(JavaParser.AnnotationValueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationFieldValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationFieldValue" ):
                return visitor.visitAnnotationFieldValue(self)
            else:
                return visitor.visitChildren(self)




    def annotationFieldValue(self):

        localctx = JavaParser.AnnotationFieldValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_annotationFieldValue)
        try:
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                if not  this.IsNotIdentifierAssign() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " this.IsNotIdentifierAssign() ")
                self.state = 873
                self.annotationValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.identifier()
                self.state = 875
                self.match(JavaParser.ASSIGN)
                self.state = 876
                self.annotationValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationValue" ):
                return visitor.visitAnnotationValue(self)
            else:
                return visitor.visitChildren(self)




    def annotationValue(self):

        localctx = JavaParser.AnnotationValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_annotationValue)
        self._la = 0 # Token type
        try:
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 880
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 881
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 882
                self.match(JavaParser.LBRACE)
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260026367) != 0):
                    self.state = 883
                    self.annotationValue()
                    self.state = 888
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 884
                            self.match(JavaParser.COMMA)
                            self.state = 885
                            self.annotationValue() 
                        self.state = 890
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,95,self._ctx)



                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 893
                    self.match(JavaParser.COMMA)


                self.state = 896
                self.match(JavaParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue" ):
                return visitor.visitElementValue(self)
            else:
                return visitor.visitChildren(self)




    def elementValue(self):

        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_elementValue)
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 901
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValueArrayInitializer" ):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(JavaParser.LBRACE)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260026367) != 0):
                self.state = 905
                self.elementValue()
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 906
                        self.match(JavaParser.COMMA)
                        self.state = 907
                        self.elementValue() 
                    self.state = 912
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)



            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 915
                self.match(JavaParser.COMMA)


            self.state = 918
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeDeclaration" ):
                return visitor.visitAnnotationTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(JavaParser.AT)
            self.state = 921
            self.match(JavaParser.INTERFACE)
            self.state = 922
            self.identifier()
            self.state = 923
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeBody" ):
                return visitor.visitAnnotationTypeBody(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeBody(self):

        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(JavaParser.LBRACE)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -2627305097950551659) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660702539773) != 0):
                self.state = 926
                self.annotationTypeElementDeclaration()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 932
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementDeclaration" ):
                return visitor.visitAnnotationTypeElementDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 14, 16, 17, 19, 21, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 56, 57, 58, 60, 61, 63, 64, 66, 67, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 934
                        self.modifier() 
                    self.state = 939
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 940
                self.annotationTypeElementRest()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest" ):
                return visitor.visitAnnotationTypeElementRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementRest(self):

        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationTypeElementRest)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.typeType()
                self.state = 945
                self.annotationMethodOrConstantRest()
                self.state = 946
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.classDeclaration()
                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 949
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 952
                self.interfaceDeclaration()
                self.state = 954
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 953
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 956
                self.enumDeclaration()
                self.state = 958
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 957
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 960
                self.annotationTypeDeclaration()
                self.state = 962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 961
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 964
                self.recordDeclaration()
                self.state = 966
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 965
                    self.match(JavaParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodOrConstantRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodOrConstantRest" ):
                return visitor.visitAnnotationMethodOrConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodRest" ):
                return visitor.visitAnnotationMethodRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodRest(self):

        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.identifier()
            self.state = 975
            self.match(JavaParser.LPAREN)
            self.state = 976
            self.match(JavaParser.RPAREN)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 977
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationConstantRest" ):
                return visitor.visitAnnotationConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationConstantRest(self):

        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(JavaParser.DEFAULT)
            self.state = 983
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_moduleDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDeclaration" ):
                return visitor.visitModuleDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleDeclaration(self):

        localctx = JavaParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==124:
                self.state = 985
                self.annotation()
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 991
                self.match(JavaParser.OPEN)


            self.state = 994
            self.match(JavaParser.MODULE)
            self.state = 995
            self.qualifiedName()
            self.state = 996
            self.match(JavaParser.LBRACE)
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152941364535754752) != 0):
                self.state = 997
                self.moduleDirective()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1003
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDirective

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDirective" ):
                return visitor.visitModuleDirective(self)
            else:
                return visitor.visitChildren(self)




    def moduleDirective(self):

        localctx = JavaParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.match(JavaParser.REQUIRES)
                self.state = 1009
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1006
                        self.requiresModifier() 
                    self.state = 1011
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                self.state = 1012
                self.qualifiedName()
                self.state = 1013
                self.match(JavaParser.SEMI)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(JavaParser.EXPORTS)
                self.state = 1016
                self.qualifiedName()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 1017
                    self.match(JavaParser.TO)
                    self.state = 1018
                    self.qualifiedName()
                    self.state = 1023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==86:
                        self.state = 1019
                        self.match(JavaParser.COMMA)
                        self.state = 1020
                        self.qualifiedName()
                        self.state = 1025
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1028
                self.match(JavaParser.SEMI)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1030
                self.match(JavaParser.OPENS)
                self.state = 1031
                self.qualifiedName()
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 1032
                    self.match(JavaParser.TO)
                    self.state = 1033
                    self.qualifiedName()
                    self.state = 1038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==86:
                        self.state = 1034
                        self.match(JavaParser.COMMA)
                        self.state = 1035
                        self.qualifiedName()
                        self.state = 1040
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1043
                self.match(JavaParser.SEMI)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1045
                self.match(JavaParser.USES)
                self.state = 1046
                self.qualifiedName()
                self.state = 1047
                self.match(JavaParser.SEMI)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1049
                self.match(JavaParser.PROVIDES)
                self.state = 1050
                self.qualifiedName()
                self.state = 1051
                self.match(JavaParser.WITH)
                self.state = 1052
                self.qualifiedName()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1053
                    self.match(JavaParser.COMMA)
                    self.state = 1054
                    self.qualifiedName()
                    self.state = 1059
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1060
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requiresModifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiresModifier" ):
                return visitor.visitRequiresModifier(self)
            else:
                return visitor.visitChildren(self)




    def requiresModifier(self):

        localctx = JavaParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            _la = self._input.LA(1)
            if not(_la==48 or _la==58):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaParser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordDeclaration" ):
                return visitor.visitRecordDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def recordDeclaration(self):

        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(JavaParser.RECORD)
            self.state = 1067
            self.identifier()
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1068
                self.typeParameters()


            self.state = 1071
            self.recordHeader()
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1072
                self.match(JavaParser.IMPLEMENTS)
                self.state = 1073
                self.typeList()


            self.state = 1076
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaParser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordHeader" ):
                return visitor.visitRecordHeader(self)
            else:
                return visitor.visitChildren(self)




    def recordHeader(self):

        localctx = JavaParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(JavaParser.LPAREN)
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766823899) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                self.state = 1079
                self.recordComponentList()


            self.state = 1082
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordComponentList" ):
                return visitor.visitRecordComponentList(self)
            else:
                return visitor.visitChildren(self)




    def recordComponentList(self):

        localctx = JavaParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordComponentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.recordComponent()
            self.state = 1089
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1085
                    self.match(JavaParser.COMMA)
                    self.state = 1086
                    self.recordComponent() 
                self.state = 1091
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1092
            if not  this.DoLastRecordComponent() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " this.DoLastRecordComponent() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordComponent" ):
                return visitor.visitRecordComponent(self)
            else:
                return visitor.visitChildren(self)




    def recordComponent(self):

        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_recordComponent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1094
                    self.annotation() 
                self.state = 1099
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 1100
            self.typeType()
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124 or _la==125:
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==124:
                    self.state = 1101
                    self.annotation()
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1107
                self.match(JavaParser.ELLIPSIS)


            self.state = 1110
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def compactConstructorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CompactConstructorDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.CompactConstructorDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordBody" ):
                return visitor.visitRecordBody(self)
            else:
                return visitor.visitChildren(self)




    def recordBody(self):

        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(JavaParser.LBRACE)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736857707) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685729789) != 0):
                self.state = 1115
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1113
                    self.classBodyDeclaration()
                    pass

                elif la_ == 2:
                    self.state = 1114
                    self.compactConstructorDeclaration()
                    pass


                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1120
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(JavaParser.LBRACE)
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9043227909781416766) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1152923566663204863) != 0) or _la==129:
                self.state = 1123
                self.blockStatement()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1129
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalTypeDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_blockStatement)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.localVariableDeclaration()
                self.state = 1132
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1134
                self.localTypeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1135
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1138
                    self.variableModifier() 
                self.state = 1143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 1152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1144
                self.match(JavaParser.VAR)
                self.state = 1145
                self.identifier()
                self.state = 1146
                self.match(JavaParser.ASSIGN)
                self.state = 1147
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1149
                self.typeType()
                self.state = 1150
                self.variableDeclarators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WHEN(self):
            return self.getToken(JavaParser.WHEN, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            _la = self._input.LA(1)
            if not(((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeIdentifier" ):
                return visitor.visitTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def typeIdentifier(self):

        localctx = JavaParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1513299739976794112) != 0) or _la==66 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localTypeDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalTypeDeclaration" ):
                return visitor.visitLocalTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localTypeDeclaration(self):

        localctx = JavaParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_localTypeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 920858168655874) != 0) or _la==124:
                self.state = 1158
                self.classOrInterfaceModifier()
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1164
                self.classDeclaration()
                pass
            elif token in [29]:
                self.state = 1165
                self.interfaceDeclaration()
                pass
            elif token in [43]:
                self.state = 1166
                self.recordDeclaration()
                pass
            elif token in [16]:
                self.state = 1167
                self.enumDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaParser.ForControlContext,0)


        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1170
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1171
                self.match(JavaParser.ASSERT)
                self.state = 1172
                self.expression(0)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1173
                    self.match(JavaParser.COLON)
                    self.state = 1174
                    self.expression(0)


                self.state = 1177
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1179
                self.match(JavaParser.IF)
                self.state = 1180
                self.match(JavaParser.LPAREN)
                self.state = 1181
                self.expression(0)
                self.state = 1182
                self.match(JavaParser.RPAREN)
                self.state = 1183
                self.statement()
                self.state = 1186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1184
                    self.match(JavaParser.ELSE)
                    self.state = 1185
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1188
                self.match(JavaParser.FOR)
                self.state = 1189
                self.match(JavaParser.LPAREN)
                self.state = 1190
                self.forControl()
                self.state = 1191
                self.match(JavaParser.RPAREN)
                self.state = 1192
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1194
                self.match(JavaParser.WHILE)
                self.state = 1195
                self.match(JavaParser.LPAREN)
                self.state = 1196
                self.expression(0)
                self.state = 1197
                self.match(JavaParser.RPAREN)
                self.state = 1198
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1200
                self.match(JavaParser.DO)
                self.state = 1201
                self.statement()
                self.state = 1202
                self.match(JavaParser.WHILE)
                self.state = 1203
                self.match(JavaParser.LPAREN)
                self.state = 1204
                self.expression(0)
                self.state = 1205
                self.match(JavaParser.RPAREN)
                self.state = 1206
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1208
                self.match(JavaParser.TRY)
                self.state = 1209
                self.block()
                self.state = 1219
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 1211 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1210
                        self.catchClause()
                        self.state = 1213 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==7):
                            break

                    self.state = 1216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 1215
                        self.finallyBlock()


                    pass
                elif token in [20]:
                    self.state = 1218
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1221
                self.match(JavaParser.TRY)
                self.state = 1222
                self.resourceSpecification()
                self.state = 1223
                self.block()
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1224
                    self.catchClause()
                    self.state = 1229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 1230
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1233
                self.match(JavaParser.SWITCH)
                self.state = 1234
                self.match(JavaParser.LPAREN)
                self.state = 1235
                self.expression(0)
                self.state = 1236
                self.match(JavaParser.RPAREN)
                self.state = 1237
                self.match(JavaParser.LBRACE)
                self.state = 1241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1238
                        self.switchBlockStatementGroup() 
                    self.state = 1243
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6 or _la==12:
                    self.state = 1244
                    self.switchLabel()
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1250
                self.match(JavaParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1252
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1253
                self.match(JavaParser.LPAREN)
                self.state = 1254
                self.expression(0)
                self.state = 1255
                self.match(JavaParser.RPAREN)
                self.state = 1256
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1258
                self.match(JavaParser.RETURN)
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1259
                    self.expression(0)


                self.state = 1262
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1263
                self.match(JavaParser.THROW)
                self.state = 1264
                self.expression(0)
                self.state = 1265
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1267
                self.match(JavaParser.BREAK)
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                    self.state = 1268
                    self.identifier()


                self.state = 1271
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1272
                self.match(JavaParser.CONTINUE)
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                    self.state = 1273
                    self.identifier()


                self.state = 1276
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1277
                self.match(JavaParser.YIELD)
                self.state = 1278
                self.expression(0)
                self.state = 1279
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1281
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1282
                localctx.statementExpression = self.expression(0)
                self.state = 1283
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1285
                self.switchExpression()
                self.state = 1287
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1286
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1289
                localctx.identifierLabel = self.identifier()
                self.state = 1290
                self.match(JavaParser.COLON)
                self.state = 1291
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(JavaParser.CATCH)
            self.state = 1296
            self.match(JavaParser.LPAREN)
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==19 or _la==124:
                self.state = 1297
                self.variableModifier()
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1303
            self.catchType()
            self.state = 1304
            self.identifier()
            self.state = 1305
            self.match(JavaParser.RPAREN)
            self.state = 1306
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchType" ):
                return visitor.visitCatchType(self)
            else:
                return visitor.visitChildren(self)




    def catchType(self):

        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.qualifiedName()
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==108:
                self.state = 1309
                self.match(JavaParser.BITOR)
                self.state = 1310
                self.qualifiedName()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(JavaParser.FINALLY)
            self.state = 1317
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceSpecification" ):
                return visitor.visitResourceSpecification(self)
            else:
                return visitor.visitChildren(self)




    def resourceSpecification(self):

        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(JavaParser.LPAREN)
            self.state = 1320
            self.resources()
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 1321
                self.match(JavaParser.SEMI)


            self.state = 1324
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResources" ):
                return visitor.visitResources(self)
            else:
                return visitor.visitChildren(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.resource()
            self.state = 1331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1327
                    self.match(JavaParser.SEMI)
                    self.state = 1328
                    self.resource() 
                self.state = 1333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_resource)
        self._la = 0 # Token type
        try:
            self.state = 1351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==19 or _la==124:
                    self.state = 1334
                    self.variableModifier()
                    self.state = 1339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1340
                    self.classOrInterfaceType()
                    self.state = 1341
                    self.variableDeclaratorId()
                    pass

                elif la_ == 2:
                    self.state = 1343
                    self.match(JavaParser.VAR)
                    self.state = 1344
                    self.identifier()
                    pass


                self.state = 1347
                self.match(JavaParser.ASSIGN)
                self.state = 1348
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1350
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COLON)
            else:
                return self.getToken(JavaParser.COLON, i)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockStatementGroup" ):
                return visitor.visitSwitchBlockStatementGroup(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1353
                self.switchLabel()
                self.state = 1354
                self.match(JavaParser.COLON)
                self.state = 1358 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==6 or _la==12):
                    break

            self.state = 1361 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1360
                self.blockStatement()
                self.state = 1363 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 9043227909781416766) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1152923566663204863) != 0) or _la==129):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_switchLabel)
        try:
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.match(JavaParser.CASE)
                self.state = 1371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1366
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1367
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1368
                    self.typeType()
                    self.state = 1369
                    localctx.varName = self.identifier()
                    pass


                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1373
                self.match(JavaParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forControl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl" ):
                return visitor.visitForControl(self)
            else:
                return visitor.visitChildren(self)




    def forControl(self):

        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017684443) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1377
                    self.forInit()


                self.state = 1380
                self.match(JavaParser.SEMI)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1381
                    self.expression(0)


                self.state = 1384
                self.match(JavaParser.SEMI)
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1385
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_forInit)
        try:
            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhancedForControl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhancedForControl" ):
                return visitor.visitEnhancedForControl(self)
            else:
                return visitor.visitChildren(self)




    def enhancedForControl(self):

        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1394
                    self.variableModifier() 
                self.state = 1399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1400
                self.typeType()
                pass

            elif la_ == 2:
                self.state = 1401
                self.match(JavaParser.VAR)
                pass


            self.state = 1404
            self.variableDeclaratorId()
            self.state = 1405
            self.match(JavaParser.COLON)
            self.state = 1406
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.expression(0)
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1409
                self.match(JavaParser.COMMA)
                self.state = 1410
                self.expression(0)
                self.state = 1415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodCall

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall" ):
                return visitor.visitMethodCall(self)
            else:
                return visitor.visitChildren(self)




    def methodCall(self):

        localctx = JavaParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.state = 1416
                self.identifier()
                pass
            elif token in [53]:
                self.state = 1417
                self.match(JavaParser.THIS)
                pass
            elif token in [50]:
                self.state = 1418
                self.match(JavaParser.SUPER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1421
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)
        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernaryExpression" ):
                return visitor.visitTernaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class InstanceOfOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)
        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceOfOperatorExpression" ):
                return visitor.visitInstanceOfOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)
        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)
        def INC(self):
            return self.getToken(JavaParser.INC, 0)
        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)
        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)
        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperatorExpression" ):
                return visitor.visitUnaryOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class ObjectCreationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)
        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectCreationExpression" ):
                return visitor.visitObjectCreationExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExpressionLambdaContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionLambda" ):
                return visitor.visitExpressionLambda(self)
            else:
                return visitor.visitChildren(self)


    class PostIncrementDecrementOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.postfix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)
        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostIncrementDecrementOperatorExpression" ):
                return visitor.visitPostIncrementDecrementOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class MemberReferenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)

        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)
        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)
        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext,0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)
        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)

        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext,0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberReferenceExpression" ):
                return visitor.visitMemberReferenceExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExpressionSwitchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionSwitch" ):
                return visitor.visitExpressionSwitch(self)
            else:
                return visitor.visitChildren(self)


    class BinaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)
        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)
        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)
        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)
        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)
        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)
        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)
        def LE(self):
            return self.getToken(JavaParser.LE, 0)
        def GE(self):
            return self.getToken(JavaParser.GE, 0)
        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)
        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)
        def BITAND(self):
            return self.getToken(JavaParser.BITAND, 0)
        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)
        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)
        def AND(self):
            return self.getToken(JavaParser.AND, 0)
        def OR(self):
            return self.getToken(JavaParser.OR, 0)
        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)
        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)
        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)
        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)
        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)
        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)
        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)
        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)
        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)
        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)
        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)
        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOperatorExpression" ):
                return visitor.visitBinaryOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class MethodCallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCallExpression" ):
                return visitor.visitMethodCallExpression(self)
            else:
                return visitor.visitChildren(self)


    class MethodReferenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)

        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)
        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)

        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodReferenceExpression" ):
                return visitor.visitMethodReferenceExpression(self)
            else:
                return visitor.visitChildren(self)


    class SquareBracketExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSquareBracketExpression" ):
                return visitor.visitSquareBracketExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)
        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)

        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                localctx = JavaParser.PrimaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1424
                self.primary()
                pass

            elif la_ == 2:
                localctx = JavaParser.MethodCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1425
                self.methodCall()
                pass

            elif la_ == 3:
                localctx = JavaParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1426
                self.typeType()
                self.state = 1427
                self.match(JavaParser.COLONCOLON)
                self.state = 1433
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 90, 129]:
                    self.state = 1429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 1428
                        self.typeArguments()


                    self.state = 1431
                    self.identifier()
                    pass
                elif token in [33]:
                    self.state = 1432
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = JavaParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1435
                self.classType()
                self.state = 1436
                self.match(JavaParser.COLONCOLON)
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1437
                    self.typeArguments()


                self.state = 1440
                self.match(JavaParser.NEW)
                pass

            elif la_ == 5:
                localctx = JavaParser.ExpressionSwitchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1442
                self.switchExpression()
                pass

            elif la_ == 6:
                localctx = JavaParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1443
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1444
                self.expression(17)
                pass

            elif la_ == 7:
                localctx = JavaParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1445
                self.match(JavaParser.LPAREN)
                self.state = 1449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1446
                        self.annotation() 
                    self.state = 1451
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

                self.state = 1452
                self.typeType()
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==107:
                    self.state = 1453
                    self.match(JavaParser.BITAND)
                    self.state = 1454
                    self.typeType()
                    self.state = 1459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1460
                self.match(JavaParser.RPAREN)
                self.state = 1461
                self.expression(16)
                pass

            elif la_ == 8:
                localctx = JavaParser.ObjectCreationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1463
                self.match(JavaParser.NEW)
                self.state = 1464
                self.creator()
                pass

            elif la_ == 9:
                localctx = JavaParser.ExpressionLambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1465
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1549
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1468
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1469
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1470
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1471
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1472
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==103 or _la==104):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1473
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1474
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1482
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                        if la_ == 1:
                            self.state = 1475
                            self.match(JavaParser.LT)
                            self.state = 1476
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1477
                            self.match(JavaParser.GT)
                            self.state = 1478
                            self.match(JavaParser.GT)
                            self.state = 1479
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1480
                            self.match(JavaParser.GT)
                            self.state = 1481
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1484
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1485
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1486
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1487
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1488
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1489
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==95 or _la==98):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1490
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1491
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1492
                        localctx.bop = self.match(JavaParser.BITAND)
                        self.state = 1493
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1494
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1495
                        localctx.bop = self.match(JavaParser.CARET)
                        self.state = 1496
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1497
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1498
                        localctx.bop = self.match(JavaParser.BITOR)
                        self.state = 1499
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1500
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1501
                        localctx.bop = self.match(JavaParser.AND)
                        self.state = 1502
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1503
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1504
                        localctx.bop = self.match(JavaParser.OR)
                        self.state = 1505
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.TernaryExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1506
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1507
                        localctx.bop = self.match(JavaParser.QUESTION)
                        self.state = 1508
                        self.expression(0)
                        self.state = 1509
                        self.match(JavaParser.COLON)
                        self.state = 1510
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1512
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1513
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1514
                        self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.SquareBracketExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1515
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1516
                        self.match(JavaParser.LBRACK)
                        self.state = 1517
                        self.expression(0)
                        self.state = 1518
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 14:
                        localctx = JavaParser.MemberReferenceExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1520
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1521
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1533
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                        if la_ == 1:
                            self.state = 1522
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1523
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1524
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1525
                            self.match(JavaParser.NEW)
                            self.state = 1527
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==90:
                                self.state = 1526
                                self.nonWildcardTypeArguments()


                            self.state = 1529
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1530
                            self.match(JavaParser.SUPER)
                            self.state = 1531
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1532
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 15:
                        localctx = JavaParser.MethodReferenceExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1535
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1536
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1538
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==90:
                            self.state = 1537
                            self.typeArguments()


                        self.state = 1540
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.PostIncrementDecrementOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1541
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1542
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==101 or _la==102):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 17:
                        localctx = JavaParser.InstanceOfOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1543
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1544
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1547
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                        if la_ == 1:
                            self.state = 1545
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1546
                            self.pattern()
                            pass


                        pass

             
                self.state = 1553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def componentPatternList(self):
            return self.getTypedRuleContext(JavaParser.ComponentPatternListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1554
                        self.variableModifier() 
                    self.state = 1559
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                self.state = 1560
                self.typeType()
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==124:
                    self.state = 1561
                    self.annotation()
                    self.state = 1566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1567
                self.variableDeclarators()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.typeType()
                self.state = 1570
                self.match(JavaParser.LPAREN)
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766758363) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                    self.state = 1571
                    self.componentPatternList()


                self.state = 1574
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentPatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ComponentPatternContext)
            else:
                return self.getTypedRuleContext(JavaParser.ComponentPatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_componentPatternList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponentPatternList" ):
                return visitor.visitComponentPatternList(self)
            else:
                return visitor.visitChildren(self)




    def componentPatternList(self):

        localctx = JavaParser.ComponentPatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_componentPatternList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.componentPattern()
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1579
                self.match(JavaParser.COMMA)
                self.state = 1580
                self.componentPattern()
                self.state = 1585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_componentPattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponentPattern" ):
                return visitor.visitComponentPattern(self)
            else:
                return visitor.visitChildren(self)




    def componentPattern(self):

        localctx = JavaParser.ComponentPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_componentPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaExpression" ):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaExpression(self):

        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self.lambdaParameters()
            self.state = 1589
            self.match(JavaParser.ARROW)
            self.state = 1590
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1592
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.match(JavaParser.LPAREN)
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766758363) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                    self.state = 1594
                    self.formalParameterList()


                self.state = 1597
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1598
                self.match(JavaParser.LPAREN)
                self.state = 1599
                self.identifier()
                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1600
                    self.match(JavaParser.COMMA)
                    self.state = 1601
                    self.identifier()
                    self.state = 1606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1607
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1609
                self.match(JavaParser.LPAREN)
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19 or _la==61 or _la==124:
                    self.state = 1610
                    self.lambdaLVTIList()


                self.state = 1613
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody" ):
                return visitor.visitLambdaBody(self)
            else:
                return visitor.visitChildren(self)




    def lambdaBody(self):

        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_lambdaBody)
        try:
            self.state = 1618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 17, 21, 28, 30, 31, 33, 35, 36, 38, 41, 43, 44, 46, 47, 50, 51, 53, 56, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 91, 92, 101, 102, 103, 104, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1616
                self.expression(0)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1617
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_primary)
        try:
            self.state = 1638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1620
                self.match(JavaParser.LPAREN)
                self.state = 1621
                self.expression(0)
                self.state = 1622
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1624
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1625
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1626
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1627
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1628
                self.typeTypeOrVoid()
                self.state = 1629
                self.match(JavaParser.DOT)
                self.state = 1630
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1632
                self.nonWildcardTypeArguments()
                self.state = 1636
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 50, 56, 58, 60, 61, 64, 66, 67, 129]:
                    self.state = 1633
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [53]:
                    self.state = 1634
                    self.match(JavaParser.THIS)
                    self.state = 1635
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(JavaParser.SWITCH)
            self.state = 1641
            self.match(JavaParser.LPAREN)
            self.state = 1642
            self.expression(0)
            self.state = 1643
            self.match(JavaParser.RPAREN)
            self.state = 1644
            self.match(JavaParser.LBRACE)
            self.state = 1648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==12:
                self.state = 1645
                self.switchLabeledRule()
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1651
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def casePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CasePatternContext)
            else:
                return self.getTypedRuleContext(JavaParser.CasePatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def guard(self):
            return self.getTypedRuleContext(JavaParser.GuardContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_switchLabeledRule

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabeledRule" ):
                return visitor.visitSwitchLabeledRule(self)
            else:
                return visitor.visitChildren(self)




    def switchLabeledRule(self):

        localctx = JavaParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 1678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                self.match(JavaParser.CASE)
                self.state = 1671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1654
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1655
                    self.match(JavaParser.NULL_LITERAL)
                    self.state = 1658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==86:
                        self.state = 1656
                        self.match(JavaParser.COMMA)
                        self.state = 1657
                        self.match(JavaParser.DEFAULT)


                    pass

                elif la_ == 3:
                    self.state = 1660
                    self.casePattern()
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==86:
                        self.state = 1661
                        self.match(JavaParser.COMMA)
                        self.state = 1662
                        self.casePattern()
                        self.state = 1667
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 1668
                        self.guard()


                    pass


                self.state = 1673
                _la = self._input.LA(1)
                if not(_la==94 or _la==122):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1674
                self.switchRuleOutcome()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1675
                self.match(JavaParser.DEFAULT)
                self.state = 1676
                _la = self._input.LA(1)
                if not(_la==94 or _la==122):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1677
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(JavaParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_guard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = JavaParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.match(JavaParser.WHEN)
            self.state = 1681
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CasePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_casePattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCasePattern" ):
                return visitor.visitCasePattern(self)
            else:
                return visitor.visitChildren(self)




    def casePattern(self):

        localctx = JavaParser.CasePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_casePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchRuleOutcome

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchRuleOutcome" ):
                return visitor.visitSwitchRuleOutcome(self)
            else:
                return visitor.visitChildren(self)




    def switchRuleOutcome(self):

        localctx = JavaParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1685
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9043227909781416766) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1152923566663204863) != 0) or _la==129:
                    self.state = 1686
                    self.blockStatement()
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceType" ):
                return visitor.visitClassOrInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.classType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator" ):
                return visitor.visitCreator(self)
            else:
                return visitor.visitChildren(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_creator)
        self._la = 0 # Token type
        try:
            self.state = 1705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1696
                    self.nonWildcardTypeArguments()


                self.state = 1699
                self.createdName()
                self.state = 1700
                self.classCreatorRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1702
                self.createdName()
                self.state = 1703
                self.arrayCreatorRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatedName" ):
                return visitor.visitCreatedName(self)
            else:
                return visitor.visitChildren(self)




    def createdName(self):

        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1707
                self.identifier()
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1708
                    self.typeArgumentsOrDiamond()


                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==87:
                    self.state = 1711
                    self.match(JavaParser.DOT)
                    self.state = 1712
                    self.identifier()
                    self.state = 1714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 1713
                        self.typeArgumentsOrDiamond()


                    self.state = 1720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [3, 5, 8, 14, 21, 28, 30, 47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1721
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerCreator" ):
                return visitor.visitInnerCreator(self)
            else:
                return visitor.visitChildren(self)




    def innerCreator(self):

        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.identifier()
            self.state = 1726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1725
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1728
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreatorRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreatorRest" ):
                return visitor.visitArrayCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def arrayCreatorRest(self):

        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 1752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1732 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1730
                    self.match(JavaParser.LBRACK)
                    self.state = 1731
                    self.match(JavaParser.RBRACK)
                    self.state = 1734 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==83):
                        break

                self.state = 1736
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1741 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1737
                        self.match(JavaParser.LBRACK)
                        self.state = 1738
                        self.expression(0)
                        self.state = 1739
                        self.match(JavaParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1743 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

                self.state = 1749
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1745
                        self.match(JavaParser.LBRACK)
                        self.state = 1746
                        self.match(JavaParser.RBRACK) 
                    self.state = 1751
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classCreatorRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassCreatorRest" ):
                return visitor.visitClassCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def classCreatorRest(self):

        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.arguments()
            self.state = 1756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1755
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocation" ):
                return visitor.visitExplicitGenericInvocation(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocation(self):

        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.nonWildcardTypeArguments()
            self.state = 1759
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgumentsOrDiamond" ):
                return visitor.visitTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1761
                self.match(JavaParser.LT)
                self.state = 1762
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1763
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArgumentsOrDiamond" ):
                return visitor.visitNonWildcardTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.match(JavaParser.LT)
                self.state = 1767
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1768
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArguments" ):
                return visitor.visitNonWildcardTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.match(JavaParser.LT)
            self.state = 1772
            self.typeList()
            self.state = 1773
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.typeType()
            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1776
                self.match(JavaParser.COMMA)
                self.state = 1777
                self.typeType()
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeType" ):
                return visitor.visitTypeType(self)
            else:
                return visitor.visitChildren(self)




    def typeType(self):

        localctx = JavaParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_typeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==124:
                self.state = 1783
                self.annotation()
                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.state = 1789
                self.classOrInterfaceType()
                pass
            elif token in [3, 5, 8, 14, 21, 28, 30, 47]:
                self.state = 1790
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1803
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==124:
                        self.state = 1793
                        self.annotation()
                        self.state = 1798
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1799
                    self.match(JavaParser.LBRACK)
                    self.state = 1800
                    self.match(JavaParser.RBRACK) 
                self.state = 1805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 140738832646440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.match(JavaParser.LT)
            self.state = 1809
            self.typeArgument()
            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1810
                self.match(JavaParser.COMMA)
                self.state = 1811
                self.typeArgument()
                self.state = 1816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1817
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperSuffix" ):
                return visitor.visitSuperSuffix(self)
            else:
                return visitor.visitChildren(self)




    def superSuffix(self):

        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_superSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1819
                self.arguments()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1820
                self.match(JavaParser.DOT)
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1821
                    self.typeArguments()


                self.state = 1824
                self.identifier()
                self.state = 1826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1825
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocationSuffix" ):
                return visitor.visitExplicitGenericInvocationSuffix(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1830
                self.match(JavaParser.SUPER)
                self.state = 1831
                self.superSuffix()
                pass
            elif token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1832
                self.identifier()
                self.state = 1833
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.match(JavaParser.LPAREN)
            self.state = 1839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                self.state = 1838
                self.expressionList()


            self.state = 1841
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[59] = self.annotationFieldValue_sempred
        self._predicates[76] = self.recordComponentList_sempred
        self._predicates[99] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def annotationFieldValue_sempred(self, localctx:AnnotationFieldValueContext, predIndex:int):
            if predIndex == 0:
                return  this.IsNotIdentifierAssign() 
         

    def recordComponentList_sempred(self, localctx:RecordComponentListContext, predIndex:int):
            if predIndex == 1:
                return  this.DoLastRecordComponent() 
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 10)
         




